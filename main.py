# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtWidgets, QtCore, QtGui
from PyQt6.QtGui import QPixmap
from PyQt6.QtWidgets import QFileDialog, QMessageBox, QInputDialog, QMenu, QGraphicsScene
from PyQt6.QtCore import QEvent, Qt, QPointF
import pygame
from loguru import logger
import random
import re
import webbrowser
import time
import json
import os, fnmatch
from pathlib import Path

from main_class import Ui_MainWindow
from initiative import InitiativeWindow
from redaction_hp_tracker import Ui_Dialog_redaction_hp_tracker
from too_many_generators import MainWindow_too_many_generators
from img_view import Window_viewer_show
from token_img import TokenImg

from dict_rules import dict_rules
from shop_data import *
from generators_data import *
from utils import *
import utils


hero = {}
hero_in_game = {}
music = {}
store = {}
npc = {}
scenario_chapter = {}
scenario = []
scenario_text = {}
dict_preset = {}
note_zero = ""
note_one = ""
note_two = ""
note_three = ""
note_char_zero = ""
note_char_one = ""
note_char_two = ""
note_char_three = ""

pygame.init()

logger.add("debug.log", format="{time}, {level}, {message}", level="DEBUG", rotation="2 days", retention="2 days")
try:
    class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
        def __init__(self):
            super().__init__()
            self.setupUi(self)
            self.aplication_func()
            self.status = 0
            logger.info("Start")
            self.scale_img_viewer = 0
            self.slide_menu_num = 0
            self.scale_img_view = 0.25

        @logger.catch
        def aplication_func(self):
            # initializing
            self.viewer_window = Window_viewer_show()
            self.initiative_window = InitiativeWindow(hero, dict_preset)
            self.mixer = pygame.mixer.music

            # Menu
            self.toolButton_logo_app.clicked.connect(self.main_menu)
            self.toolButton_menu.clicked.connect(self.slide_menu)
            self.toolButton_tracker.clicked.connect(self.show_tracker)
            self.toolButton_scenario.clicked.connect(self.show_scenario)
            self.toolButton_notes.clicked.connect(self.show_notes)
            self.toolButton_music_changer.clicked.connect(self.show_music_changer)
            self.toolButton_rules.clicked.connect(self.show_rules)
            self.toolButton_generate_store.clicked.connect(self.show_generate_store)
            self.toolButton_npc_generator.clicked.connect(self.show_npc_generator)
            self.toolButton_img_view.clicked.connect(self.open_viewer)

            self.frame_tracker.mousePressEvent = self.slide_menu_hide
            self.frame_scenario.mousePressEvent = self.slide_menu_hide
            self.frame_notes.mousePressEvent = self.slide_menu_hide
            self.frame_music_changer.mousePressEvent = self.slide_menu_hide
            self.frame_rules.mousePressEvent = self.slide_menu_hide
            self.label_rules.mousePressEvent = self.slide_menu_hide
            self.frame_viewer_navigations.mousePressEvent = self.slide_menu_hide
            self.frame_list.mousePressEvent = self.slide_menu_hide
            self.frame_viewer.mousePressEvent = self.slide_menu_hide
            self.frame_generate_store.mousePressEvent = self.slide_menu_hide
            self.label_shop_info.mousePressEvent = self.slide_menu_hide
            self.text_assortment_shop.mousePressEvent = self.slide_menu_hide
            self.frame_npc_generator.mousePressEvent = self.slide_menu_hide
            self.label_generate_npc.mousePressEvent = self.slide_menu_hide

            # PUSHBUTTON
            self.pushButton_exit.clicked.connect(self.close)
            self.pushButton_minimized.clicked.connect(self.showMinimized)
            # tracker
            self.pushButton.clicked.connect(self.input_chek)
            self.pushButton_init_open.clicked.connect(self.open_initiative)
            self.pushButton_roll_dice.clicked.connect(self.roll_dice)
            self.pushButton_del_char.clicked.connect(self.del_char)
            self.pushButton_restore_spell_slots_0.clicked.connect(self.restore_slot_char0)
            self.pushButton_restore_spell_slots_1.clicked.connect(self.restore_slot_char1)
            self.pushButton_restore_spell_slots_2.clicked.connect(self.restore_slot_char2)
            self.pushButton_restore_spell_slots_3.clicked.connect(self.restore_slot_char3)
            self.pushButton_set_spell_slots_0.clicked.connect(self.set_slot_char0)
            self.pushButton_set_spell_slots_1.clicked.connect(self.set_slot_char1)
            self.pushButton_set_spell_slots_2.clicked.connect(self.set_slot_char2)
            self.pushButton_set_spell_slots_3.clicked.connect(self.set_slot_char3)
            # scenario
            self.pushButton_add_tags.clicked.connect(self.status_list_tags)
            self.pushButton_add_chapter.clicked.connect(self.add_chapter)
            self.pushButton_del_tags.clicked.connect(self.del_object_scenario)
            self.pushButton_del_chapter.clicked.connect(self.del_chapter)
            # music
            self.pushButton_url_set.clicked.connect(self.music_changer_update)
            self.pushButton_url_open.clicked.connect(self.music_changer_play)
            self.pushButton_url_delete.clicked.connect(self.music_changer_delete)
            self.pushButton_music_play.clicked.connect(self.play_local_music)
            self.pushButton_music_stop.clicked.connect(self.stop_local_music)
            # viewer
            self.pushButton_open_view.clicked.connect(self.open_viewer_window)
            self.pushButton_left.clicked.connect(self.left_img)
            self.pushButton_right.clicked.connect(self.right_img)
            self.pushButton_refresh_img.clicked.connect(self.collect_img)
            self.pushButton_reduce_token.clicked.connect(self.reduce_token)
            self.pushButton_increase_token.clicked.connect(self.increase_token)
            self.pushButton_reduce_img.clicked.connect(self.reduce_img)
            self.pushButton_increase_img.clicked.connect(self.increase_img)
            # generate store
            self.pushButton_generate_shop.clicked.connect(self.create_store)
            self.pushButton_del_store.clicked.connect(self.del_store)
            # generate npc
            self.pushButton_generate_npc.clicked.connect(self.create_npc)
            self.pushButton_del_npc.clicked.connect(self.del_npc)

            # CHECKBOX
            # tracker
            self.checkBox_lock_init.toggled.connect(self.lock_initiative)
            self.checkBox_lock_ac.toggled.connect(self.lock_ac)
            self.checkBox_hide_spell_slot_char_0.toggled.connect(self.hide_spell_slot_char_0)
            self.checkBox_hide_spell_slot_char_1.toggled.connect(self.hide_spell_slot_char_1)
            self.checkBox_hide_spell_slot_char_2.toggled.connect(self.hide_spell_slot_char_2)
            self.checkBox_hide_spell_slot_char_3.toggled.connect(self.hide_spell_slot_char_3)

            # RADIOBUTTON
            # tracker
            self.radioButton_hide_create.toggled.connect(self.hide_create)
            # scenario
            self.radioButton_tags_notes.toggled.connect(self.hide_chapter)
            # generate store
            self.radioButton_options_store.toggled.connect(self.options_generate_store)

            # COMBOBOX
            # rules
            self.comboBox_rules.currentTextChanged.connect(self.changed_combobox_rules)
            # generate store
            self.box_choose_shop.currentTextChanged.connect(self.view_store)
            # generate npc
            self.box_generate_npc.currentTextChanged.connect(self.view_npc)
            self.comboBox_choose_chapter.currentTextChanged.connect(self.view_text_chapter)

            # LISTWIDGET
            # scenario
            self.list_tags.clicked.connect(self.set_current_index)
            # music
            self.listWidget_category.currentRowChanged.connect(self.listView_scene_update)
            self.listWidget_music.doubleClicked.connect(self.play)
            # viewer
            self.listWidget_img.doubleClicked.connect(self.open_current_img)

            # SPINBOX
            # img viewer
            self.spinBox_enemy_token.valueChanged.connect(self.spinBox_chek)
            self.spinBox_hero_token.valueChanged.connect(self.spinBox_chek)

            # TEXTEDIT
            # tracker
            self.textEdit_char_0.textChanged.connect(self.save_text)
            self.textEdit_char_1.textChanged.connect(self.save_text)
            self.textEdit_char_2.textChanged.connect(self.save_text)
            self.textEdit_char_3.textChanged.connect(self.save_text)
            # scenario
            self.text_scenario.textChanged.connect(self.set_text_to_scenario)
            self.text_chapter.textChanged.connect(self.set_text_chapter)
            # note
            self.text_notes.textChanged.connect(self.shop_notes_edit)
            self.note_edit_0.textChanged.connect(self.save_text)
            self.note_edit_1.textChanged.connect(self.save_text)
            self.note_edit_2.textChanged.connect(self.save_text)
            self.note_edit_3.textChanged.connect(self.save_text)
            # generate store
            self.search_assortment_edit.textChanged.connect(self.search_for_assortment_store)
            # generate npc
            self.text_npc_generate.textChanged.connect(self.npc_notes_edit)

            # hotkeys
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+L"), self, self.lock_window)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+0"), self, self.lock_window)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+1"), self, self.show_tracker)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+I"), self, self.open_initiative)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+2"), self, self.show_scenario)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+3"), self, self.show_notes)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+4"), self, self.show_music_changer)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+5"), self, self.show_rules)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+6"), self, self.open_viewer)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+V"), self, self.open_viewer_window)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+7"), self, self.show_generate_store)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+8"), self, self.show_npc_generator)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+left"), self, self.left_img)
            QtGui.QShortcut(QtGui.QKeySequence("CTRL+right"), self, self.right_img)

            # method
            self.mixer.set_volume(1)
            self.view_character_stats()
            self.set_combobox_rules()
            self.add_to_tracker()
            self.store_type_and_qualification_vendor()
            self.options_store_box_update()
            self.npc_box_update()
            self.collect_img()
            self.collect_music()

        @logger.catch
        def view_character_stats(self):
            '''
            DOCKSTRING: Обновление статов через трекер
            '''
            self.hp_edit_character0.clicked.connect(self.hero0_hp_edit)
            self.hp_edit_character1.clicked.connect(self.hero1_hp_edit)
            self.hp_edit_character2.clicked.connect(self.hero2_hp_edit)
            self.hp_edit_character3.clicked.connect(self.hero3_hp_edit)
            self.ac_edit_character0.editingFinished.connect(self.set_stats_character)
            self.ac_edit_character1.editingFinished.connect(self.set_stats_character)
            self.ac_edit_character2.editingFinished.connect(self.set_stats_character)
            self.ac_edit_character3.editingFinished.connect(self.set_stats_character)
            self.initiative_edit_character0.editingFinished.connect(self.set_stats_character)
            self.initiative_edit_character1.editingFinished.connect(self.set_stats_character)
            self.initiative_edit_character2.editingFinished.connect(self.set_stats_character)
            self.initiative_edit_character3.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character0.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character0_2.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character0_3.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character0_4.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character0_5.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character0_6.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character0_7.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character0_8.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character0_9.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character1.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character1_2.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character1_3.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character1_4.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character1_5.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character1_6.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character1_7.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character1_8.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character1_9.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character2.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character2_2.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character2_3.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character2_4.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character2_5.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character2_6.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character2_7.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character2_8.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character2_9.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character3.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character3_2.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character3_3.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character3_4.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character3_5.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character3_6.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character3_7.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character3_8.editingFinished.connect(self.set_stats_character)
            self.spin_spell_slot_character3_9.editingFinished.connect(self.set_stats_character)

        '''
        Menu
        '''

        @logger.catch
        def main_menu(self, bool_val):
            menu = QMenu()
            menu.setStyleSheet("QMenu    {background-color: rgb(55, 55, 55);\n"
                                       "    color: rgb(247, 147, 30);}\n"
                               "QMenu::item {background-color: transparent;}\n"
                               "QMenu::item:selected {background-color: rgb(85, 85, 85);}")
            action_save = menu.addAction("Save", self.actions_save)
            icon_save = QtGui.QIcon()
            icon_save.addPixmap(QtGui.QPixmap("img/icon/save.ico"), QtGui.QIcon.Mode.Normal,
                                QtGui.QIcon.State.Off)
            action_save.setIcon(icon_save)

            action_load = menu.addAction("Load", self.action_open)
            icon_load = QtGui.QIcon()
            icon_load.addPixmap(QtGui.QPixmap("img/icon/load.ico"), QtGui.QIcon.Mode.Normal,
                                QtGui.QIcon.State.Off)
            action_load.setIcon(icon_load)

            action_last_session = menu.addAction("Last session", self.last_session)
            action_last_session.setIcon(icon_load)

            action_generators = menu.addAction("Generators", self.open_generators)
            icon_generators = QtGui.QIcon()
            icon_generators.addPixmap(QtGui.QPixmap("img/icon/dice.ico"), QtGui.QIcon.Mode.Normal,
                                QtGui.QIcon.State.Off)
            action_generators.setIcon(icon_generators)

            action_info = menu.addAction("Info", self.open_info)
            icon_info = QtGui.QIcon()
            icon_info.addPixmap(QtGui.QPixmap("img/icon/!.png"), QtGui.QIcon.Mode.Normal,
                                      QtGui.QIcon.State.Off)
            action_info.setIcon(icon_info)

            menu.exec(self.pos())

        @logger.catch
        def actions_save(self):
            '''
            DOCKSTRING: сохранение в json файл
            '''
            global note_zero
            global note_one
            global note_two
            global note_three
            global note_char_zero
            global note_char_one
            global note_char_two
            global note_char_three
            note_zero = self.note_edit_0.toPlainText()
            note_one = self.note_edit_1.toPlainText()
            note_two = self.note_edit_2.toPlainText()
            note_three = self.note_edit_3.toPlainText()
            note_char_zero = self.textEdit_char_0.toPlainText()
            note_char_one = self.textEdit_char_1.toPlainText()
            note_char_two = self.textEdit_char_2.toPlainText()
            note_char_three = self.textEdit_char_3.toPlainText()

            save_dict = (
                hero,
                hero_in_game,
                music,
                note_zero,
                note_one,
                note_two,
                note_three,
                note_char_zero,
                note_char_one,
                note_char_two,
                note_char_three,
                store,
                npc,
                dict_preset,
                scenario,
                scenario_text,
                scenario_chapter,
            )
            data = QFileDialog.getSaveFileName(self, filter="Save (*.json)")[0]

            try:
                with open(data, 'w') as outfile:
                    json.dump(save_dict, outfile)
            except FileNotFoundError:
                logger.info("action_save. except")

        @logger.catch
        def action_open(self):
            '''
            DOCKSTRING: загрузка из json файла
            '''
            global dict_preset

            data = QFileDialog.getOpenFileName(self, filter="Save (*.json)")[0]

            try:
                with open(data, 'r', encoding="utf-8") as json_file:
                    data = json.load(json_file)
                    global hero
                    global hero_in_game
                    global music
                    global store
                    global npc
                    global scenario
                    global scenario_text
                    global scenario_chapter
                    hero = data[0]
                    hero_in_game = data[1]
                    music = data[2]
                    self.note_edit_0.setText(data[3])
                    self.note_edit_1.setText(data[4])
                    self.note_edit_2.setText(data[5])
                    self.note_edit_3.setText(data[6])
                    self.textEdit_char_0.setText(data[7])
                    self.textEdit_char_1.setText(data[8])
                    self.textEdit_char_2.setText(data[9])
                    self.textEdit_char_3.setText(data[10])
                    store = data[11]
                    npc = data[12]
                    dict_preset = data[13]
                    scenario = data[14]
                    scenario_text = data[15]
                    scenario_chapter = data[16]

                self.view_create_hero()
                self.add_to_tracker()
                self.music_changer_listview_category_update()
                self.add_to_del_char_box()
                self.box_choose_shop_update()
                self.box_generate_npc_update()
                self.comboBox_choose_chapter_update()
                self.update_list_tags()
            except FileNotFoundError:
                logger.info("action_open. except")

        @logger.catch
        def last_session(self):
            '''
            DOCKSTRING: загрузка из json файла
            '''
            global dict_preset

            try:
                with open('last_session.json', 'r', encoding="utf-8") as json_file:
                    data = json.load(json_file)
                    global hero
                    global hero_in_game
                    global music
                    global store
                    global npc
                    global scenario
                    global scenario_text
                    global scenario_chapter
                    hero = data[0]
                    hero_in_game = data[1]
                    music = data[2]
                    self.note_edit_0.setText(data[3])
                    self.note_edit_1.setText(data[4])
                    self.note_edit_2.setText(data[5])
                    self.note_edit_3.setText(data[6])
                    self.textEdit_char_0.setText(data[7])
                    self.textEdit_char_1.setText(data[8])
                    self.textEdit_char_2.setText(data[9])
                    self.textEdit_char_3.setText(data[10])
                    store = data[11]
                    npc = data[12]
                    dict_preset = data[13]
                    scenario = data[14]
                    scenario_text = data[15]
                    scenario_chapter = data[16]

                self.view_create_hero()
                self.add_to_tracker()
                self.music_changer_listview_category_update()
                self.add_to_del_char_box()
                self.box_choose_shop_update()
                self.box_generate_npc_update()
                self.comboBox_choose_chapter_update()
                self.update_list_tags()
            except FileNotFoundError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Последняя сессия не обнаружена')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("last_session. except")

        @logger.catch
        def open_generators(self):
            self.generators_window = MainWindow_too_many_generators()
            self.generators_window.show()

        @logger.catch
        def slide_menu(self, bool_val):
            if self.slide_menu_num == 0:
                self.animation1 = QtCore.QPropertyAnimation(self.frame_menu, b"maximumWidth")
                self.animation1.setDuration(500)
                self.animation1.setStartValue(41)
                self.animation1.setEndValue(150)
                self.animation1.setEasingCurve(QtCore.QEasingCurve.Type.InOutQuart)
                self.animation1.start()

                self.animation2 = QtCore.QPropertyAnimation(self.frame_menu, b"minimumWidth")
                self.animation2.setDuration(500)
                self.animation2.setStartValue(41)
                self.animation2.setEndValue(150)
                self.animation2.setEasingCurve(QtCore.QEasingCurve.Type.InOutQuart)
                self.animation2.start()

                self.slide_menu_num = 1
            else:
                self.animation1 = QtCore.QPropertyAnimation(self.frame_menu, b"maximumWidth")
                self.animation1.setDuration(500)
                self.animation1.setStartValue(150)
                self.animation1.setEndValue(41)
                self.animation1.setEasingCurve(QtCore.QEasingCurve.Type.InOutQuart)
                self.animation1.start()

                self.animation2 = QtCore.QPropertyAnimation(self.frame_menu, b"minimumWidth")
                self.animation2.setDuration(500)
                self.animation2.setStartValue(150)
                self.animation2.setEndValue(41)
                self.animation2.setEasingCurve(QtCore.QEasingCurve.Type.InOutQuart)
                self.animation2.start()

                self.slide_menu_num = 0

        @logger.catch
        def slide_menu_hide(self, event):
            if event.button() == Qt.MouseButton.LeftButton:
                if self.slide_menu_num == 1:
                    self.animation1 = QtCore.QPropertyAnimation(self.frame_menu, b"maximumWidth")
                    self.animation1.setDuration(500)
                    self.animation1.setStartValue(150)
                    self.animation1.setEndValue(41)
                    self.animation1.setEasingCurve(QtCore.QEasingCurve.Type.InOutQuart)
                    self.animation1.start()

                    self.animation2 = QtCore.QPropertyAnimation(self.frame_menu, b"minimumWidth")
                    self.animation2.setDuration(500)
                    self.animation2.setStartValue(150)
                    self.animation2.setEndValue(41)
                    self.animation2.setEasingCurve(QtCore.QEasingCurve.Type.InOutQuart)
                    self.animation2.start()

                    self.slide_menu_num = 0


        @logger.catch
        def show_tracker(self, bool_val=False):
            self.frame_tracker.show()
            self.frame_scenario.hide()
            self.frame_notes.hide()
            self.frame_music_changer.hide()
            self.frame_rules.hide()
            self.frame_generate_store.hide()
            self.frame_npc_generator.hide()
            self.info.hide()
            self.frame_viewer.hide()

        @logger.catch
        def show_scenario(self, bool_val=False):
            self.frame_tracker.hide()
            self.frame_scenario.show()
            self.frame_notes.hide()
            self.frame_music_changer.hide()
            self.frame_rules.hide()
            self.frame_generate_store.hide()
            self.frame_npc_generator.hide()
            self.info.hide()
            self.frame_viewer.hide()

        @logger.catch
        def show_notes(self, bool_val=False):
            self.frame_tracker.hide()
            self.frame_scenario.hide()
            self.frame_notes.show()
            self.frame_music_changer.hide()
            self.frame_rules.hide()
            self.frame_generate_store.hide()
            self.frame_npc_generator.hide()
            self.info.hide()
            self.frame_viewer.hide()

        @logger.catch
        def show_music_changer(self, bool_val=False):
            self.frame_tracker.hide()
            self.frame_scenario.hide()
            self.frame_notes.hide()
            self.frame_music_changer.show()
            self.frame_rules.hide()
            self.frame_generate_store.hide()
            self.frame_npc_generator.hide()
            self.info.hide()
            self.frame_viewer.hide()

        @logger.catch
        def show_rules(self, bool_val=False):
            self.frame_tracker.hide()
            self.frame_scenario.hide()
            self.frame_notes.hide()
            self.frame_music_changer.hide()
            self.frame_rules.show()
            self.frame_generate_store.hide()
            self.frame_npc_generator.hide()
            self.info.hide()
            self.frame_viewer.hide()

        @logger.catch
        def show_generate_store(self, bool_val=False):
            self.frame_tracker.hide()
            self.frame_scenario.hide()
            self.frame_notes.hide()
            self.frame_music_changer.hide()
            self.frame_rules.hide()
            self.frame_generate_store.show()
            self.frame_npc_generator.hide()
            self.info.hide()
            self.frame_viewer.hide()

        @logger.catch
        def show_npc_generator(self, bool_val=False):
            self.frame_tracker.hide()
            self.frame_scenario.hide()
            self.frame_notes.hide()
            self.frame_music_changer.hide()
            self.frame_rules.hide()
            self.frame_generate_store.hide()
            self.frame_npc_generator.show()
            self.info.hide()
            self.frame_viewer.hide()

        @logger.catch
        def open_info(self):
            self.frame_tracker.hide()
            self.frame_scenario.hide()
            self.frame_notes.hide()
            self.frame_music_changer.hide()
            self.frame_rules.hide()
            self.frame_generate_store.hide()
            self.frame_npc_generator.hide()
            self.info.show()
            self.frame_viewer.hide()

        @logger.catch
        def lock_window(self, bool_val=False):
            self.frame_tracker.hide()
            self.frame_scenario.hide()
            self.frame_notes.hide()
            self.frame_music_changer.hide()
            self.frame_rules.hide()
            self.frame_generate_store.hide()
            self.frame_npc_generator.hide()
            self.info.hide()
            self.frame_viewer.hide()

        @logger.catch
        def open_viewer(self, bool_val=False):
            self.frame_tracker.hide()
            self.frame_scenario.hide()
            self.frame_notes.hide()
            self.frame_music_changer.hide()
            self.frame_rules.hide()
            self.frame_generate_store.hide()
            self.frame_npc_generator.hide()
            self.info.hide()
            self.frame_viewer.show()

        '''
        Main window hide
        '''

        @logger.catch
        def input_chek(self, bool_val):
            '''
            DOCKSTRING: Проверка чисел
            '''
            try:
                hp_check = int(self.hp_edit.text())
                ac_check = int(self.ac_edit.text())
                initiative_check = int(self.initiative_edit.text())
                Spell_slot_chek_1 = int(self.spell_slot_edit.text())
                Spell_slot_chek_2 = int(self.spell_slot_edit_2.text())
                Spell_slot_chek_3 = int(self.spell_slot_edit_3.text())
                Spell_slot_chek_4 = int(self.spell_slot_edit_4.text())
                Spell_slot_chek_5 = int(self.spell_slot_edit_5.text())
                Spell_slot_chek_6 = int(self.spell_slot_edit_6.text())
                Spell_slot_chek_7 = int(self.spell_slot_edit_7.text())
                Spell_slot_chek_8 = int(self.spell_slot_edit_8.text())
                Spell_slot_chek_9 = int(self.spell_slot_edit_9.text())

                self.create_hero()
            except ValueError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Не корректный ввод!')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)
                error.setDetailedText('HP и инициатива и слоты заклинаний должны состоять только из цифр')

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("input_chek. except")

        @logger.catch
        def create_hero(self):
            '''
            DOCKSTRING: Создание персонажа в редакторе и добавление его в словарь
            '''
            self.iter = 0
            flag = True
            while flag is True:
                if 'character' + str(self.iter) in hero.keys():
                    self.iter += 1
                else:
                    flag = False
            if self.iter <= 3:
                hero.update({
                    'character' + str(self.iter): {
                        'name': self.name_edit.text(),
                        'hp': self.hp_edit.text(),
                        'ac': self.ac_edit.text(),
                        '1': self.spell_slot_edit.text(),
                        '2': self.spell_slot_edit_2.text(),
                        '3': self.spell_slot_edit_3.text(),
                        '4': self.spell_slot_edit_4.text(),
                        '5': self.spell_slot_edit_5.text(),
                        '6': self.spell_slot_edit_6.text(),
                        '7': self.spell_slot_edit_7.text(),
                        '8': self.spell_slot_edit_8.text(),
                        '9': self.spell_slot_edit_9.text(),
                        'initiative': self.initiative_edit.text()
                    }})
                hero_in_game.update({
                    'character' + str(self.iter): {
                        'name': self.name_edit.text(),
                        'hp': self.hp_edit.text(),
                        '1': self.spell_slot_edit.text(),
                        '2': self.spell_slot_edit_2.text(),
                        '3': self.spell_slot_edit_3.text(),
                        '4': self.spell_slot_edit_4.text(),
                        '5': self.spell_slot_edit_5.text(),
                        '6': self.spell_slot_edit_6.text(),
                        '7': self.spell_slot_edit_7.text(),
                        '8': self.spell_slot_edit_8.text(),
                        '9': self.spell_slot_edit_9.text(),
                }})
                self.add_to_del_char_box()
            else:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Нельзя выполнить действие')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)
                error.setInformativeText('На данный момент только 4 персонажа')
                error.setDetailedText('Слишком много людей!')

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info(f"create_hero. except")
            self.view_create_hero()
            self.add_to_tracker()

        @logger.catch
        def view_create_hero(self):
            '''
            DOCKSTRING: Отображение созданых персонажей в окне рядом с редактором
            '''
            value = ''
            for item in hero:
                value += f'Name: {hero[item]["name"]}\n' + \
                        f'Hp: {hero[item]["hp"]}/{hero_in_game[item]["hp"]}\n' + \
                         f'Ac: {hero[item]["ac"]}\n' + \
                         f'Initiative: {hero[item]["initiative"]}\n\n'
            self.label.setText(value)

        @logger.catch
        def hide_create(self, check_radiobutton):
            '''
            DOCKSTRING: круглая кнопка. Скрыть или показать редактор персонажа
            '''
            self.check_checkbox_init = self.checkBox_lock_init.isChecked()
            self.check_checkbox_ac = self.checkBox_lock_ac.isChecked()
            self.check_char_0 = self.checkBox_hide_spell_slot_char_0.isChecked()
            self.check_char_1 = self.checkBox_hide_spell_slot_char_1.isChecked()
            self.check_char_2 = self.checkBox_hide_spell_slot_char_2.isChecked()
            self.check_char_3 = self.checkBox_hide_spell_slot_char_3.isChecked()
            if check_radiobutton is True:
                self.pushButton_init_open.show()
                self.dice_edit.show()
                self.amount_dice_box.show()
                self.modifier_box.show()
                self.label_amount.show()
                self.label_dice.show()
                self.label_modifier.show()
                self.label_amount.show()
                self.label_roll_dice.show()
                self.check_advantage.show()
                self.pushButton_roll_dice.show()
                self.label_del_char.show()
                self.comboBox_del_char.show()
                self.pushButton_del_char.show()
                self.name_character0.show()
                self.name_character1.show()
                self.name_character2.show()
                self.name_character3.show()
                self.hp_character0.show()
                self.hp_character1.show()
                self.hp_character2.show()
                self.hp_character3.show()
                self.hp_edit_character0.show()
                self.hp_edit_character1.show()
                self.hp_edit_character2.show()
                self.hp_edit_character3.show()
                self.ac_character0.show()
                self.ac_character1.show()
                self.ac_character2.show()
                self.ac_character3.show()
                self.ac_edit_character0.show()
                self.ac_edit_character1.show()
                self.ac_edit_character2.show()
                self.ac_edit_character3.show()
                self.initiative_character0.show()
                self.initiative_character1.show()
                self.initiative_character2.show()
                self.initiative_character3.show()
                self.initiative_edit_character0.show()
                self.initiative_edit_character1.show()
                self.initiative_edit_character2.show()
                self.initiative_edit_character3.show()
                self.label_lock_init_char_0.hide()
                self.label_lock_init_char_1.hide()
                self.label_lock_init_char_2.hide()
                self.label_lock_init_char_3.hide()
                self.label_lock_ac_char_0.hide()
                self.label_lock_ac_char_1.hide()
                self.label_lock_ac_char_2.hide()
                self.label_lock_ac_char_3.hide()
                self.checkBox_hide_spell_slot_char_0.show()
                self.checkBox_hide_spell_slot_char_1.show()
                self.checkBox_hide_spell_slot_char_2.show()
                self.checkBox_hide_spell_slot_char_3.show()
                self.spell_slot_label_traker_char0.show()
                self.spell_slot_label_traker_char1.show()
                self.spell_slot_label_traker_char2.show()
                self.spell_slot_label_traker_char3.show()
                if self.check_char_0 is False:
                    self.spin_spell_slot_character0.show()
                    self.spin_spell_slot_character0_2.show()
                    self.spin_spell_slot_character0_3.show()
                    self.spin_spell_slot_character0_4.show()
                    self.spin_spell_slot_character0_5.show()
                    self.spin_spell_slot_character0_6.show()
                    self.spin_spell_slot_character0_7.show()
                    self.spin_spell_slot_character0_8.show()
                    self.spin_spell_slot_character0_9.show()

                    self.label_spell_slot_character0.show()
                    self.label_spell_slot_character0_2.show()
                    self.label_spell_slot_character0_3.show()
                    self.label_spell_slot_character0_4.show()
                    self.label_spell_slot_character0_5.show()
                    self.label_spell_slot_character0_6.show()
                    self.label_spell_slot_character0_7.show()
                    self.label_spell_slot_character0_8.show()
                    self.label_spell_slot_character0_9.show()

                    self.pushButton_restore_spell_slots_0.show()
                    self.pushButton_set_spell_slots_0.show()
                else:
                    pass
                if self.check_char_1 is False:
                    self.spin_spell_slot_character1.show()
                    self.spin_spell_slot_character1_2.show()
                    self.spin_spell_slot_character1_3.show()
                    self.spin_spell_slot_character1_4.show()
                    self.spin_spell_slot_character1_5.show()
                    self.spin_spell_slot_character1_6.show()
                    self.spin_spell_slot_character1_7.show()
                    self.spin_spell_slot_character1_8.show()
                    self.spin_spell_slot_character1_9.show()

                    self.label_spell_slot_character0_10.show()
                    self.label_spell_slot_character0_11.show()
                    self.label_spell_slot_character0_12.show()
                    self.label_spell_slot_character0_13.show()
                    self.label_spell_slot_character0_14.show()
                    self.label_spell_slot_character0_15.show()
                    self.label_spell_slot_character0_16.show()
                    self.label_spell_slot_character0_17.show()
                    self.label_spell_slot_character0_18.show()

                    self.pushButton_restore_spell_slots_1.show()
                    self.pushButton_set_spell_slots_1.show()
                else:
                    pass
                if self.check_char_2 is False:
                    self.spin_spell_slot_character2.show()
                    self.spin_spell_slot_character2_2.show()
                    self.spin_spell_slot_character2_3.show()
                    self.spin_spell_slot_character2_4.show()
                    self.spin_spell_slot_character2_5.show()
                    self.spin_spell_slot_character2_6.show()
                    self.spin_spell_slot_character2_7.show()
                    self.spin_spell_slot_character2_8.show()
                    self.spin_spell_slot_character2_9.show()

                    self.label_spell_slot_character0_19.show()
                    self.label_spell_slot_character0_20.show()
                    self.label_spell_slot_character0_21.show()
                    self.label_spell_slot_character0_22.show()
                    self.label_spell_slot_character0_23.show()
                    self.label_spell_slot_character0_24.show()
                    self.label_spell_slot_character0_25.show()
                    self.label_spell_slot_character0_26.show()
                    self.label_spell_slot_character0_27.show()

                    self.pushButton_restore_spell_slots_2.show()
                    self.pushButton_set_spell_slots_2.show()
                else:
                    pass
                if self.check_char_3 is False:
                    self.spin_spell_slot_character3.show()
                    self.spin_spell_slot_character3_2.show()
                    self.spin_spell_slot_character3_3.show()
                    self.spin_spell_slot_character3_4.show()
                    self.spin_spell_slot_character3_5.show()
                    self.spin_spell_slot_character3_6.show()
                    self.spin_spell_slot_character3_7.show()
                    self.spin_spell_slot_character3_8.show()
                    self.spin_spell_slot_character3_9.show()


                    self.label_spell_slot_character0_28.show()
                    self.label_spell_slot_character0_29.show()
                    self.label_spell_slot_character0_30.show()
                    self.label_spell_slot_character0_31.show()
                    self.label_spell_slot_character0_32.show()
                    self.label_spell_slot_character0_33.show()
                    self.label_spell_slot_character0_34.show()
                    self.label_spell_slot_character0_35.show()
                    self.label_spell_slot_character0_36.show()

                    self.pushButton_restore_spell_slots_3.show()
                    self.pushButton_set_spell_slots_3.show()
                else:
                    pass
                self.label_lock_init_char_0.show()
                self.label_lock_init_char_1.show()
                self.label_lock_init_char_2.show()
                self.label_lock_init_char_3.show()
                self.label_lock_ac_char_0.show()
                self.label_lock_ac_char_1.show()
                self.label_lock_ac_char_2.show()
                self.label_lock_ac_char_3.show()
                self.textEdit_char_0.show()
                self.textEdit_char_1.show()
                self.textEdit_char_2.show()
                self.textEdit_char_3.show()

                self.checkBox_lock_init.show()
                self.checkBox_lock_ac.show()

                if self.check_checkbox_init is False:
                    self.label_lock_init_char_0.hide()
                    self.label_lock_init_char_1.hide()
                    self.label_lock_init_char_2.hide()
                    self.label_lock_init_char_3.hide()
                else:
                    self.initiative_edit_character0.hide()
                    self.initiative_edit_character1.hide()
                    self.initiative_edit_character2.hide()
                    self.initiative_edit_character3.hide()

                if self.check_checkbox_ac is False:
                    self.label_lock_ac_char_0.hide()
                    self.label_lock_ac_char_1.hide()
                    self.label_lock_ac_char_2.hide()
                    self.label_lock_ac_char_3.hide()
                else:
                    self.ac_edit_character0.hide()
                    self.ac_edit_character1.hide()
                    self.ac_edit_character2.hide()
                    self.ac_edit_character3.hide()



                self.name.hide()
                self.name_edit.hide()
                self.hp.hide()
                self.hp_edit.hide()
                self.ac.hide()
                self.ac_edit.hide()
                self.initiative.hide()
                self.initiative_edit.hide()
                self.pushButton.hide()
                self.label.hide()
                self.spell_slot.hide()
                self.label_spell_slot.hide()
                self.label_spell_slot_2.hide()
                self.label_spell_slot_3.hide()
                self.label_spell_slot_4.hide()
                self.label_spell_slot_5.hide()
                self.label_spell_slot_6.hide()
                self.label_spell_slot_7.hide()
                self.label_spell_slot_8.hide()
                self.label_spell_slot_9.hide()
                self.spell_slot_edit.hide()
                self.spell_slot_edit_2.hide()
                self.spell_slot_edit_3.hide()
                self.spell_slot_edit_4.hide()
                self.spell_slot_edit_5.hide()
                self.spell_slot_edit_6.hide()
                self.spell_slot_edit_7.hide()
                self.spell_slot_edit_8.hide()
                self.spell_slot_edit_9.hide()

            else:
                self.pushButton_init_open.hide()
                self.dice_edit.hide()
                self.amount_dice_box.hide()
                self.modifier_box.hide()
                self.label_amount.hide()
                self.label_dice.hide()
                self.label_modifier.hide()
                self.label_roll_dice.hide()
                self.label_amount.hide()
                self.label_roll_dice.hide()
                self.check_advantage.hide()
                self.pushButton_roll_dice.hide()
                self.label_del_char.hide()
                self.comboBox_del_char.hide()
                self.pushButton_del_char.hide()
                self.name_character0.hide()
                self.name_character1.hide()
                self.name_character2.hide()
                self.name_character3.hide()
                self.hp_character0.hide()
                self.hp_character1.hide()
                self.hp_character2.hide()
                self.hp_character3.hide()
                self.hp_edit_character0.hide()
                self.hp_edit_character1.hide()
                self.hp_edit_character2.hide()
                self.hp_edit_character3.hide()
                self.ac_character0.hide()
                self.ac_character1.hide()
                self.ac_character2.hide()
                self.ac_character3.hide()
                self.ac_edit_character0.hide()
                self.ac_edit_character1.hide()
                self.ac_edit_character2.hide()
                self.ac_edit_character3.hide()
                self.initiative_character0.hide()
                self.initiative_character1.hide()
                self.initiative_character2.hide()
                self.initiative_character3.hide()
                self.initiative_edit_character0.hide()
                self.initiative_edit_character1.hide()
                self.initiative_edit_character2.hide()
                self.initiative_edit_character3.hide()

                self.label_lock_init_char_0.show()
                self.label_lock_init_char_1.show()
                self.label_lock_init_char_2.show()
                self.label_lock_init_char_3.show()
                self.label_lock_ac_char_0.show()
                self.label_lock_ac_char_1.show()
                self.label_lock_ac_char_2.show()
                self.label_lock_ac_char_3.show()

                self.checkBox_hide_spell_slot_char_0.hide()
                self.checkBox_hide_spell_slot_char_1.hide()
                self.checkBox_hide_spell_slot_char_2.hide()
                self.checkBox_hide_spell_slot_char_3.hide()
                self.label_spell_slot_character0.hide()
                self.label_spell_slot_character0_2.hide()
                self.label_spell_slot_character0_3.hide()
                self.label_spell_slot_character0_4.hide()
                self.label_spell_slot_character0_5.hide()
                self.label_spell_slot_character0_6.hide()
                self.label_spell_slot_character0_7.hide()
                self.label_spell_slot_character0_8.hide()
                self.label_spell_slot_character0_9.hide()
                self.spell_slot_label_traker_char0.hide()
                self.label_spell_slot_character0_10.hide()
                self.spell_slot_label_traker_char1.hide()
                self.label_spell_slot_character0_11.hide()
                self.label_spell_slot_character0_12.hide()
                self.label_spell_slot_character0_13.hide()
                self.label_spell_slot_character0_14.hide()
                self.label_spell_slot_character0_15.hide()
                self.label_spell_slot_character0_16.hide()
                self.label_spell_slot_character0_17.hide()
                self.label_spell_slot_character0_18.hide()
                self.label_spell_slot_character0_19.hide()
                self.label_spell_slot_character0_20.hide()
                self.label_spell_slot_character0_21.hide()
                self.spell_slot_label_traker_char2.hide()
                self.label_spell_slot_character0_22.hide()
                self.label_spell_slot_character0_23.hide()
                self.label_spell_slot_character0_24.hide()
                self.label_spell_slot_character0_25.hide()
                self.label_spell_slot_character0_26.hide()
                self.label_spell_slot_character0_27.hide()
                self.label_spell_slot_character0_28.hide()
                self.label_spell_slot_character0_29.hide()
                self.label_spell_slot_character0_30.hide()
                self.spell_slot_label_traker_char3.hide()
                self.label_spell_slot_character0_31.hide()
                self.label_spell_slot_character0_32.hide()
                self.label_spell_slot_character0_33.hide()
                self.label_spell_slot_character0_34.hide()
                self.label_spell_slot_character0_35.hide()
                self.label_spell_slot_character0_36.hide()
                self.spin_spell_slot_character0.hide()
                self.spin_spell_slot_character0_2.hide()
                self.spin_spell_slot_character0_3.hide()
                self.spin_spell_slot_character0_4.hide()
                self.spin_spell_slot_character0_5.hide()
                self.spin_spell_slot_character0_6.hide()
                self.spin_spell_slot_character0_7.hide()
                self.spin_spell_slot_character0_8.hide()
                self.spin_spell_slot_character0_9.hide()
                self.spin_spell_slot_character1.hide()
                self.spin_spell_slot_character1_2.hide()
                self.spin_spell_slot_character1_3.hide()
                self.spin_spell_slot_character1_4.hide()
                self.spin_spell_slot_character1_5.hide()
                self.spin_spell_slot_character1_6.hide()
                self.spin_spell_slot_character1_7.hide()
                self.spin_spell_slot_character1_8.hide()
                self.spin_spell_slot_character1_9.hide()
                self.spin_spell_slot_character2.hide()
                self.spin_spell_slot_character2_2.hide()
                self.spin_spell_slot_character2_3.hide()
                self.spin_spell_slot_character2_4.hide()
                self.spin_spell_slot_character2_5.hide()
                self.spin_spell_slot_character2_6.hide()
                self.spin_spell_slot_character2_7.hide()
                self.spin_spell_slot_character2_8.hide()
                self.spin_spell_slot_character2_9.hide()
                self.spin_spell_slot_character3.hide()
                self.spin_spell_slot_character3_2.hide()
                self.spin_spell_slot_character3_3.hide()
                self.spin_spell_slot_character3_4.hide()
                self.spin_spell_slot_character3_5.hide()
                self.spin_spell_slot_character3_6.hide()
                self.spin_spell_slot_character3_7.hide()
                self.spin_spell_slot_character3_8.hide()
                self.spin_spell_slot_character3_9.hide()
                self.pushButton_restore_spell_slots_0.hide()
                self.pushButton_restore_spell_slots_1.hide()
                self.pushButton_restore_spell_slots_2.hide()
                self.pushButton_restore_spell_slots_3.hide()
                self.pushButton_set_spell_slots_0.hide()
                self.pushButton_set_spell_slots_1.hide()
                self.pushButton_set_spell_slots_2.hide()
                self.pushButton_set_spell_slots_3.hide()
                self.label_lock_init_char_0.hide()
                self.label_lock_init_char_1.hide()
                self.label_lock_init_char_2.hide()
                self.label_lock_init_char_3.hide()
                self.label_lock_ac_char_0.hide()
                self.label_lock_ac_char_1.hide()
                self.label_lock_ac_char_2.hide()
                self.label_lock_ac_char_3.hide()
                self.textEdit_char_0.hide()
                self.textEdit_char_1.hide()
                self.textEdit_char_2.hide()
                self.textEdit_char_3.hide()

                self.checkBox_lock_init.hide()
                self.checkBox_lock_ac.hide()


                self.name.show()
                self.name_edit.show()
                self.hp.show()
                self.hp_edit.show()
                self.ac.show()
                self.ac_edit.show()
                self.initiative.show()
                self.initiative_edit.show()
                self.pushButton.show()
                self.label.show()
                self.spell_slot.show()
                self.label_spell_slot.show()
                self.label_spell_slot_2.show()
                self.label_spell_slot_3.show()
                self.label_spell_slot_4.show()
                self.label_spell_slot_5.show()
                self.label_spell_slot_6.show()
                self.label_spell_slot_7.show()
                self.label_spell_slot_8.show()
                self.label_spell_slot_9.show()
                self.spell_slot_edit.show()
                self.spell_slot_edit_2.show()
                self.spell_slot_edit_3.show()
                self.spell_slot_edit_4.show()
                self.spell_slot_edit_5.show()
                self.spell_slot_edit_6.show()
                self.spell_slot_edit_7.show()
                self.spell_slot_edit_8.show()
                self.spell_slot_edit_9.show()

        '''
        Main window show
        '''

        @logger.catch
        def open_initiative(self, bool_val=False):
            self.initiative_window.show()
            self.app_func_initiative_window()


        @logger.catch
        def app_func_initiative_window(self):
            #chekClose
            self.initiative_window.windowClose.connect(self.set_stat_after_fight)
            #Label
            if "character0" in hero.keys():
                self.initiative_window.label_set_player_dice_char_0.setText(hero["character0"]["name"])
            if "character1" in hero.keys():
                self.initiative_window.label_set_player_dice_char_1.setText(hero["character1"]["name"])
            if "character2" in hero.keys():
                self.initiative_window.label_set_player_dice_char_2.setText(hero["character2"]["name"])
            if "character3" in hero.keys():
                self.initiative_window.label_set_player_dice_char_3.setText(hero["character3"]["name"])

        @logger.catch
        def set_stat_after_fight(self):
            global hero
            for i in hero_in_game.keys():
                for item in self.initiative_window.initiative_list:
                    if item[1] == hero_in_game[i]["name"]:
                        hero_in_game[i]["hp"] = item[2]
            self.save_dict_preset()
            self.add_to_tracker()

        def save_dict_preset(self):
            global dict_preset
            dict_preset = self.initiative_window.enemy_dict_preset


        @logger.catch
        def roll_dice(self, bool_val):
            '''
            DOCKSTRING: рандом кубика(числа) и вывод в окно
            '''
            check_advantage = self.check_advantage.isChecked()
            try:
                dice = int(self.dice_edit.text())
                amount = int(self.amount_dice_box.text())
                modifier = int(self.modifier_box.text())
                value = 0
                for roll in range(amount):
                    value += random.randint(1, dice) + modifier
                if check_advantage is False:
                    self.label_roll_dice.setText(str(value))
                else:
                    value_advantege = 0
                    for roll in range(amount):
                        value_advantege += random.randint(1, dice) + modifier
                    self.label_roll_dice.setText(str(value) + ' ' + str(value_advantege))

            except ValueError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Не корректный ввод данных')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("roll_dice. except")

        @logger.catch
        def add_to_del_char_box(self):
            self.comboBox_del_char.clear()
            for i in hero:
                self.comboBox_del_char.addItem(hero[i]['name'])

        @logger.catch
        def del_char(self, bool_val):
            try:
                for i in list(hero.keys()):
                    if self.comboBox_del_char.currentText() == hero[i]['name']:
                        hero.pop(str(i))
                for i in list(hero_in_game.keys()):
                    if self.comboBox_del_char.currentText() == hero_in_game[i]['name']:
                        hero_in_game.pop(str(i))

                self.comboBox_del_char.removeItem(self.comboBox_del_char.currentIndex())
                self.add_to_tracker()

            except KeyError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Поле пустое, либо этого персонажа уже нет!')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info(f"del_char. except")

        @logger.catch
        def lock_initiative(self, val_init):
            '''
            DOCKSTRING: Вывод вместо lineEdit, Label со значением initiative
            '''
            if val_init:
                if len(hero) != 0:
                    if 'character0' in hero.keys():
                        self.label_lock_init_char_0.show()
                        self.initiative_edit_character0.hide()
                        self.label_lock_init_char_0.setText(str(hero["character0"]['initiative']))

                    if 'character1' in hero.keys():
                        self.label_lock_init_char_1.show()
                        self.initiative_edit_character1.hide()
                        self.label_lock_init_char_1.setText(str(hero["character1"]['initiative']))

                    if 'character2' in hero.keys():
                        self.label_lock_init_char_2.show()
                        self.initiative_edit_character2.hide()
                        self.label_lock_init_char_2.setText(str(hero["character2"]['initiative']))

                    if 'character3' in hero.keys():
                        self.label_lock_init_char_3.show()
                        self.initiative_edit_character3.hide()
                        self.label_lock_init_char_3.setText(str(hero["character3"]['initiative']))
            else:
                self.label_lock_init_char_0.hide()
                self.label_lock_init_char_1.hide()
                self.label_lock_init_char_2.hide()
                self.label_lock_init_char_3.hide()

                self.initiative_edit_character0.show()
                self.initiative_edit_character1.show()
                self.initiative_edit_character2.show()
                self.initiative_edit_character3.show()

        @logger.catch
        def lock_ac(self, val_ac):
            '''
            DOCKSTRING: Вывод вместо lineEdit, Label со значением ac
            '''
            if val_ac:
                if len(hero) != 0:
                    if 'character0' in hero.keys():
                        self.label_lock_ac_char_0.show()
                        self.ac_edit_character0.hide()
                        self.label_lock_ac_char_0.setText(str(hero["character0"]['ac']))

                    if 'character1' in hero.keys():
                        self.label_lock_ac_char_1.show()
                        self.ac_edit_character1.hide()
                        self.label_lock_ac_char_1.setText(str(hero["character1"]['ac']))

                    if 'character2' in hero.keys():
                        self.label_lock_ac_char_2.show()
                        self.ac_edit_character2.hide()
                        self.label_lock_ac_char_2.setText(str(hero["character2"]['ac']))

                    if 'character3' in hero.keys():
                        self.label_lock_ac_char_3.show()
                        self.ac_edit_character3.hide()
                        self.label_lock_ac_char_3.setText(str(hero["character3"]['ac']))
            else:
                self.label_lock_ac_char_0.hide()
                self.label_lock_ac_char_1.hide()
                self.label_lock_ac_char_2.hide()
                self.label_lock_ac_char_3.hide()

                self.ac_edit_character0.show()
                self.ac_edit_character1.show()
                self.ac_edit_character2.show()
                self.ac_edit_character3.show()

        @logger.catch
        def hide_spell_slot_char_0(self, check_hide_slot_char_0):
            if check_hide_slot_char_0:
                self.label_spell_slot_character0.hide()
                self.label_spell_slot_character0_2.hide()
                self.label_spell_slot_character0_3.hide()
                self.label_spell_slot_character0_4.hide()
                self.label_spell_slot_character0_5.hide()
                self.label_spell_slot_character0_6.hide()
                self.label_spell_slot_character0_7.hide()
                self.label_spell_slot_character0_8.hide()
                self.label_spell_slot_character0_9.hide()
                self.spin_spell_slot_character0.hide()
                self.spin_spell_slot_character0_2.hide()
                self.spin_spell_slot_character0_3.hide()
                self.spin_spell_slot_character0_4.hide()
                self.spin_spell_slot_character0_5.hide()
                self.spin_spell_slot_character0_6.hide()
                self.spin_spell_slot_character0_7.hide()
                self.spin_spell_slot_character0_8.hide()
                self.spin_spell_slot_character0_9.hide()

                self.pushButton_restore_spell_slots_0.hide()
                self.pushButton_set_spell_slots_0.hide()

                self.initiative_character0.setGeometry(QtCore.QRect(20, 130, 61, 25))
                self.initiative_edit_character0.setGeometry(QtCore.QRect(90, 130, 51, 25))
                self.label_lock_init_char_0.setGeometry(QtCore.QRect(90, 130, 51, 25))
                self.textEdit_char_0.setGeometry(QtCore.QRect(20, 160, 120, 210))
            else:
                self.label_spell_slot_character0.show()
                self.label_spell_slot_character0_2.show()
                self.label_spell_slot_character0_3.show()
                self.label_spell_slot_character0_4.show()
                self.label_spell_slot_character0_5.show()
                self.label_spell_slot_character0_6.show()
                self.label_spell_slot_character0_7.show()
                self.label_spell_slot_character0_8.show()
                self.label_spell_slot_character0_9.show()
                self.spin_spell_slot_character0.show()
                self.spin_spell_slot_character0_2.show()
                self.spin_spell_slot_character0_3.show()
                self.spin_spell_slot_character0_4.show()
                self.spin_spell_slot_character0_5.show()
                self.spin_spell_slot_character0_6.show()
                self.spin_spell_slot_character0_7.show()
                self.spin_spell_slot_character0_8.show()
                self.spin_spell_slot_character0_9.show()

                self.pushButton_restore_spell_slots_0.show()
                self.pushButton_set_spell_slots_0.show()

                self.initiative_character0.setGeometry(QtCore.QRect(20, 280, 61, 25))
                self.initiative_edit_character0.setGeometry(QtCore.QRect(90, 280, 51, 25))
                self.label_lock_init_char_0.setGeometry(QtCore.QRect(90, 280, 51, 25))
                self.textEdit_char_0.setGeometry(QtCore.QRect(20, 310, 120, 70))

        @logger.catch
        def hide_spell_slot_char_1(self, check_hide_slot_char_1):
            if check_hide_slot_char_1:
                self.label_spell_slot_character0_10.hide()
                self.label_spell_slot_character0_11.hide()
                self.label_spell_slot_character0_12.hide()
                self.label_spell_slot_character0_13.hide()
                self.label_spell_slot_character0_14.hide()
                self.label_spell_slot_character0_15.hide()
                self.label_spell_slot_character0_16.hide()
                self.label_spell_slot_character0_17.hide()
                self.label_spell_slot_character0_18.hide()
                self.spin_spell_slot_character1.hide()
                self.spin_spell_slot_character1_2.hide()
                self.spin_spell_slot_character1_3.hide()
                self.spin_spell_slot_character1_4.hide()
                self.spin_spell_slot_character1_5.hide()
                self.spin_spell_slot_character1_6.hide()
                self.spin_spell_slot_character1_7.hide()
                self.spin_spell_slot_character1_8.hide()
                self.spin_spell_slot_character1_9.hide()

                self.pushButton_restore_spell_slots_1.hide()
                self.pushButton_set_spell_slots_1.hide()

                self.initiative_character1.setGeometry(QtCore.QRect(20, 130, 61, 25))
                self.initiative_edit_character1.setGeometry(QtCore.QRect(90, 130, 51, 25))
                self.label_lock_init_char_1.setGeometry(QtCore.QRect(90, 130, 51, 25))
                self.textEdit_char_1.setGeometry(QtCore.QRect(20, 160, 120, 210))
            else:
                self.label_spell_slot_character0_10.show()
                self.label_spell_slot_character0_11.show()
                self.label_spell_slot_character0_12.show()
                self.label_spell_slot_character0_13.show()
                self.label_spell_slot_character0_14.show()
                self.label_spell_slot_character0_15.show()
                self.label_spell_slot_character0_16.show()
                self.label_spell_slot_character0_17.show()
                self.label_spell_slot_character0_18.show()
                self.spin_spell_slot_character1.show()
                self.spin_spell_slot_character1_2.show()
                self.spin_spell_slot_character1_3.show()
                self.spin_spell_slot_character1_4.show()
                self.spin_spell_slot_character1_5.show()
                self.spin_spell_slot_character1_6.show()
                self.spin_spell_slot_character1_7.show()
                self.spin_spell_slot_character1_8.show()
                self.spin_spell_slot_character1_9.show()

                self.pushButton_restore_spell_slots_1.show()
                self.pushButton_set_spell_slots_1.show()

                self.initiative_character1.setGeometry(QtCore.QRect(20, 280, 61, 25))
                self.initiative_edit_character1.setGeometry(QtCore.QRect(90, 280, 51, 25))
                self.label_lock_init_char_1.setGeometry(QtCore.QRect(90, 280, 51, 25))
                self.textEdit_char_1.setGeometry(QtCore.QRect(20, 310, 120, 70))

        @logger.catch
        def hide_spell_slot_char_2(self, check_hide_slot_char_2):
            if check_hide_slot_char_2:
                self.label_spell_slot_character0_19.hide()
                self.label_spell_slot_character0_20.hide()
                self.label_spell_slot_character0_21.hide()
                self.label_spell_slot_character0_22.hide()
                self.label_spell_slot_character0_23.hide()
                self.label_spell_slot_character0_24.hide()
                self.label_spell_slot_character0_25.hide()
                self.label_spell_slot_character0_26.hide()
                self.label_spell_slot_character0_27.hide()
                self.spin_spell_slot_character2.hide()
                self.spin_spell_slot_character2_2.hide()
                self.spin_spell_slot_character2_3.hide()
                self.spin_spell_slot_character2_4.hide()
                self.spin_spell_slot_character2_5.hide()
                self.spin_spell_slot_character2_6.hide()
                self.spin_spell_slot_character2_7.hide()
                self.spin_spell_slot_character2_8.hide()
                self.spin_spell_slot_character2_9.hide()

                self.pushButton_restore_spell_slots_2.hide()
                self.pushButton_set_spell_slots_2.hide()

                self.initiative_character2.setGeometry(QtCore.QRect(20, 130, 61, 25))
                self.initiative_edit_character2.setGeometry(QtCore.QRect(90, 130, 51, 25))
                self.label_lock_init_char_2.setGeometry(QtCore.QRect(90, 130, 51, 25))
                self.textEdit_char_2.setGeometry(QtCore.QRect(20, 160, 120, 210))
            else:
                self.label_spell_slot_character0_19.show()
                self.label_spell_slot_character0_20.show()
                self.label_spell_slot_character0_21.show()
                self.label_spell_slot_character0_22.show()
                self.label_spell_slot_character0_23.show()
                self.label_spell_slot_character0_24.show()
                self.label_spell_slot_character0_25.show()
                self.label_spell_slot_character0_26.show()
                self.label_spell_slot_character0_27.show()
                self.spin_spell_slot_character2.show()
                self.spin_spell_slot_character2_2.show()
                self.spin_spell_slot_character2_3.show()
                self.spin_spell_slot_character2_4.show()
                self.spin_spell_slot_character2_5.show()
                self.spin_spell_slot_character2_6.show()
                self.spin_spell_slot_character2_7.show()
                self.spin_spell_slot_character2_8.show()
                self.spin_spell_slot_character2_9.show()

                self.pushButton_restore_spell_slots_2.show()
                self.pushButton_set_spell_slots_2.show()

                self.initiative_character2.setGeometry(QtCore.QRect(20, 280, 61, 25))
                self.initiative_edit_character2.setGeometry(QtCore.QRect(90, 280, 51, 25))
                self.label_lock_init_char_2.setGeometry(QtCore.QRect(90, 280, 51, 25))
                self.textEdit_char_2.setGeometry(QtCore.QRect(20, 310, 120, 70))

        @logger.catch
        def hide_spell_slot_char_3(self, check_hide_slot_char_3):
            if check_hide_slot_char_3:
                self.label_spell_slot_character0_28.hide()
                self.label_spell_slot_character0_29.hide()
                self.label_spell_slot_character0_30.hide()
                self.label_spell_slot_character0_31.hide()
                self.label_spell_slot_character0_32.hide()
                self.label_spell_slot_character0_33.hide()
                self.label_spell_slot_character0_34.hide()
                self.label_spell_slot_character0_35.hide()
                self.label_spell_slot_character0_36.hide()
                self.spin_spell_slot_character3.hide()
                self.spin_spell_slot_character3_2.hide()
                self.spin_spell_slot_character3_3.hide()
                self.spin_spell_slot_character3_4.hide()
                self.spin_spell_slot_character3_5.hide()
                self.spin_spell_slot_character3_6.hide()
                self.spin_spell_slot_character3_7.hide()
                self.spin_spell_slot_character3_8.hide()
                self.spin_spell_slot_character3_9.hide()

                self.pushButton_restore_spell_slots_3.hide()
                self.pushButton_set_spell_slots_3.hide()

                self.initiative_character3.setGeometry(QtCore.QRect(20, 130, 61, 25))
                self.initiative_edit_character3.setGeometry(QtCore.QRect(90, 130, 51, 25))
                self.label_lock_init_char_3.setGeometry(QtCore.QRect(90, 130, 51, 25))
                self.textEdit_char_3.setGeometry(QtCore.QRect(20, 160, 120, 210))
            else:
                self.label_spell_slot_character0_28.show()
                self.label_spell_slot_character0_29.show()
                self.label_spell_slot_character0_30.show()
                self.label_spell_slot_character0_31.show()
                self.label_spell_slot_character0_32.show()
                self.label_spell_slot_character0_33.show()
                self.label_spell_slot_character0_34.show()
                self.label_spell_slot_character0_35.show()
                self.label_spell_slot_character0_36.show()
                self.spin_spell_slot_character3.show()
                self.spin_spell_slot_character3_2.show()
                self.spin_spell_slot_character3_3.show()
                self.spin_spell_slot_character3_4.show()
                self.spin_spell_slot_character3_5.show()
                self.spin_spell_slot_character3_6.show()
                self.spin_spell_slot_character3_7.show()
                self.spin_spell_slot_character3_8.show()
                self.spin_spell_slot_character3_9.show()

                self.pushButton_restore_spell_slots_3.show()
                self.pushButton_set_spell_slots_3.show()

                self.initiative_character3.setGeometry(QtCore.QRect(20, 280, 61, 25))
                self.initiative_edit_character3.setGeometry(QtCore.QRect(90, 280, 51, 25))
                self.label_lock_init_char_3.setGeometry(QtCore.QRect(90, 280, 51, 25))
                self.textEdit_char_3.setGeometry(QtCore.QRect(20, 310, 120, 70))

        @logger.catch
        def add_to_tracker(self):
            '''
            DOCKSTRING: добавление созданых персонажей в трекер и отключение полей несуществующий персонажей
            '''
            self.initiative_edit_character0.setText('')
            self.initiative_edit_character1.setText('')
            self.initiative_edit_character2.setText('')
            self.initiative_edit_character3.setText('')
            self.hp_edit_character0.setText('')
            self.hp_edit_character1.setText('')
            self.hp_edit_character2.setText('')
            self.hp_edit_character3.setText('')
            self.ac_edit_character0.setText('')
            self.ac_edit_character1.setText('')
            self.ac_edit_character2.setText('')
            self.ac_edit_character3.setText('')
            self.name_character0.setText('')
            self.name_character1.setText('')
            self.name_character2.setText('')
            self.name_character3.setText('')
            self.spin_spell_slot_character0.setValue(0)
            self.spin_spell_slot_character0_2.setValue(0)
            self.spin_spell_slot_character0_3.setValue(0)
            self.spin_spell_slot_character0_4.setValue(0)
            self.spin_spell_slot_character0_5.setValue(0)
            self.spin_spell_slot_character0_6.setValue(0)
            self.spin_spell_slot_character0_7.setValue(0)
            self.spin_spell_slot_character0_8.setValue(0)
            self.spin_spell_slot_character0_9.setValue(0)
            self.spin_spell_slot_character1.setValue(0)
            self.spin_spell_slot_character1_2.setValue(0)
            self.spin_spell_slot_character1_3.setValue(0)
            self.spin_spell_slot_character1_4.setValue(0)
            self.spin_spell_slot_character1_5.setValue(0)
            self.spin_spell_slot_character1_6.setValue(0)
            self.spin_spell_slot_character1_7.setValue(0)
            self.spin_spell_slot_character1_8.setValue(0)
            self.spin_spell_slot_character1_9.setValue(0)
            self.spin_spell_slot_character2.setValue(0)
            self.spin_spell_slot_character2_2.setValue(0)
            self.spin_spell_slot_character2_3.setValue(0)
            self.spin_spell_slot_character2_4.setValue(0)
            self.spin_spell_slot_character2_5.setValue(0)
            self.spin_spell_slot_character2_6.setValue(0)
            self.spin_spell_slot_character2_7.setValue(0)
            self.spin_spell_slot_character2_8.setValue(0)
            self.spin_spell_slot_character2_9.setValue(0)
            self.spin_spell_slot_character3.setValue(0)
            self.spin_spell_slot_character3_2.setValue(0)
            self.spin_spell_slot_character3_3.setValue(0)
            self.spin_spell_slot_character3_4.setValue(0)
            self.spin_spell_slot_character3_5.setValue(0)
            self.spin_spell_slot_character3_6.setValue(0)
            self.spin_spell_slot_character3_7.setValue(0)
            self.spin_spell_slot_character3_8.setValue(0)
            self.spin_spell_slot_character3_9.setValue(0)
            if 'character0' in hero.keys():
                self.name_character0.setDisabled(False)
                self.hp_edit_character0.setDisabled(False)
                self.ac_edit_character0.setDisabled(False)
                self.initiative_edit_character0.setDisabled(False)
                self.checkBox_hide_spell_slot_char_0.setDisabled(False)
                self.spin_spell_slot_character0.setDisabled(False)
                self.spin_spell_slot_character0.setDisabled(False)
                self.spin_spell_slot_character0_2.setDisabled(False)
                self.spin_spell_slot_character0_3.setDisabled(False)
                self.spin_spell_slot_character0_4.setDisabled(False)
                self.spin_spell_slot_character0_5.setDisabled(False)
                self.spin_spell_slot_character0_6.setDisabled(False)
                self.spin_spell_slot_character0_7.setDisabled(False)
                self.spin_spell_slot_character0_8.setDisabled(False)
                self.spin_spell_slot_character0_9.setDisabled(False)
                self.pushButton_restore_spell_slots_0.setDisabled(False)
                self.pushButton_set_spell_slots_0.setDisabled(False)
                self.textEdit_char_0.setDisabled(False)

                self.name_character0.setText(str(hero['character0']['name']))
                self.hp_edit_character0.setText(f"{str(hero_in_game['character0']['hp'])}/{str(hero['character0']['hp'])}")
                self.ac_edit_character0.setText(str(hero['character0']['ac']))
                self.initiative_edit_character0.setText(str(hero['character0']['initiative']))
                self.spin_spell_slot_character0.setValue(int(hero_in_game['character0']['1']))
                self.spin_spell_slot_character0_2.setValue(int(hero_in_game['character0']['2']))
                self.spin_spell_slot_character0_3.setValue(int(hero_in_game['character0']['3']))
                self.spin_spell_slot_character0_4.setValue(int(hero_in_game['character0']['4']))
                self.spin_spell_slot_character0_5.setValue(int(hero_in_game['character0']['5']))
                self.spin_spell_slot_character0_6.setValue(int(hero_in_game['character0']['6']))
                self.spin_spell_slot_character0_7.setValue(int(hero_in_game['character0']['7']))
                self.spin_spell_slot_character0_8.setValue(int(hero_in_game['character0']['8']))
                self.spin_spell_slot_character0_9.setValue(int(hero_in_game['character0']['9']))
            else:
                self.name_character0.setDisabled(True)
                self.hp_edit_character0.setDisabled(True)
                self.ac_edit_character0.setDisabled(True)
                self.checkBox_hide_spell_slot_char_0.setDisabled(True)
                self.initiative_edit_character0.setDisabled(True)
                self.spin_spell_slot_character0.setDisabled(True)
                self.spin_spell_slot_character0.setDisabled(True)
                self.spin_spell_slot_character0_2.setDisabled(True)
                self.spin_spell_slot_character0_3.setDisabled(True)
                self.spin_spell_slot_character0_4.setDisabled(True)
                self.spin_spell_slot_character0_5.setDisabled(True)
                self.spin_spell_slot_character0_6.setDisabled(True)
                self.spin_spell_slot_character0_7.setDisabled(True)
                self.spin_spell_slot_character0_8.setDisabled(True)
                self.spin_spell_slot_character0_9.setDisabled(True)
                self.pushButton_restore_spell_slots_0.setDisabled(True)
                self.pushButton_set_spell_slots_0.setDisabled(True)
                self.textEdit_char_0.setDisabled(True)

            if 'character1' in hero.keys():
                self.name_character1.setDisabled(False)
                self.hp_edit_character1.setDisabled(False)
                self.ac_edit_character1.setDisabled(False)
                self.checkBox_hide_spell_slot_char_1.setDisabled(False)
                self.initiative_edit_character1.setDisabled(False)
                self.spin_spell_slot_character1.setDisabled(False)
                self.spin_spell_slot_character1_2.setDisabled(False)
                self.spin_spell_slot_character1_3.setDisabled(False)
                self.spin_spell_slot_character1_4.setDisabled(False)
                self.spin_spell_slot_character1_5.setDisabled(False)
                self.spin_spell_slot_character1_6.setDisabled(False)
                self.spin_spell_slot_character1_7.setDisabled(False)
                self.spin_spell_slot_character1_8.setDisabled(False)
                self.spin_spell_slot_character1_9.setDisabled(False)
                self.pushButton_restore_spell_slots_1.setDisabled(False)
                self.pushButton_set_spell_slots_1.setDisabled(False)
                self.textEdit_char_1.setDisabled(False)

                self.name_character1.setText(str(hero['character1']['name']))
                self.hp_edit_character1.setText(f"{str(hero_in_game['character1']['hp'])}/{str(hero['character1']['hp'])}")
                self.ac_edit_character1.setText(str(hero['character1']['ac']))
                self.initiative_edit_character1.setText(str(hero['character1']['initiative']))
                self.spin_spell_slot_character1.setValue(int(hero_in_game['character1']['1']))
                self.spin_spell_slot_character1_2.setValue(int(hero_in_game['character1']['2']))
                self.spin_spell_slot_character1_3.setValue(int(hero_in_game['character1']['3']))
                self.spin_spell_slot_character1_4.setValue(int(hero_in_game['character1']['4']))
                self.spin_spell_slot_character1_5.setValue(int(hero_in_game['character1']['5']))
                self.spin_spell_slot_character1_6.setValue(int(hero_in_game['character1']['6']))
                self.spin_spell_slot_character1_7.setValue(int(hero_in_game['character1']['7']))
                self.spin_spell_slot_character1_8.setValue(int(hero_in_game['character1']['8']))
                self.spin_spell_slot_character1_9.setValue(int(hero_in_game['character1']['9']))
            else:
                self.name_character1.setDisabled(True)
                self.hp_edit_character1.setDisabled(True)
                self.ac_edit_character1.setDisabled(True)
                self.checkBox_hide_spell_slot_char_1.setDisabled(True)
                self.initiative_edit_character1.setDisabled(True)
                self.spin_spell_slot_character1.setDisabled(True)
                self.spin_spell_slot_character1_2.setDisabled(True)
                self.spin_spell_slot_character1_3.setDisabled(True)
                self.spin_spell_slot_character1_4.setDisabled(True)
                self.spin_spell_slot_character1_5.setDisabled(True)
                self.spin_spell_slot_character1_6.setDisabled(True)
                self.spin_spell_slot_character1_7.setDisabled(True)
                self.spin_spell_slot_character1_8.setDisabled(True)
                self.spin_spell_slot_character1_9.setDisabled(True)
                self.pushButton_restore_spell_slots_1.setDisabled(True)
                self.pushButton_set_spell_slots_1.setDisabled(True)
                self.textEdit_char_1.setDisabled(True)

            if 'character2' in hero.keys():
                self.name_character2.setDisabled(False)
                self.hp_edit_character2.setDisabled(False)
                self.ac_edit_character2.setDisabled(False)
                self.checkBox_hide_spell_slot_char_2.setDisabled(False)
                self.initiative_edit_character2.setDisabled(False)
                self.spin_spell_slot_character2.setDisabled(False)
                self.spin_spell_slot_character2_2.setDisabled(False)
                self.spin_spell_slot_character2_3.setDisabled(False)
                self.spin_spell_slot_character2_4.setDisabled(False)
                self.spin_spell_slot_character2_5.setDisabled(False)
                self.spin_spell_slot_character2_6.setDisabled(False)
                self.spin_spell_slot_character2_7.setDisabled(False)
                self.spin_spell_slot_character2_8.setDisabled(False)
                self.spin_spell_slot_character2_9.setDisabled(False)
                self.pushButton_restore_spell_slots_2.setDisabled(False)
                self.pushButton_set_spell_slots_2.setDisabled(False)
                self.textEdit_char_2.setDisabled(False)

                self.name_character2.setText(str(hero['character2']['name']))
                self.hp_edit_character2.setText(f"{str(hero_in_game['character2']['hp'])}/{str(hero['character2']['hp'])}")
                self.ac_edit_character2.setText(str(hero['character2']['ac']))
                self.initiative_edit_character2.setText(str(hero['character2']['initiative']))
                self.spin_spell_slot_character2.setValue(int(hero_in_game['character2']['1']))
                self.spin_spell_slot_character2_2.setValue(int(hero_in_game['character2']['2']))
                self.spin_spell_slot_character2_3.setValue(int(hero_in_game['character2']['3']))
                self.spin_spell_slot_character2_4.setValue(int(hero_in_game['character2']['4']))
                self.spin_spell_slot_character2_5.setValue(int(hero_in_game['character2']['5']))
                self.spin_spell_slot_character2_6.setValue(int(hero_in_game['character2']['6']))
                self.spin_spell_slot_character2_7.setValue(int(hero_in_game['character2']['7']))
                self.spin_spell_slot_character2_8.setValue(int(hero_in_game['character2']['8']))
                self.spin_spell_slot_character2_9.setValue(int(hero_in_game['character2']['9']))
            else:
                self.name_character2.setDisabled(True)
                self.hp_edit_character2.setDisabled(True)
                self.ac_edit_character2.setDisabled(True)
                self.checkBox_hide_spell_slot_char_2.setDisabled(True)
                self.initiative_edit_character2.setDisabled(True)
                self.spin_spell_slot_character2.setDisabled(True)
                self.spin_spell_slot_character2_2.setDisabled(True)
                self.spin_spell_slot_character2_3.setDisabled(True)
                self.spin_spell_slot_character2_4.setDisabled(True)
                self.spin_spell_slot_character2_5.setDisabled(True)
                self.spin_spell_slot_character2_6.setDisabled(True)
                self.spin_spell_slot_character2_7.setDisabled(True)
                self.spin_spell_slot_character2_8.setDisabled(True)
                self.spin_spell_slot_character2_9.setDisabled(True)
                self.pushButton_restore_spell_slots_2.setDisabled(True)
                self.pushButton_set_spell_slots_2.setDisabled(True)
                self.textEdit_char_2.setDisabled(True)

            if 'character3' in hero.keys():
                self.name_character3.setDisabled(False)
                self.hp_edit_character3.setDisabled(False)
                self.ac_edit_character3.setDisabled(False)
                self.checkBox_hide_spell_slot_char_3.setDisabled(False)
                self.initiative_edit_character3.setDisabled(False)
                self.spin_spell_slot_character3.setDisabled(False)
                self.spin_spell_slot_character3_2.setDisabled(False)
                self.spin_spell_slot_character3_3.setDisabled(False)
                self.spin_spell_slot_character3_4.setDisabled(False)
                self.spin_spell_slot_character3_5.setDisabled(False)
                self.spin_spell_slot_character3_6.setDisabled(False)
                self.spin_spell_slot_character3_7.setDisabled(False)
                self.spin_spell_slot_character3_8.setDisabled(False)
                self.spin_spell_slot_character3_9.setDisabled(False)
                self.pushButton_restore_spell_slots_3.setDisabled(False)
                self.pushButton_set_spell_slots_3.setDisabled(False)
                self.textEdit_char_3.setDisabled(False)

                self.name_character3.setText(str(hero['character3']['name']))
                self.hp_edit_character3.setText(f"{str(hero_in_game['character3']['hp'])}/{str(hero['character3']['hp'])}")
                self.ac_edit_character3.setText(str(hero['character3']['ac']))
                self.initiative_edit_character3.setText(str(hero['character3']['initiative']))
                self.spin_spell_slot_character3.setValue(int(hero_in_game['character3']['1']))
                self.spin_spell_slot_character3_2.setValue(int(hero_in_game['character3']['2']))
                self.spin_spell_slot_character3_3.setValue(int(hero_in_game['character3']['3']))
                self.spin_spell_slot_character3_4.setValue(int(hero_in_game['character3']['4']))
                self.spin_spell_slot_character3_5.setValue(int(hero_in_game['character3']['5']))
                self.spin_spell_slot_character3_6.setValue(int(hero_in_game['character3']['6']))
                self.spin_spell_slot_character3_7.setValue(int(hero_in_game['character3']['7']))
                self.spin_spell_slot_character3_8.setValue(int(hero_in_game['character3']['8']))
                self.spin_spell_slot_character3_9.setValue(int(hero_in_game['character3']['9']))
            else:
                self.name_character3.setDisabled(True)
                self.hp_edit_character3.setDisabled(True)
                self.ac_edit_character3.setDisabled(True)
                self.checkBox_hide_spell_slot_char_3.setDisabled(True)
                self.initiative_edit_character3.setDisabled(True)
                self.spin_spell_slot_character3.setDisabled(True)
                self.spin_spell_slot_character3_2.setDisabled(True)
                self.spin_spell_slot_character3_3.setDisabled(True)
                self.spin_spell_slot_character3_4.setDisabled(True)
                self.spin_spell_slot_character3_5.setDisabled(True)
                self.spin_spell_slot_character3_6.setDisabled(True)
                self.spin_spell_slot_character3_7.setDisabled(True)
                self.spin_spell_slot_character3_8.setDisabled(True)
                self.spin_spell_slot_character3_9.setDisabled(True)
                self.pushButton_restore_spell_slots_3.setDisabled(True)
                self.pushButton_set_spell_slots_3.setDisabled(True)
                self.textEdit_char_3.setDisabled(True)

        def hero0_hp_edit(self, bool_val):
            Dialog_redaction_hp = QtWidgets.QDialog()
            self.ui_redaction_hp_hero0 = Ui_Dialog_redaction_hp_tracker()
            self.ui_redaction_hp_hero0.setupUi(Dialog_redaction_hp)
            Dialog_redaction_hp.show()
            self.ui_redaction_hp_hero0.label_current_hp.setText(f'{hero["character0"]["name"]}')
            self.ui_redaction_hp_hero0.label_view_current_hp.setText(f'Hp: {hero_in_game["character0"]["hp"]}/{hero["character0"]["hp"]}')

            self.name_call_hero = "character0"

            self.ui_redaction_hp_hero0.pushButton_add_hp.clicked.connect(self.add_hp_hero)
            self.ui_redaction_hp_hero0.pushButton_minus_hp.clicked.connect(self.minus_hp_hero)
            self.ui_redaction_hp_hero0.pushButton_set_hp.clicked.connect(self.set_hp_hero)
            self.ui_redaction_hp_hero0.pushButton_restore_hp.clicked.connect(self.restore_hp_hero)
            Dialog_redaction_hp.exec()

        @logger.catch
        def hero1_hp_edit(self, bool_val):
            Dialog_redaction_hp = QtWidgets.QDialog()
            self.ui_redaction_hp_hero1 = Ui_Dialog_redaction_hp_tracker()
            self.ui_redaction_hp_hero1.setupUi(Dialog_redaction_hp)
            Dialog_redaction_hp.show()
            self.ui_redaction_hp_hero1.label_current_hp.setText(
                f'{hero["character1"]["name"]}')
            self.ui_redaction_hp_hero1.label_view_current_hp.setText(f'Hp: {hero_in_game["character1"]["hp"]}/{hero["character1"]["hp"]}')

            self.name_call_hero = "character1"

            self.ui_redaction_hp_hero1.pushButton_add_hp.clicked.connect(self.add_hp_hero)
            self.ui_redaction_hp_hero1.pushButton_minus_hp.clicked.connect(self.minus_hp_hero)
            self.ui_redaction_hp_hero1.pushButton_set_hp.clicked.connect(self.set_hp_hero)
            self.ui_redaction_hp_hero1.pushButton_restore_hp.clicked.connect(self.restore_hp_hero)
            Dialog_redaction_hp.exec()

        @logger.catch
        def hero2_hp_edit(self, bool_val):
            Dialog_redaction_hp = QtWidgets.QDialog()
            self.ui_redaction_hp_hero2 = Ui_Dialog_redaction_hp_tracker()
            self.ui_redaction_hp_hero2.setupUi(Dialog_redaction_hp)
            Dialog_redaction_hp.show()
            self.ui_redaction_hp_hero2.label_current_hp.setText(
                f'{hero["character2"]["name"]}')
            self.ui_redaction_hp_hero2.label_view_current_hp.setText(f'Hp: {hero_in_game["character2"]["hp"]}/{hero["character2"]["hp"]}')

            self.name_call_hero = "character2"

            self.ui_redaction_hp_hero2.pushButton_add_hp.clicked.connect(self.add_hp_hero)
            self.ui_redaction_hp_hero2.pushButton_minus_hp.clicked.connect(self.minus_hp_hero)
            self.ui_redaction_hp_hero2.pushButton_set_hp.clicked.connect(self.set_hp_hero)
            self.ui_redaction_hp_hero2.pushButton_restore_hp.clicked.connect(self.restore_hp_hero)
            Dialog_redaction_hp.exec()

        @logger.catch
        def hero3_hp_edit(self, bool_val):
            Dialog_redaction_hp = QtWidgets.QDialog()
            self.ui_redaction_hp_hero3 = Ui_Dialog_redaction_hp_tracker()
            self.ui_redaction_hp_hero3.setupUi(Dialog_redaction_hp)
            Dialog_redaction_hp.show()
            self.ui_redaction_hp_hero3.label_current_hp.setText(
                f'{hero["character3"]["name"]}')
            self.ui_redaction_hp_hero3.label_view_current_hp.setText(f'Hp: {hero_in_game["character3"]["hp"]}/{hero["character3"]["hp"]}')

            self.name_call_hero = "character3"

            self.ui_redaction_hp_hero3.pushButton_add_hp.clicked.connect(self.add_hp_hero)
            self.ui_redaction_hp_hero3.pushButton_minus_hp.clicked.connect(self.minus_hp_hero)
            self.ui_redaction_hp_hero3.pushButton_set_hp.clicked.connect(self.set_hp_hero)
            self.ui_redaction_hp_hero3.pushButton_restore_hp.clicked.connect(self.restore_hp_hero)
            Dialog_redaction_hp.exec()

        @logger.catch
        def add_hp_hero(self, bool_val):
            if self.name_call_hero == "character0":
                hero_in_game["character0"]["hp"] = int(hero_in_game["character0"]["hp"]) + int(self.ui_redaction_hp_hero0.edit_new_hp.text())
            elif self.name_call_hero == "character1":
                hero_in_game["character1"]["hp"] = int(hero_in_game["character1"]["hp"]) + int(self.ui_redaction_hp_hero1.edit_new_hp.text())
            elif self.name_call_hero == "character2":
                hero_in_game["character2"]["hp"] = int(hero_in_game["character2"]["hp"]) + int(self.ui_redaction_hp_hero2.edit_new_hp.text())
            elif self.name_call_hero == "character3":
                hero_in_game["character3"]["hp"] = int(hero_in_game["character3"]["hp"]) + int(self.ui_redaction_hp_hero3.edit_new_hp.text())

            self.add_to_tracker()

        @logger.catch
        def minus_hp_hero(self, bool_val):
            if self.name_call_hero == "character0":
                hero_in_game["character0"]["hp"] = int(hero_in_game["character0"]["hp"]) - int(self.ui_redaction_hp_hero0.edit_new_hp.text())
            elif self.name_call_hero == "character1":
                hero_in_game["character1"]["hp"] = int(hero_in_game["character1"]["hp"]) - int(self.ui_redaction_hp_hero1.edit_new_hp.text())
            elif self.name_call_hero == "character2":
                hero_in_game["character2"]["hp"] = int(hero_in_game["character2"]["hp"]) - int(self.ui_redaction_hp_hero2.edit_new_hp.text())
            elif self.name_call_hero == "character3":
                hero_in_game["character3"]["hp"] = int(hero_in_game["character3"]["hp"]) - int(self.ui_redaction_hp_hero3.edit_new_hp.text())

            self.add_to_tracker()

        @logger.catch
        def set_hp_hero(self, bool_val):
            if self.name_call_hero == "character0":
                hero["character0"]["hp"] = int(self.ui_redaction_hp_hero0.edit_new_hp.text())
            elif self.name_call_hero == "character1":
                hero["character1"]["hp"] = int(self.ui_redaction_hp_hero1.edit_new_hp.text())
            elif self.name_call_hero == "character2":
                hero["character2"]["hp"] = int(self.ui_redaction_hp_hero2.edit_new_hp.text())
            elif self.name_call_hero == "character3":
                hero["character3"]["hp"] = int(self.ui_redaction_hp_hero3.edit_new_hp.text())

            self.add_to_tracker()

        @logger.catch
        def restore_hp_hero(self, bool_val):
            if self.name_call_hero == "character0":
                hero_in_game["character0"]["hp"] = hero["character0"]["hp"]
            elif self.name_call_hero == "character1":
                hero_in_game["character1"]["hp"] = hero["character1"]["hp"]
            elif self.name_call_hero == "character2":
                hero_in_game["character2"]["hp"] = hero["character2"]["hp"]
            elif self.name_call_hero == "character3":
                hero_in_game["character3"]["hp"] = hero["character3"]["hp"]

            self.add_to_tracker()

        @logger.catch
        def restore_slot_char0(self, bool_val):
            if 'character0' in hero:
                self.spin_spell_slot_character0.setValue(int(hero['character0']['1']))
                self.spin_spell_slot_character0_2.setValue(int(hero['character0']['2']))
                self.spin_spell_slot_character0_3.setValue(int(hero['character0']['3']))
                self.spin_spell_slot_character0_4.setValue(int(hero['character0']['4']))
                self.spin_spell_slot_character0_5.setValue(int(hero['character0']['5']))
                self.spin_spell_slot_character0_6.setValue(int(hero['character0']['6']))
                self.spin_spell_slot_character0_7.setValue(int(hero['character0']['7']))
                self.spin_spell_slot_character0_8.setValue(int(hero['character0']['8']))
                self.spin_spell_slot_character0_9.setValue(int(hero['character0']['9']))
                self.set_stats_character()
            else:
                pass

        @logger.catch
        def restore_slot_char1(self, bool_val):
            if 'character1' in hero:
                self.spin_spell_slot_character1.setValue(int(hero['character1']['1']))
                self.spin_spell_slot_character1_2.setValue(int(hero['character1']['2']))
                self.spin_spell_slot_character1_3.setValue(int(hero['character1']['3']))
                self.spin_spell_slot_character1_4.setValue(int(hero['character1']['4']))
                self.spin_spell_slot_character1_5.setValue(int(hero['character1']['5']))
                self.spin_spell_slot_character1_6.setValue(int(hero['character1']['6']))
                self.spin_spell_slot_character1_7.setValue(int(hero['character1']['7']))
                self.spin_spell_slot_character1_8.setValue(int(hero['character1']['8']))
                self.spin_spell_slot_character1_9.setValue(int(hero['character1']['9']))
                self.set_stats_character()
            else:
                pass

        @logger.catch
        def restore_slot_char2(self, bool_val):
            if 'character2' in hero:
                self.spin_spell_slot_character2.setValue(int(hero['character2']['1']))
                self.spin_spell_slot_character2_2.setValue(int(hero['character2']['2']))
                self.spin_spell_slot_character2_3.setValue(int(hero['character2']['3']))
                self.spin_spell_slot_character2_4.setValue(int(hero['character2']['4']))
                self.spin_spell_slot_character2_5.setValue(int(hero['character2']['5']))
                self.spin_spell_slot_character2_6.setValue(int(hero['character2']['6']))
                self.spin_spell_slot_character2_7.setValue(int(hero['character2']['7']))
                self.spin_spell_slot_character2_8.setValue(int(hero['character2']['8']))
                self.spin_spell_slot_character2_9.setValue(int(hero['character2']['9']))
                self.set_stats_character()
            else:
                pass

        @logger.catch
        def restore_slot_char3(self, bool_val):
            if 'character3' in hero:
                self.spin_spell_slot_character3.setValue(int(hero['character3']['1']))
                self.spin_spell_slot_character3_2.setValue(int(hero['character3']['2']))
                self.spin_spell_slot_character3_3.setValue(int(hero['character3']['3']))
                self.spin_spell_slot_character3_4.setValue(int(hero['character3']['4']))
                self.spin_spell_slot_character3_5.setValue(int(hero['character3']['5']))
                self.spin_spell_slot_character3_6.setValue(int(hero['character3']['6']))
                self.spin_spell_slot_character3_7.setValue(int(hero['character3']['7']))
                self.spin_spell_slot_character3_8.setValue(int(hero['character3']['8']))
                self.spin_spell_slot_character3_9.setValue(int(hero['character3']['9']))
                self.set_stats_character()
            else:
                pass

        @logger.catch
        def set_slot_char0(self, bool_val):
            if 'character0' in hero:
                hero['character0']['1'] = self.spin_spell_slot_character0.text()
                hero['character0']['2'] = self.spin_spell_slot_character0_2.text()
                hero['character0']['3'] = self.spin_spell_slot_character0_3.text()
                hero['character0']['4'] = self.spin_spell_slot_character0_4.text()
                hero['character0']['5'] = self.spin_spell_slot_character0_5.text()
                hero['character0']['6'] = self.spin_spell_slot_character0_6.text()
                hero['character0']['7'] = self.spin_spell_slot_character0_7.text()
                hero['character0']['8'] = self.spin_spell_slot_character0_8.text()
                hero['character0']['9'] = self.spin_spell_slot_character0_9.text()
            else:
                pass

        @logger.catch
        def set_slot_char1(self, bool_val):
            if 'character1' in hero:
                hero['character1']['1'] = self.spin_spell_slot_character1.text()
                hero['character1']['2'] = self.spin_spell_slot_character1_2.text()
                hero['character1']['3'] = self.spin_spell_slot_character1_3.text()
                hero['character1']['4'] = self.spin_spell_slot_character1_4.text()
                hero['character1']['5'] = self.spin_spell_slot_character1_5.text()
                hero['character1']['6'] = self.spin_spell_slot_character1_6.text()
                hero['character1']['7'] = self.spin_spell_slot_character1_7.text()
                hero['character1']['8'] = self.spin_spell_slot_character1_8.text()
                hero['character1']['9'] = self.spin_spell_slot_character1_9.text()
            else:
                pass

        @logger.catch
        def set_slot_char2(self, bool_val):
            if 'character2' in hero:
                hero['character2']['1'] = self.spin_spell_slot_character2.text()
                hero['character2']['2'] = self.spin_spell_slot_character2_2.text()
                hero['character2']['3'] = self.spin_spell_slot_character2_3.text()
                hero['character2']['4'] = self.spin_spell_slot_character2_4.text()
                hero['character2']['5'] = self.spin_spell_slot_character2_5.text()
                hero['character2']['6'] = self.spin_spell_slot_character2_6.text()
                hero['character2']['7'] = self.spin_spell_slot_character2_7.text()
                hero['character2']['8'] = self.spin_spell_slot_character2_8.text()
                hero['character2']['9'] = self.spin_spell_slot_character2_9.text()
            else:
                pass

        @logger.catch
        def set_slot_char3(self, bool_val):
            if 'character3' in hero:
                hero['character3']['1'] = self.spin_spell_slot_character3.text()
                hero['character3']['2'] = self.spin_spell_slot_character3_2.text()
                hero['character3']['3'] = self.spin_spell_slot_character3_3.text()
                hero['character3']['4'] = self.spin_spell_slot_character3_4.text()
                hero['character3']['5'] = self.spin_spell_slot_character3_5.text()
                hero['character3']['6'] = self.spin_spell_slot_character3_6.text()
                hero['character3']['7'] = self.spin_spell_slot_character3_7.text()
                hero['character3']['8'] = self.spin_spell_slot_character3_8.text()
                hero['character3']['9'] = self.spin_spell_slot_character3_9.text()
            else:
                pass

        @logger.catch
        def set_stats_character(self, bool_val=False):
            '''
            DOCKSTRING: Обновление статов персонажей при их изменении в трекере
            '''
            try:
                if 'character0' in hero.keys() and 'character0' in hero_in_game.keys():
                    hero_in_game['character0']['hp'] = int(self.hp_edit_character0.text().split("/")[1])
                    hero['character0']['ac'] = int(self.ac_edit_character0.text())
                    hero_in_game['character0']['1'] = self.spin_spell_slot_character0.text()
                    hero_in_game['character0']['2'] = self.spin_spell_slot_character0_2.text()
                    hero_in_game['character0']['3'] = self.spin_spell_slot_character0_3.text()
                    hero_in_game['character0']['4'] = self.spin_spell_slot_character0_4.text()
                    hero_in_game['character0']['5'] = self.spin_spell_slot_character0_5.text()
                    hero_in_game['character0']['6'] = self.spin_spell_slot_character0_6.text()
                    hero_in_game['character0']['7'] = self.spin_spell_slot_character0_7.text()
                    hero_in_game['character0']['8'] = self.spin_spell_slot_character0_8.text()
                    hero_in_game['character0']['9'] = self.spin_spell_slot_character0_9.text()
                    hero['character0']['initiative'] = int(self.initiative_edit_character0.text())
                if 'character1' in hero.keys() and 'character1' in hero_in_game.keys():
                    hero_in_game['character1']['hp'] = int(self.hp_edit_character1.text().split("/")[1])
                    hero['character1']['ac'] = int(self.ac_edit_character1.text())
                    hero_in_game['character1']['1'] = self.spin_spell_slot_character1.text()
                    hero_in_game['character1']['2'] = self.spin_spell_slot_character1_2.text()
                    hero_in_game['character1']['3'] = self.spin_spell_slot_character1_3.text()
                    hero_in_game['character1']['4'] = self.spin_spell_slot_character1_4.text()
                    hero_in_game['character1']['5'] = self.spin_spell_slot_character1_5.text()
                    hero_in_game['character1']['6'] = self.spin_spell_slot_character1_6.text()
                    hero_in_game['character1']['7'] = self.spin_spell_slot_character1_7.text()
                    hero_in_game['character1']['8'] = self.spin_spell_slot_character1_8.text()
                    hero_in_game['character1']['9'] = self.spin_spell_slot_character1_9.text()
                    hero['character1']['initiative'] = int(self.initiative_edit_character1.text())
                if 'character2' in hero.keys() and 'character2' in hero_in_game.keys():
                    hero_in_game['character2']['hp'] = int(self.hp_edit_character2.text().split("/")[1])
                    hero['character2']['ac'] = int(self.ac_edit_character2.text())
                    hero_in_game['character2']['1'] = self.spin_spell_slot_character2.text()
                    hero_in_game['character2']['2'] = self.spin_spell_slot_character2_2.text()
                    hero_in_game['character2']['3'] = self.spin_spell_slot_character2_3.text()
                    hero_in_game['character2']['4'] = self.spin_spell_slot_character2_4.text()
                    hero_in_game['character2']['5'] = self.spin_spell_slot_character2_5.text()
                    hero_in_game['character2']['6'] = self.spin_spell_slot_character2_6.text()
                    hero_in_game['character2']['7'] = self.spin_spell_slot_character2_7.text()
                    hero_in_game['character2']['8'] = self.spin_spell_slot_character2_8.text()
                    hero_in_game['character2']['9'] = self.spin_spell_slot_character2_9.text()
                    hero['character2']['initiative'] = int(self.initiative_edit_character2.text())
                if 'character3' in hero.keys() and 'character3' in hero_in_game.keys():
                    hero_in_game['character3']['hp'] = int(self.hp_edit_character3.text().split("/")[1])
                    hero['character3']['ac'] = int(self.ac_edit_character3.text())
                    hero_in_game['character3']['1'] = self.spin_spell_slot_character3.text()
                    hero_in_game['character3']['2'] = self.spin_spell_slot_character3_2.text()
                    hero_in_game['character3']['3'] = self.spin_spell_slot_character3_3.text()
                    hero_in_game['character3']['4'] = self.spin_spell_slot_character3_4.text()
                    hero_in_game['character3']['5'] = self.spin_spell_slot_character3_5.text()
                    hero_in_game['character3']['6'] = self.spin_spell_slot_character3_6.text()
                    hero_in_game['character3']['7'] = self.spin_spell_slot_character3_7.text()
                    hero_in_game['character3']['8'] = self.spin_spell_slot_character3_8.text()
                    hero_in_game['character3']['9'] = self.spin_spell_slot_character3_9.text()
                    hero['character3']['initiative'] = int(self.initiative_edit_character3.text())
            except ValueError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Не корректный ввод данных')
                error.setDetailedText('HP и инициатива и слоты заклинаний должны состоять только из цифр')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("set_stats_character. except")

        @logger.catch
        def popup_action(self, but):
            '''
            DOCKSTRING: Заглушка для ошибок
            '''
            if but.text() == 'Ok':
                logger.info("popup_action")

        '''
        Scenario
        '''

        @logger.catch
        def del_chapter(self, bool_val):
            global scenario_chapter
            try:
                scenario_chapter.pop(self.comboBox_choose_chapter.currentText())
                self.comboBox_choose_chapter_update()
            except KeyError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Объект для удаления не найден')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("del_chapter. except")

        @logger.catch
        def hide_chapter(self, radioButton_tags_notes):
            '''
            DOCKSTRING: Скрытие основного окна сценария и вывод тэгов
            '''
            if radioButton_tags_notes:
                self.pushButton_add_tags.show()
                self.pushButton_del_tags.show()
                self.list_tags.show()
                self.text_scenario.show()

                self.comboBox_choose_chapter.hide()
                self.text_chapter.hide()
                self.edit_add_chapter.hide()
                self.pushButton_add_chapter.hide()
                self.pushButton_del_chapter.hide()
            else:
                self.comboBox_choose_chapter.show()
                self.text_chapter.show()
                self.edit_add_chapter.show()
                self.pushButton_add_chapter.show()
                self.pushButton_del_chapter.show()

                self.pushButton_add_tags.hide()
                self.pushButton_del_tags.hide()
                self.list_tags.hide()
                self.text_scenario.hide()


        @logger.catch
        def add_chapter(self, bool_val):
            global scenario_chapter
            if self.edit_add_chapter.text() in scenario_chapter.keys():
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Такая глава уже есть')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
            else:
                if self.edit_add_chapter.text() != "":
                    scenario_chapter[self.edit_add_chapter.text()] = ''
                self.comboBox_choose_chapter_update()

        @logger.catch
        def comboBox_choose_chapter_update(self):
            self.comboBox_choose_chapter.clear()

            for i in scenario_chapter.keys():
                self.comboBox_choose_chapter.addItem(i)
            self.comboBox_choose_chapter.setCurrentIndex(len(scenario_chapter)-1)

        @logger.catch
        def view_text_chapter(self, bool_val):
            try:
                self.text_chapter.setText(scenario_chapter[self.comboBox_choose_chapter.currentText()])
            except KeyError:
                logger.info("view_text_chapter. except KeyError")
                pass

        @logger.catch
        def set_text_chapter(self):
            scenario_chapter[self.comboBox_choose_chapter.currentText()] = self.text_chapter.toPlainText()

        @logger.catch
        def status_list_tags(self, bool_val):
            if self.status == 0:
                self.add_scenario_category()
            else:
                self.add_scenario_object()

        @logger.catch
        def del_object_scenario(self, bool_val):
            global scenario
            global scenario_text
            try:
                if self.list_tags.currentItem():
                    scenario[self.current_index.row()][1].pop(self.list_tags.currentRow() - 1)
                    scenario_text.pop(self.list_tags.currentItem().text())
                    self.update_list_tags_object()
            except AttributeError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Выберите объект для удаления')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("del_object_scenario. except AttributeError")

        @logger.catch
        def add_scenario_category(self):
            global scenario
            text, val = QInputDialog.getText(self, "Enter", "Add category")
            if text != "":
                scenario.append([text, []])
                self.update_list_tags()

        @logger.catch
        def add_scenario_object(self):
            global scenario
            global scenario_text
            text, val = QInputDialog.getText(self, "Enter", "Add notes")
            if text != "":
                scenario[self.current_index.row()][-1].append(text)
                scenario_text[text] = ""
                self.update_list_tags_object()

        @logger.catch
        def update_list_tags(self):
            self.list_tags.clear()
            self.status = 0

            for i in scenario:
                self.list_tags.addItem(i[0])

        @logger.catch
        def set_current_index(self, value):
            if self.status == 0 or self.list_tags.currentItem().text() == "...":
                self.current_index = self.list_tags.currentIndex()
                self.back_category_list_tags()
            else:
                if self.list_tags.currentItem().text() in scenario_text.keys():
                    self.text_scenario.setText(scenario_text[self.list_tags.currentItem().text()])

        @logger.catch
        def back_category_list_tags(self):
            if self.list_tags.currentItem().text() == "...":
                self.update_list_tags()
            else:
                self.update_list_tags_object()

        @logger.catch
        def update_list_tags_object(self):
            self.list_tags.clear()
            self.status = 1
            self.list_tags.addItem("...")
            if scenario[self.current_index.row()][1]:
                for i in scenario[self.current_index.row()][1]:
                    self.list_tags.addItem(i)
            else:
                pass

        @logger.catch
        def set_text_to_scenario(self):
            if self.list_tags.currentItem():
                if self.list_tags.currentItem().text() in scenario_text.keys():
                    scenario_text[self.list_tags.currentItem().text()] = self.text_scenario.toPlainText()
                else:
                    pass

        '''
        Notes
        '''

        @logger.catch
        def save_text(self):
            global note_zero
            global note_one
            global note_two
            global note_three
            global note_char_zero
            global note_char_one
            global note_char_two
            global note_char_three
            note_zero = self.note_edit_0.toPlainText()
            note_one = self.note_edit_1.toPlainText()
            note_two = self.note_edit_2.toPlainText()
            note_three = self.note_edit_3.toPlainText()
            note_char_zero = self.textEdit_char_0.toPlainText()
            note_char_one = self.textEdit_char_1.toPlainText()
            note_char_two = self.textEdit_char_2.toPlainText()
            note_char_three = self.textEdit_char_3.toPlainText()

        '''
        Music changer
        '''

        @logger.catch
        def music_changer_update(self, bool_val):
            '''
            DOCKSTRING: Добавление ссылок на музыку в словарь в формате сцена: урл
            '''
            if self.category_edit.text() and self.scene_edit.text() != "":
                if self.category_edit.text() in music.keys():
                    if self.scene_edit.text() in music[self.category_edit.text()].keys():
                        item = music[self.category_edit.text()][self.scene_edit.text()].split(' ')
                        if self.url_edit.text() in item:
                            error = QMessageBox()
                            error.setWindowTitle('Ошибка')
                            error.setText('Такая ссылка уже есть в этой сцене')
                            error.setIcon(QMessageBox.Icon.Warning)
                            error.setStandardButtons(QMessageBox.StandardButton.Ok)
                            error.setDefaultButton(QMessageBox.StandardButton.Ok)

                            error.buttonClicked.connect(self.popup_action)

                            error.exec()
                        else:
                            music[self.category_edit.text()][self.scene_edit.text()] += ' ' + self.url_edit.text()
                    else:
                        music[self.category_edit.text()][self.scene_edit.text()] = self.url_edit.text()
                else:
                    music[self.category_edit.text()] = {self.scene_edit.text(): self.url_edit.text()}
                self.listWidget_scene.clear()
                self.music_changer_listview_category_update()


        @logger.catch
        def music_changer_listview_category_update(self):
            '''
            DOCKSTRING: обновление комбо бокса, при загрузке сохранения
            '''
            self.listWidget_category.clear()
            for i in music.keys():
                self.listWidget_category.addItem(i)

        @logger.catch
        def listView_scene_update(self, val=0):
            self.listWidget_scene.clear()
            current_index = self.listWidget_category.currentRow()
            list_music = list(music.keys())
            for i in music[list_music[current_index]].keys():
                self.listWidget_scene.addItem(i)

        @logger.catch
        def music_changer_play(self, bool_val):
            num_one = self.listWidget_category.currentRow()
            num_two = self.listWidget_scene.currentRow()
            if num_one != -1:
                list_music = list(music.keys())
                list_music_deep = list(music[list_music[num_one]])
                value = music[list_music[num_one]][list_music_deep[num_two]].split(' ')
                for i in enumerate(value):
                    webbrowser.open(value[i[0]])
                    time.sleep(1)

        @logger.catch
        def music_changer_delete(self, bool_val):
            num_one = self.listWidget_category.currentRow()
            num_two = self.listWidget_scene.currentRow()
            if num_one != -1:
                list_music = list(music.keys())
                if num_two == -1:
                    if len(list(music.keys())) == 1:
                        error = QMessageBox()
                        error.setWindowTitle('Ошибка')
                        error.setText('На данный момент нельзя удалить последнюю категорию')
                        error.setIcon(QMessageBox.Icon.Warning)
                        error.setStandardButtons(QMessageBox.StandardButton.Ok)
                        error.setDefaultButton(QMessageBox.StandardButton.Ok)

                        error.buttonClicked.connect(self.popup_action)

                        error.exec()
                    else:
                        music.pop(list_music[num_one])
                        self.music_changer_listview_category_update()
                else:
                    list_music_deep = list(music[list_music[num_one]])
                    music[list_music[num_one]].pop(list_music_deep[num_two])
                    self.music_changer_listview_category_update()
                    self.listView_scene_update()

        @logger.catch
        def collect_music(self, bool_val=False):
            '''
            DOCKSTRING: Поиск файлов в папке
            '''
            self.list_song = []
            listOfFiles = os.listdir('./music')
            for entry in listOfFiles:
                if fnmatch.fnmatch(entry, "*.mp3"):
                    self.list_song.append(entry)
                if fnmatch.fnmatch(entry, "*.ogg"):
                    self.list_song.append(entry)
            if self.list_song:
                self.update_list_music()

        @logger.catch
        def update_list_music(self):
            self.listWidget_music.clear()
            for i in sorted(self.list_song,
                            key=lambda s: [int(t) if t.isdigit() else t.lower() for t in re.split('(\d+)', s)]):
                self.listWidget_music.addItem(i)
            self.listWidget_music.setCurrentRow(0)

        @logger.catch
        def play_local_music(self, bool_val):
            song = str(Path.cwd()) + "/music/" + self.listWidget_music.currentItem().text()
            self.mixer.unload()
            self.mixer.load(song)
            self.mixer.play()

        @logger.catch
        def stop_local_music(self, bool_val):
            if self.mixer.get_busy():
                self.mixer.stop()
                self.mixer.unload()

        '''
        Rules
        '''

        @logger.catch
        def set_combobox_rules(self):
            for i in dict_rules:
                self.comboBox_rules.addItem(i)

        @logger.catch
        def changed_combobox_rules(self, rules_name):
            self.label_rules.setText(dict_rules[rules_name])

        '''
        Img viewer
        '''

        @logger.catch
        def collect_img(self, bool_val=False):
            '''
            DOCKSTRING: Поиск файлов в папке
            '''
            self.list_images = []
            listOfFiles = os.listdir('./images')
            for entry in listOfFiles:
                if fnmatch.fnmatch(entry, "*.png"):
                    self.list_images.append(entry)
            for entry in listOfFiles:
                if fnmatch.fnmatch(entry, "*.jpeg"):
                    self.list_images.append(entry)
            for entry in listOfFiles:
                if fnmatch.fnmatch(entry, "*.jpg"):
                    self.list_images.append(entry)
            for entry in listOfFiles:
                if fnmatch.fnmatch(entry, "*.bmp"):
                    self.list_images.append(entry)
            if self.list_images:
                self.update_list_img()

        @logger.catch
        def update_list_img(self):
            self.listWidget_img.clear()
            for i in sorted(self.list_images,
                            key=lambda s: [int(t) if t.isdigit() else t.lower() for t in re.split('(\d+)', s)]):
                self.listWidget_img.addItem(i)
            self.listWidget_img.setCurrentRow(0)

        @logger.catch
        def open_viewer_window(self, bool_val=False):
            self.viewer_window.show()
            self.app_func_viewer_window()
            self.size_token = 100

        @logger.catch
        def app_func_viewer_window(self):
            self.pushButton_open_current.clicked.connect(self.open_current_img)

        @logger.catch
        def left_img(self, bool_val=False):
            if self.listWidget_img.currentRow() != 0:
                self.listWidget_img.setCurrentRow(self.listWidget_img.currentRow() - 1)
                self.open_current_img()

        @logger.catch
        def right_img(self, bool_val=False):
            if self.listWidget_img.currentRow() < len(self.list_images) - 1:
                self.listWidget_img.setCurrentRow(self.listWidget_img.currentRow() + 1)
                self.open_current_img()

        @logger.catch
        def reduce_token(self, bool_val=False):
            if self.size_token >= 26:
                self.size_token -= 25
                self.scene.clear()
                self.open_current_img()

        @logger.catch
        def increase_token(self, bool_val=False):
            if self.size_token <= 201:
                self.size_token += 25
                self.scene.clear()
                self.open_current_img()

        @logger.catch
        def reduce_img(self, bool_val=False):
            if self.scale_img_viewer <= -4:
                pass
            else:
                self.graphicsView_img.scale(0.75, 0.75)
                self.scale_img_viewer -= 1
                self.label_scale_img_update()

        @logger.catch
        def increase_img(self, bool_val=False):
            if self.scale_img_viewer >= 4:
                pass
            else:
                self.graphicsView_img.scale(1.335, 1.335)
                self.scale_img_viewer += 1
                self.label_scale_img_update()

        @logger.catch
        def label_scale_img_update(self):
            self.label_scale_img.setText(str(self.scale_img_viewer))


        @logger.catch
        def open_current_img(self, bool_val=False):
            '''
            DOCKSTRING: Открытие выбранной картинки в окне просмотра
            '''
            try:
                if self.viewer_window:
                    try:
                        self.scene = QGraphicsScene()
                        self.scene.addPixmap(QPixmap("images/" + self.listWidget_img.currentItem().text()).scaled(
                            QtGui.QGuiApplication.primaryScreen().availableGeometry().width(),
                            QtGui.QGuiApplication.primaryScreen().availableGeometry().height(),
                            aspectRatioMode=Qt.AspectRatioMode.KeepAspectRatio,
                            transformMode=Qt.TransformationMode.SmoothTransformation))
                        self.viewer_window.graphicsView_img.setScene(self.scene)
                        self.graphicsView_img.setScene(self.scene)
                        self.viewer_window.graphicsView_img.setSceneRect(0, 0, 1200, 1000)
                        self.graphicsView_img.setSceneRect(0, 0, 1200, 1000)
                        self.add_token()
                    except AttributeError:
                        error = QMessageBox()
                        error.setWindowTitle('Ошибка')
                        error.setText('Выберите изображение, из списка')
                        error.setIcon(QMessageBox.Icon.Warning)
                        error.setStandardButtons(QMessageBox.StandardButton.Ok)
                        error.setDefaultButton(QMessageBox.StandardButton.Ok)

                        error.buttonClicked.connect(self.popup_action)

                        error.exec()
                        logger.info("open_current_img, except AttributeError")
            except AttributeError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Откройте окно просмотра изображения!')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("open_current_img, open_window except AttributeError")

        @logger.catch
        def spinBox_chek(self, bool_val=False):
            '''
            DOCKSTRING: Проверка количества токенов
            '''
            if self.spinBox_enemy_token.value() > 15:
                self.spinBox_enemy_token.setValue(15)
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Максимальное количество противников 15')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
            if self.spinBox_hero_token.value() > 4:
                self.spinBox_hero_token.setValue(4)
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Максимальное количество игроков 4')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()

        @logger.catch
        def add_token(self):
            '''
            DOCKSTRING: Добавление токенов(изображение) в сцену
            '''
            position_token = 50
            token_num = 1
            for i in range(int(self.spinBox_enemy_token.text())):
                position_token += 100
                i = TokenImg(50, position_token, self.size_token, True, str(token_num))
                token_num += 1
                self.scene.addItem(i)

            position_token = 50
            token_num = 1
            for i in range(int(self.spinBox_hero_token.text())):
                position_token += 100
                i = TokenImg(150, position_token, self.size_token, False, str(token_num))
                token_num += 1
                self.scene.addItem(i)

        '''
        Store
        '''

        @logger.catch
        def del_store(self, bool_val):
            try:
                store.pop(self.box_choose_shop.currentText())
                self.box_choose_shop_update()
            except ValueError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Магазин не найден')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("del_store. except ValueError")
            except KeyError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Магазин не найден')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("del_store. except KeyError")

        @logger.catch
        def options_store_box_update(self):
            sex = ["Случайно", "Мужчина", "Женщина"]
            age = ["Случайно", "Молодой", "Средний", "Пожилой"]
            for i in sex:
                self.box_sex_vendor.addItem(i)
            for i in age:
                self.box_age_vendor.addItem(i)
            for i in race:
                self.box_race_vendor.addItem(i)

        @logger.catch
        def options_generate_store(self, radioButton_options_store):
            '''
            DOCKSTRING: Скрытие текстового поля заметок и вывод настроек генератора
            '''
            if radioButton_options_store:
                self.text_notes.hide()

                self.label_store_name_2.show()
                self.edit_store_name_2.show()
                self.label_vendor.show()
                self.label_name_vendor.show()
                self.edit_name_vendor.show()
                self.label_sex_vendor.show()
                self.box_sex_vendor.show()
                self.label_age_vendor.show()
                self.box_age_vendor.show()
                self.label_race_vendor.show()
                self.box_race_vendor.show()
            else:
                self.text_notes.show()

                self.label_store_name_2.hide()
                self.edit_store_name_2.hide()
                self.label_vendor.hide()
                self.label_name_vendor.hide()
                self.edit_name_vendor.hide()
                self.label_sex_vendor.hide()
                self.box_sex_vendor.hide()
                self.label_age_vendor.hide()
                self.box_age_vendor.hide()
                self.label_race_vendor.hide()
                self.box_race_vendor.hide()

        @logger.catch
        def store_type_and_qualification_vendor(self):
            for i in merchants:
                self.box_generate_type.addItem(i)

            for i in qualification:
                self.box_generate_cost.addItem(i)

        @logger.catch
        def create_store(self, bool_val):
            sex = sex_vendor(self.box_sex_vendor.currentText())
            name = name_vendor(sex_vendor, self.edit_name_vendor.text())
            if self.edit_store_name_2.text() == "":
                iter_store = 0
                store_name = 'store ' + name
                flag = True
                while flag is True:
                    if store_name in store.keys():
                        store_name = f'store {name}_{str(iter_store)}'
                        iter_store += 1
                    else:
                        flag = False
                store.update({
                    store_name: {
                        'type_store': self.box_generate_type.currentText(),
                        'name_vendor': name,
                        'sex_vendor': sex,
                        'age_vendor': age_vendor(self.box_age_vendor.currentText()),
                        'race_vendor': race_vendor(self.box_race_vendor.currentText()),
                        'store_value': self.box_generate_cost.currentText(),
                        'vendor_money': money_vendor(self.box_generate_cost.currentText()),
                        'assortment_store': assortment_store(self.box_generate_type.currentText(),
                                                             self.box_generate_cost.currentText()),
                        'text_notes': " "}})
            else:
                iter_store = 0
                store_name = self.edit_store_name_2.text()
                flag = True
                while flag is True:
                    if store_name in store.keys():
                        store_name = f"{self.edit_store_name_2.text()} {str(iter_store)}"
                        iter_store += 1
                    else:
                        flag = False
                store.update({
                    store_name: {
                        'type_store': self.box_generate_type.currentText(),
                        'name_vendor': name,
                        'sex_vendor': sex,
                        'age_vendor': age_vendor(self.box_age_vendor.currentText()),
                        'race_vendor': race_vendor(self.box_race_vendor.currentText()),
                        'store_value': self.box_generate_cost.currentText(),
                        'vendor_money': money_vendor(self.box_generate_cost.currentText()),
                        'assortment_store': assortment_store(self.box_generate_type.currentText(),
                                                             self.box_generate_cost.currentText()),
                        'text_notes': " "}})
                self.edit_store_name_2.setText("")
            self.edit_name_vendor.setText("")
            self.box_choose_shop_update()

        @logger.catch
        def box_choose_shop_update(self):
            self.box_choose_shop.clear()
            for i in store.keys():
                self.box_choose_shop.addItem(i)
            self.box_choose_shop.setCurrentIndex(len(store.keys())-1)

        @logger.catch
        def view_store(self, store_name):
            if store_name in store.keys():
                text = f"Имя продавца: {store[self.box_choose_shop.currentText()]['name_vendor']}\n" \
                       f"Пол продавца: {store[self.box_choose_shop.currentText()]['sex_vendor']}\n" \
                       f"Возраст: {store[self.box_choose_shop.currentText()]['age_vendor']}\n" \
                       f"Расса продавца: {store[self.box_choose_shop.currentText()]['race_vendor']}\n" \
                       f"Тип лавки: \n{store[self.box_choose_shop.currentText()]['type_store']}\n" \
                       f"Квалификация продавца: {store[self.box_choose_shop.currentText()]['store_value']}\n" \
                       f"Денег у продавца: {store[self.box_choose_shop.currentText()]['vendor_money']}зм"
                self.label_shop_info.setText(text)
                self.text_assortment_shop.setText(f"Ассортимент:\n{store[self.box_choose_shop.currentText()]['assortment_store']}")
                self.text_notes.setText(store[self.box_choose_shop.currentText()]['text_notes'])
            else:
                pass

        @logger.catch
        def search_for_assortment_store(self, bool_val):
            if self.search_assortment_edit.text() == "":
                self.text_assortment_shop.setText(f"Ассортимент:\n{store[self.box_choose_shop.currentText()]['assortment_store']}")
            else:
                message_new = ""
                for i in store[self.box_choose_shop.currentText()]['assortment_store'].split("\n"):
                    if bool_val in i:
                        message_new += i + "\n"
                self.text_assortment_shop.setText(f"Ассортимент:\n{message_new}")

        @logger.catch
        def shop_notes_edit(self):
            if self.box_choose_shop.currentText() != "":
                store[self.box_choose_shop.currentText()]['text_notes'] = self.text_notes.toPlainText()

        '''
        NPC generator
        '''

        @logger.catch
        def del_npc(self, bool_val):
            try:
                npc.pop(self.box_generate_npc.currentText())
                self.box_generate_npc_update()
            except KeyError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('NPC не найден')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("del_npc, except KeyError")

        @logger.catch
        def npc_box_update(self):
            sex = ["Случайно", "Мужчина", "Женщина"]
            age = ["Случайно", "Молодой", "Средний", "Пожилой"]
            for i in sex:
                self.box_sex_npc.addItem(i)
            for i in age:
                self.box_age_npc.addItem(i)
            for i in race:
                self.box_race_npc.addItem(i)

        @logger.catch
        def create_npc(self, bool_val):
            npc_sex = sex_vendor(self.box_sex_npc.currentText())
            npc_name = name_vendor(npc_sex, self.edit_npc_name.text())
            iter_npc = 0
            npc_name_req = npc_name
            flag = True
            while flag is True:
                if npc_name in npc.keys():
                    npc_name = f"{npc_name} {iter_npc}"
                    iter_npc += 1
                else:
                    flag = False
            npc.update({
                npc_name: {
                    'npc_name': npc_name,
                    'npc_sex': npc_sex,
                    'npc_age': age_vendor(self.box_race_npc.currentText()),
                    'nps_race': race_vendor(self.box_age_npc.currentText()),
                    'text_notes': " "}})
            self.edit_npc_name.setText("")
            self.box_generate_npc_update()

        @logger.catch
        def box_generate_npc_update(self):
            self.box_generate_npc.clear()
            for i in npc.keys():
                self.box_generate_npc.addItem(i)
            self.box_generate_npc.setCurrentIndex(len(npc.keys())-1)

        @logger.catch
        def npc_notes_edit(self):
            if self.box_generate_npc.currentText() != "":
                npc[self.box_generate_npc.currentText()]['text_notes'] = self.text_npc_generate.toPlainText()

        @logger.catch
        def view_npc(self, npc_name):
            if self.box_generate_npc.currentText() != "":
                text = f"Имя: {npc[npc_name]['npc_name']}\n" \
                       f"Пол: {npc[npc_name]['npc_sex']}\n" \
                       f"Возраст: {npc[npc_name]['npc_age']}\n" \
                       f"Расса: {npc[npc_name]['nps_race']}"
                self.label_generate_npc.setText(text)
                self.text_npc_generate.setText(npc[npc_name]['text_notes'])

    if __name__ == "__main__":
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = MainWindow()
        MainWindow.show()
        sys.exit(app.exec())

finally:
    if hero:
        save_dict = (
            hero,
            hero_in_game,
            music,
            note_zero,
            note_one,
            note_two,
            note_three,
            note_char_zero,
            note_char_one,
            note_char_two,
            note_char_three,
            store,
            npc,
            dict_preset,
            scenario,
            scenario_text,
            scenario_chapter,
        )
        with open("last_session.json", 'w', encoding='utf-8') as outfile:
            json.dump(save_dict, outfile)
    logger.info("End")
