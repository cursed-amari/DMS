# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtWidgets, QtCore
from PyQt6.QtWidgets import QFileDialog, QMessageBox, QInputDialog
from loguru import logger
import random
import webbrowser
import time
import json

from main_class import Ui_MainWindow
from calc_init import InitiativeWindow
from dict_rules import dict_rules

from shop_data import *


hero = {}
music = {}
store = {}
npc = {}
scenario_chapter = {}
scenario = []
scenario_text = {}
dict_preset = {}
note_zero = ""
note_one = ""
note_two = ""
note_three = ""
note_char_zero = ""
note_char_one = ""
note_char_two = ""
note_char_three = ""

logger.add("debug.log", format="{time}, {level}, {message}", level="DEBUG", retention="2 days",)
try:
    class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
        def __init__(self):
            super().__init__()
            self.setupUi(self)
            self.aplication_func()
            self.status = 0

        def aplication_func(self):
            # Menu
            self.actionSave.triggered.connect(self.actions_save)
            self.actionOpen.triggered.connect(self.action_open)
            self.actionlast_session.triggered.connect(self.last_session)
            # pushButton
            self.pushButton.clicked.connect(self.input_chek)
            self.pushButton_init_open.clicked.connect(self.open_init_calc)
            self.pushButton_roll_dice.clicked.connect(self.roll_dice)
            self.pushButton_del_char.clicked.connect(self.del_char)
            self.pushButton_restore_spell_slots_0.clicked.connect(self.restore_slot_char0)
            self.pushButton_restore_spell_slots_1.clicked.connect(self.restore_slot_char1)
            self.pushButton_restore_spell_slots_2.clicked.connect(self.restore_slot_char2)
            self.pushButton_restore_spell_slots_3.clicked.connect(self.restore_slot_char3)
            self.pushButton_set_spell_slots_0.clicked.connect(self.set_slot_char0)
            self.pushButton_set_spell_slots_1.clicked.connect(self.set_slot_char1)
            self.pushButton_set_spell_slots_2.clicked.connect(self.set_slot_char2)
            self.pushButton_set_spell_slots_3.clicked.connect(self.set_slot_char3)
            self.pushButton_url_set.clicked.connect(self.music_changer_update)
            self.pushButton_url_open.clicked.connect(self.music_changer_play)
            self.pushButton_url_delete.clicked.connect(self.music_changer_delete)
            self.pushButton_generate_shop.clicked.connect(self.sex_vendor)
            self.pushButton_del_store.clicked.connect(self.del_store)
            self.pushButton_generate_npc.clicked.connect(self.sex_npc)
            self.pushButton_del_npc.clicked.connect(self.del_npc)
            self.pushButton_add_tags.clicked.connect(self.status_list_tags)
            self.pushButton_add_chapter.clicked.connect(self.add_chapter)
            self.pushButton_del_tags.clicked.connect(self.del_object_scenario)
            self.pushButton_del_chapter.clicked.connect(self.del_chapter)
            # checkBox
            self.checkBox_lock_init.toggled.connect(self.lock_initiative)
            self.checkBox_lock_ac.toggled.connect(self.lock_ac)
            self.checkBox_hide_spell_slot_char_0.toggled.connect(self.hide_spell_slot_char_0)
            self.checkBox_hide_spell_slot_char_1.toggled.connect(self.hide_spell_slot_char_1)
            self.checkBox_hide_spell_slot_char_2.toggled.connect(self.hide_spell_slot_char_2)
            self.checkBox_hide_spell_slot_char_3.toggled.connect(self.hide_spell_slot_char_3)
            # radioButton
            self.radioButton_hide_create.toggled.connect(self.hide_create)
            self.radioButton_options_store.toggled.connect(self.options_generate_store)
            self.radioButton_tags_notes.toggled.connect(self.hide_chapter)
            # comboBox
            self.comboBox_rules.currentTextChanged.connect(self.changed_combobox_rules)
            self.box_choose_shop.currentTextChanged.connect(self.view_store)
            self.box_generate_npc.currentTextChanged.connect(self.view_npc)
            self.comboBox_choose_chapter.currentTextChanged.connect(self.view_text_chapter)
            # listWidget
            self.listWidget_category.currentRowChanged.connect(self.listView_scene_update)
            self.list_tags.clicked.connect(self.set_current_index)
            # textEdit
            self.text_notes.textChanged.connect(self.shop_notes_edit)
            self.text_npc_generate.textChanged.connect(self.npc_notes_edit)
            self.search_assortment_edit.textChanged.connect(self.search_for_assortment_store)
            self.textEdit_char_0.textChanged.connect(self.save_text)
            self.textEdit_char_1.textChanged.connect(self.save_text)
            self.textEdit_char_2.textChanged.connect(self.save_text)
            self.textEdit_char_3.textChanged.connect(self.save_text)
            self.note_edit_0.textChanged.connect(self.save_text)
            self.note_edit_1.textChanged.connect(self.save_text)
            self.note_edit_2.textChanged.connect(self.save_text)
            self.note_edit_3.textChanged.connect(self.save_text)
            self.text_scenario.textChanged.connect(self.set_text_to_scenario)
            self.text_chapter.textChanged.connect(self.set_text_chapter)
            # method
            self.view_character_stats()
            self.set_combobox_rules()
            self.add_to_tracker()
            self.store_type_and_qualification_vendor()
            self.options_store_box_update()
            self.npc_box_update()
            logger.info("aplication_func")

        def view_character_stats(self):
            '''
            DOCKSTRING: Обновление статов через трекер
            '''
            self.hp_edit_character0.editingFinished.connect(self.set_stats_character)
            self.hp_edit_character1.editingFinished.connect(self.set_stats_character)
            self.hp_edit_character2.editingFinished.connect(self.set_stats_character)
            self.hp_edit_character3.editingFinished.connect(self.set_stats_character)
            self.ac_edit_character0.editingFinished.connect(self.set_stats_character)
            self.ac_edit_character1.editingFinished.connect(self.set_stats_character)
            self.ac_edit_character2.editingFinished.connect(self.set_stats_character)
            self.ac_edit_character3.editingFinished.connect(self.set_stats_character)
            self.initiative_edit_character0.editingFinished.connect(self.set_stats_character)
            self.initiative_edit_character1.editingFinished.connect(self.set_stats_character)
            self.initiative_edit_character2.editingFinished.connect(self.set_stats_character)
            self.initiative_edit_character3.editingFinished.connect(self.set_stats_character)
            logger.info("view_character_stats")

        '''
        Menu
        '''

        def actions_save(self):
            '''
            DOCKSTRING: сохранение в json файл
            '''
            global note_zero
            global note_one
            global note_two
            global note_three
            global note_char_zero
            global note_char_one
            global note_char_two
            global note_char_three
            note_zero = self.note_edit_0.toPlainText()
            note_one = self.note_edit_1.toPlainText()
            note_two = self.note_edit_2.toPlainText()
            note_three = self.note_edit_3.toPlainText()
            note_char_zero = self.textEdit_char_0.toPlainText()
            note_char_one = self.textEdit_char_1.toPlainText()
            note_char_two = self.textEdit_char_2.toPlainText()
            note_char_three = self.textEdit_char_3.toPlainText()

            try:
                with open("data_enemy", "r", encoding="utf-8") as file:
                    data = json.load(file)
            except FileNotFoundError:
                data = {}

            save_dict = (
                hero,
                music,
                note_zero,
                note_one,
                note_two,
                note_three,
                note_char_zero,
                note_char_one,
                note_char_two,
                note_char_three,
                store,
                npc,
                data,
                scenario,
                scenario_text,
                scenario_chapter,
            )
            data = QFileDialog.getSaveFileName(self)[0]

            try:
                with open(data, 'w') as outfile:
                    json.dump(save_dict, outfile)
                logger.info("actions_save")
            except FileNotFoundError:
                print("No such file")
                logger.info("actions_save. except")

        def action_open(self):
            '''
            DOCKSTRING: загрузка из json файла
            '''
            global dict_preset

            data = QFileDialog.getOpenFileName(self)[0]

            try:
                with open(data, 'r', encoding="utf-8") as json_file:
                    data = json.load(json_file)
                    global hero
                    global music
                    global store
                    global npc
                    global scenario
                    global scenario_text
                    global scenario_chapter
                    hero = data[0]
                    music = data[1]
                    self.note_edit_0.setText(data[2])
                    self.note_edit_1.setText(data[3])
                    self.note_edit_2.setText(data[4])
                    self.note_edit_3.setText(data[5])
                    self.textEdit_char_0.setText(data[6])
                    self.textEdit_char_1.setText(data[7])
                    self.textEdit_char_2.setText(data[8])
                    self.textEdit_char_3.setText(data[9])
                    store = data[10]
                    npc = data[11]
                    dict_preset = data[12]
                    scenario = data[13]
                    scenario_text = data[14]
                    scenario_chapter = data[15]

                logger.info("action_open")

                self.view_create_hero()
                self.add_to_tracker()
                self.music_changer_listview_category_update()
                self.add_to_del_char_box()
                self.box_choose_shop_update()
                self.box_generate_npc_update()
                self.comboBox_choose_chapter_update()
                self.update_list_tags()
            except FileNotFoundError:
                print("No such file")
                logger.info("action_open. except")

        def last_session(self):
            '''
                        DOCKSTRING: загрузка из json файла
                        '''
            global dict_preset

            try:
                with open('last_session', 'r', encoding="utf-8") as json_file:
                    data = json.load(json_file)
                    global hero
                    global music
                    global store
                    global npc
                    global scenario
                    global scenario_text
                    global scenario_chapter
                    hero = data[0]
                    music = data[1]
                    self.note_edit_0.setText(data[2])
                    self.note_edit_1.setText(data[3])
                    self.note_edit_2.setText(data[4])
                    self.note_edit_3.setText(data[5])
                    self.textEdit_char_0.setText(data[6])
                    self.textEdit_char_1.setText(data[7])
                    self.textEdit_char_2.setText(data[8])
                    self.textEdit_char_3.setText(data[9])
                    store = data[10]
                    npc = data[11]
                    dict_preset = data[12]
                    scenario = data[13]
                    scenario_text = data[14]
                    scenario_chapter = data[15]

                logger.info("action_open")

                self.view_create_hero()
                self.add_to_tracker()
                self.music_changer_listview_category_update()
                self.add_to_del_char_box()
                self.box_choose_shop_update()
                self.box_generate_npc_update()
                self.comboBox_choose_chapter_update()
                self.update_list_tags()
            except FileNotFoundError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Последняя сессия не обнаружена')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("input_chek. except")
                logger.info("action_open. except")


        '''
        Main window hide
        '''

        def input_chek(self):
            '''
            DOCKSTRING: Проверка чисел
            '''
            try:
                hp_check = int(self.hp_edit.text())
                ac_check = int(self.ac_edit.text())
                initiative_check = int(self.initiative_edit.text())
                Spell_slot_chek_1 = int(self.spell_slot_edit.text())
                Spell_slot_chek_2 = int(self.spell_slot_edit_2.text())
                Spell_slot_chek_3 = int(self.spell_slot_edit_3.text())
                Spell_slot_chek_4 = int(self.spell_slot_edit_4.text())
                Spell_slot_chek_5 = int(self.spell_slot_edit_5.text())
                Spell_slot_chek_6 = int(self.spell_slot_edit_6.text())
                Spell_slot_chek_7 = int(self.spell_slot_edit_7.text())
                Spell_slot_chek_8 = int(self.spell_slot_edit_8.text())
                Spell_slot_chek_9 = int(self.spell_slot_edit_9.text())

                logger.info("input_chek")
                self.create_hero()
            except ValueError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Не корректный ввод!')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)
                error.setDetailedText('HP и инициатива и слоты заклинаний должны состоять только из цифр')

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("input_chek. except")

        def create_hero(self):
            '''
            DOCKSTRING: Создание персонажа в редакторе и добавление его в словарь
            '''
            self.iter = 0
            flag = True
            while flag is True:
                if 'character' + str(self.iter) in hero.keys():
                    self.iter += 1
                else:
                    flag = False
            if self.iter <= 3:
                hero.update({
                    'character' + str(self.iter): {
                        'name': self.name_edit.text(),
                        'hp': self.hp_edit.text(),
                        'ac': self.ac_edit.text(),
                        '1': self.spell_slot_edit.text(),
                        '2': self.spell_slot_edit_2.text(),
                        '3': self.spell_slot_edit_3.text(),
                        '4': self.spell_slot_edit_4.text(),
                        '5': self.spell_slot_edit_5.text(),
                        '6': self.spell_slot_edit_6.text(),
                        '7': self.spell_slot_edit_7.text(),
                        '8': self.spell_slot_edit_8.text(),
                        '9': self.spell_slot_edit_9.text(),
                        'initiative': self.initiative_edit.text()
                    }})
                logger.info(f"create_hero, {hero}")
                self.add_to_del_char_box()
            else:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Нельзя выполнить действие')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)
                error.setInformativeText('На данный момент только 4 персонажа')
                error.setDetailedText('Слишком много людей!')

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info(f"create_hero. except")
            self.view_create_hero()
            self.add_to_tracker()

        def view_create_hero(self):
            '''
            DOCKSTRING: Отображение созданых персонажей в окне рядом с редактором
            '''
            value = ''
            for item in hero:
                value += f'Name: {hero[item]["name"]}' + '\n' + \
                        f'Hp: {hero[item]["hp"]}' + '\n' + \
                         f'Ac: {hero[item]["ac"]}' + '\n' + \
                         f'Initiative: {hero[item]["initiative"]}'\
                         + '\n' + '\n'
                self.label.setText(value)
            logger.info("view_create_hero")

        def hide_create(self):
            '''
            DOCKSTRING: круглая кнопка. Скрыть или показать редактор персонажа
            '''
            self.check_radiobutton = self.radioButton_hide_create.isChecked()
            self.check_checkbox_init = self.checkBox_lock_init.isChecked()
            self.check_checkbox_ac = self.checkBox_lock_ac.isChecked()
            self.check_char_0 = self.checkBox_hide_spell_slot_char_0.isChecked()
            self.check_char_1 = self.checkBox_hide_spell_slot_char_1.isChecked()
            self.check_char_2 = self.checkBox_hide_spell_slot_char_2.isChecked()
            self.check_char_3 = self.checkBox_hide_spell_slot_char_3.isChecked()
            if self.check_radiobutton is True:
                self.pushButton_init_open.show()
                self.dice_edit.show()
                self.amount_dice_box.show()
                self.modifier_box.show()
                self.label_amount.show()
                self.label_dice.show()
                self.label_modifier.show()
                self.label_amount.show()
                self.label_roll_dice.show()
                self.check_advantage.show()
                self.pushButton_roll_dice.show()
                self.label_del_char.show()
                self.comboBox_del_char.show()
                self.pushButton_del_char.show()
                self.name_character0.show()
                self.name_character1.show()
                self.name_character2.show()
                self.name_character3.show()
                self.hp_character0.show()
                self.hp_character1.show()
                self.hp_character2.show()
                self.hp_character3.show()
                self.hp_edit_character0.show()
                self.hp_edit_character1.show()
                self.hp_edit_character2.show()
                self.hp_edit_character3.show()
                self.ac_character0.show()
                self.ac_character1.show()
                self.ac_character2.show()
                self.ac_character3.show()
                self.ac_edit_character0.show()
                self.ac_edit_character1.show()
                self.ac_edit_character2.show()
                self.ac_edit_character3.show()
                self.initiative_character0.show()
                self.initiative_character1.show()
                self.initiative_character2.show()
                self.initiative_character3.show()
                self.initiative_edit_character0.show()
                self.initiative_edit_character1.show()
                self.initiative_edit_character2.show()
                self.initiative_edit_character3.show()
                self.label_lock_init_char_0.hide()
                self.label_lock_init_char_1.hide()
                self.label_lock_init_char_2.hide()
                self.label_lock_init_char_3.hide()
                self.label_lock_ac_char_0.hide()
                self.label_lock_ac_char_1.hide()
                self.label_lock_ac_char_2.hide()
                self.label_lock_ac_char_3.hide()
                self.checkBox_hide_spell_slot_char_0.show()
                self.checkBox_hide_spell_slot_char_1.show()
                self.checkBox_hide_spell_slot_char_2.show()
                self.checkBox_hide_spell_slot_char_3.show()
                self.spell_slot_label_traker_char0.show()
                self.spell_slot_label_traker_char1.show()
                self.spell_slot_label_traker_char2.show()
                self.spell_slot_label_traker_char3.show()
                if self.check_char_0 is False:
                    self.spin_spell_slot_character0.show()
                    self.spin_spell_slot_character0_2.show()
                    self.spin_spell_slot_character0_3.show()
                    self.spin_spell_slot_character0_4.show()
                    self.spin_spell_slot_character0_5.show()
                    self.spin_spell_slot_character0_6.show()
                    self.spin_spell_slot_character0_7.show()
                    self.spin_spell_slot_character0_8.show()
                    self.spin_spell_slot_character0_9.show()

                    self.label_spell_slot_character0.show()
                    self.label_spell_slot_character0_2.show()
                    self.label_spell_slot_character0_3.show()
                    self.label_spell_slot_character0_4.show()
                    self.label_spell_slot_character0_5.show()
                    self.label_spell_slot_character0_6.show()
                    self.label_spell_slot_character0_7.show()
                    self.label_spell_slot_character0_8.show()
                    self.label_spell_slot_character0_9.show()

                    self.pushButton_restore_spell_slots_0.show()
                    self.pushButton_set_spell_slots_0.show()
                else:
                    pass
                if self.check_char_1 is False:
                    self.spin_spell_slot_character1.show()
                    self.spin_spell_slot_character1_2.show()
                    self.spin_spell_slot_character1_3.show()
                    self.spin_spell_slot_character1_4.show()
                    self.spin_spell_slot_character1_5.show()
                    self.spin_spell_slot_character1_6.show()
                    self.spin_spell_slot_character1_7.show()
                    self.spin_spell_slot_character1_8.show()
                    self.spin_spell_slot_character1_9.show()

                    self.label_spell_slot_character0_10.show()
                    self.label_spell_slot_character0_11.show()
                    self.label_spell_slot_character0_12.show()
                    self.label_spell_slot_character0_13.show()
                    self.label_spell_slot_character0_14.show()
                    self.label_spell_slot_character0_15.show()
                    self.label_spell_slot_character0_16.show()
                    self.label_spell_slot_character0_17.show()
                    self.label_spell_slot_character0_18.show()

                    self.pushButton_restore_spell_slots_1.show()
                    self.pushButton_set_spell_slots_1.show()
                else:
                    pass
                if self.check_char_2 is False:
                    self.spin_spell_slot_character2.show()
                    self.spin_spell_slot_character2_2.show()
                    self.spin_spell_slot_character2_3.show()
                    self.spin_spell_slot_character2_4.show()
                    self.spin_spell_slot_character2_5.show()
                    self.spin_spell_slot_character2_6.show()
                    self.spin_spell_slot_character2_7.show()
                    self.spin_spell_slot_character2_8.show()
                    self.spin_spell_slot_character2_9.show()

                    self.label_spell_slot_character0_19.show()
                    self.label_spell_slot_character0_20.show()
                    self.label_spell_slot_character0_21.show()
                    self.label_spell_slot_character0_22.show()
                    self.label_spell_slot_character0_23.show()
                    self.label_spell_slot_character0_24.show()
                    self.label_spell_slot_character0_25.show()
                    self.label_spell_slot_character0_26.show()
                    self.label_spell_slot_character0_27.show()

                    self.pushButton_restore_spell_slots_2.show()
                    self.pushButton_set_spell_slots_2.show()
                else:
                    pass
                if self.check_char_3 is False:
                    self.spin_spell_slot_character3.show()
                    self.spin_spell_slot_character3_2.show()
                    self.spin_spell_slot_character3_3.show()
                    self.spin_spell_slot_character3_4.show()
                    self.spin_spell_slot_character3_5.show()
                    self.spin_spell_slot_character3_6.show()
                    self.spin_spell_slot_character3_7.show()
                    self.spin_spell_slot_character3_8.show()
                    self.spin_spell_slot_character3_9.show()


                    self.label_spell_slot_character0_28.show()
                    self.label_spell_slot_character0_29.show()
                    self.label_spell_slot_character0_30.show()
                    self.label_spell_slot_character0_31.show()
                    self.label_spell_slot_character0_32.show()
                    self.label_spell_slot_character0_33.show()
                    self.label_spell_slot_character0_34.show()
                    self.label_spell_slot_character0_35.show()
                    self.label_spell_slot_character0_36.show()

                    self.pushButton_restore_spell_slots_3.show()
                    self.pushButton_set_spell_slots_3.show()
                else:
                    pass
                self.label_lock_init_char_0.show()
                self.label_lock_init_char_1.show()
                self.label_lock_init_char_2.show()
                self.label_lock_init_char_3.show()
                self.label_lock_ac_char_0.show()
                self.label_lock_ac_char_1.show()
                self.label_lock_ac_char_2.show()
                self.label_lock_ac_char_3.show()
                self.textEdit_char_0.show()
                self.textEdit_char_1.show()
                self.textEdit_char_2.show()
                self.textEdit_char_3.show()

                self.checkBox_lock_init.show()
                self.checkBox_lock_ac.show()

                if self.check_checkbox_init is False:
                    self.label_lock_init_char_0.hide()
                    self.label_lock_init_char_1.hide()
                    self.label_lock_init_char_2.hide()
                    self.label_lock_init_char_3.hide()
                else:
                    self.initiative_edit_character0.hide()
                    self.initiative_edit_character1.hide()
                    self.initiative_edit_character2.hide()
                    self.initiative_edit_character3.hide()

                if self.check_checkbox_ac is False:
                    self.label_lock_ac_char_0.hide()
                    self.label_lock_ac_char_1.hide()
                    self.label_lock_ac_char_2.hide()
                    self.label_lock_ac_char_3.hide()
                else:
                    self.ac_edit_character0.hide()
                    self.ac_edit_character1.hide()
                    self.ac_edit_character2.hide()
                    self.ac_edit_character3.hide()



                self.name.hide()
                self.name_edit.hide()
                self.hp.hide()
                self.hp_edit.hide()
                self.ac.hide()
                self.ac_edit.hide()
                self.initiative.hide()
                self.initiative_edit.hide()
                self.pushButton.hide()
                self.label.hide()
                self.spell_slot.hide()
                self.label_spell_slot.hide()
                self.label_spell_slot_2.hide()
                self.label_spell_slot_3.hide()
                self.label_spell_slot_4.hide()
                self.label_spell_slot_5.hide()
                self.label_spell_slot_6.hide()
                self.label_spell_slot_7.hide()
                self.label_spell_slot_8.hide()
                self.label_spell_slot_9.hide()
                self.spell_slot_edit.hide()
                self.spell_slot_edit_2.hide()
                self.spell_slot_edit_3.hide()
                self.spell_slot_edit_4.hide()
                self.spell_slot_edit_5.hide()
                self.spell_slot_edit_6.hide()
                self.spell_slot_edit_7.hide()
                self.spell_slot_edit_8.hide()
                self.spell_slot_edit_9.hide()

            else:
                self.pushButton_init_open.hide()
                self.dice_edit.hide()
                self.amount_dice_box.hide()
                self.modifier_box.hide()
                self.label_amount.hide()
                self.label_dice.hide()
                self.label_modifier.hide()
                self.label_roll_dice.hide()
                self.label_amount.hide()
                self.label_roll_dice.hide()
                self.check_advantage.hide()
                self.pushButton_roll_dice.hide()
                self.label_del_char.hide()
                self.comboBox_del_char.hide()
                self.pushButton_del_char.hide()
                self.name_character0.hide()
                self.name_character1.hide()
                self.name_character2.hide()
                self.name_character3.hide()
                self.hp_character0.hide()
                self.hp_character1.hide()
                self.hp_character2.hide()
                self.hp_character3.hide()
                self.hp_edit_character0.hide()
                self.hp_edit_character1.hide()
                self.hp_edit_character2.hide()
                self.hp_edit_character3.hide()
                self.ac_character0.hide()
                self.ac_character1.hide()
                self.ac_character2.hide()
                self.ac_character3.hide()
                self.ac_edit_character0.hide()
                self.ac_edit_character1.hide()
                self.ac_edit_character2.hide()
                self.ac_edit_character3.hide()
                self.initiative_character0.hide()
                self.initiative_character1.hide()
                self.initiative_character2.hide()
                self.initiative_character3.hide()
                self.initiative_edit_character0.hide()
                self.initiative_edit_character1.hide()
                self.initiative_edit_character2.hide()
                self.initiative_edit_character3.hide()

                self.label_lock_init_char_0.show()
                self.label_lock_init_char_1.show()
                self.label_lock_init_char_2.show()
                self.label_lock_init_char_3.show()
                self.label_lock_ac_char_0.show()
                self.label_lock_ac_char_1.show()
                self.label_lock_ac_char_2.show()
                self.label_lock_ac_char_3.show()

                self.checkBox_hide_spell_slot_char_0.hide()
                self.checkBox_hide_spell_slot_char_1.hide()
                self.checkBox_hide_spell_slot_char_2.hide()
                self.checkBox_hide_spell_slot_char_3.hide()
                self.label_spell_slot_character0.hide()
                self.label_spell_slot_character0_2.hide()
                self.label_spell_slot_character0_3.hide()
                self.label_spell_slot_character0_4.hide()
                self.label_spell_slot_character0_5.hide()
                self.label_spell_slot_character0_6.hide()
                self.label_spell_slot_character0_7.hide()
                self.label_spell_slot_character0_8.hide()
                self.label_spell_slot_character0_9.hide()
                self.spell_slot_label_traker_char0.hide()
                self.label_spell_slot_character0_10.hide()
                self.spell_slot_label_traker_char1.hide()
                self.label_spell_slot_character0_11.hide()
                self.label_spell_slot_character0_12.hide()
                self.label_spell_slot_character0_13.hide()
                self.label_spell_slot_character0_14.hide()
                self.label_spell_slot_character0_15.hide()
                self.label_spell_slot_character0_16.hide()
                self.label_spell_slot_character0_17.hide()
                self.label_spell_slot_character0_18.hide()
                self.label_spell_slot_character0_19.hide()
                self.label_spell_slot_character0_20.hide()
                self.label_spell_slot_character0_21.hide()
                self.spell_slot_label_traker_char2.hide()
                self.label_spell_slot_character0_22.hide()
                self.label_spell_slot_character0_23.hide()
                self.label_spell_slot_character0_24.hide()
                self.label_spell_slot_character0_25.hide()
                self.label_spell_slot_character0_26.hide()
                self.label_spell_slot_character0_27.hide()
                self.label_spell_slot_character0_28.hide()
                self.label_spell_slot_character0_29.hide()
                self.label_spell_slot_character0_30.hide()
                self.spell_slot_label_traker_char3.hide()
                self.label_spell_slot_character0_31.hide()
                self.label_spell_slot_character0_32.hide()
                self.label_spell_slot_character0_33.hide()
                self.label_spell_slot_character0_34.hide()
                self.label_spell_slot_character0_35.hide()
                self.label_spell_slot_character0_36.hide()
                self.spin_spell_slot_character0.hide()
                self.spin_spell_slot_character0_2.hide()
                self.spin_spell_slot_character0_3.hide()
                self.spin_spell_slot_character0_4.hide()
                self.spin_spell_slot_character0_5.hide()
                self.spin_spell_slot_character0_6.hide()
                self.spin_spell_slot_character0_7.hide()
                self.spin_spell_slot_character0_8.hide()
                self.spin_spell_slot_character0_9.hide()
                self.spin_spell_slot_character1.hide()
                self.spin_spell_slot_character1_2.hide()
                self.spin_spell_slot_character1_3.hide()
                self.spin_spell_slot_character1_4.hide()
                self.spin_spell_slot_character1_5.hide()
                self.spin_spell_slot_character1_6.hide()
                self.spin_spell_slot_character1_7.hide()
                self.spin_spell_slot_character1_8.hide()
                self.spin_spell_slot_character1_9.hide()
                self.spin_spell_slot_character2.hide()
                self.spin_spell_slot_character2_2.hide()
                self.spin_spell_slot_character2_3.hide()
                self.spin_spell_slot_character2_4.hide()
                self.spin_spell_slot_character2_5.hide()
                self.spin_spell_slot_character2_6.hide()
                self.spin_spell_slot_character2_7.hide()
                self.spin_spell_slot_character2_8.hide()
                self.spin_spell_slot_character2_9.hide()
                self.spin_spell_slot_character3.hide()
                self.spin_spell_slot_character3_2.hide()
                self.spin_spell_slot_character3_3.hide()
                self.spin_spell_slot_character3_4.hide()
                self.spin_spell_slot_character3_5.hide()
                self.spin_spell_slot_character3_6.hide()
                self.spin_spell_slot_character3_7.hide()
                self.spin_spell_slot_character3_8.hide()
                self.spin_spell_slot_character3_9.hide()
                self.pushButton_restore_spell_slots_0.hide()
                self.pushButton_restore_spell_slots_1.hide()
                self.pushButton_restore_spell_slots_2.hide()
                self.pushButton_restore_spell_slots_3.hide()
                self.pushButton_set_spell_slots_0.hide()
                self.pushButton_set_spell_slots_1.hide()
                self.pushButton_set_spell_slots_2.hide()
                self.pushButton_set_spell_slots_3.hide()
                self.label_lock_init_char_0.hide()
                self.label_lock_init_char_1.hide()
                self.label_lock_init_char_2.hide()
                self.label_lock_init_char_3.hide()
                self.label_lock_ac_char_0.hide()
                self.label_lock_ac_char_1.hide()
                self.label_lock_ac_char_2.hide()
                self.label_lock_ac_char_3.hide()
                self.textEdit_char_0.hide()
                self.textEdit_char_1.hide()
                self.textEdit_char_2.hide()
                self.textEdit_char_3.hide()

                self.checkBox_lock_init.hide()
                self.checkBox_lock_ac.hide()


                self.name.show()
                self.name_edit.show()
                self.hp.show()
                self.hp_edit.show()
                self.ac.show()
                self.ac_edit.show()
                self.initiative.show()
                self.initiative_edit.show()
                self.pushButton.show()
                self.label.show()
                self.spell_slot.show()
                self.label_spell_slot.show()
                self.label_spell_slot_2.show()
                self.label_spell_slot_3.show()
                self.label_spell_slot_4.show()
                self.label_spell_slot_5.show()
                self.label_spell_slot_6.show()
                self.label_spell_slot_7.show()
                self.label_spell_slot_8.show()
                self.label_spell_slot_9.show()
                self.spell_slot_edit.show()
                self.spell_slot_edit_2.show()
                self.spell_slot_edit_3.show()
                self.spell_slot_edit_4.show()
                self.spell_slot_edit_5.show()
                self.spell_slot_edit_6.show()
                self.spell_slot_edit_7.show()
                self.spell_slot_edit_8.show()
                self.spell_slot_edit_9.show()
            logger.info("hide_create")

        '''
        Main window show
        '''

        def open_init_calc(self):
            self.result_widget = InitiativeWindow(hero, dict_preset)
            self.result_widget.show()
            logger.info("open_init_calc")

        def roll_dice(self):
            '''
            DOCKSTRING: рандом кубика(числа) и вывод в окно
            '''
            check_advantage = self.check_advantage.isChecked()
            try:
                dice = int(self.dice_edit.text())
                amount = int(self.amount_dice_box.text())
                modifier = int(self.modifier_box.text())
                value = 0
                for roll in range(amount):
                    value += random.randint(1, dice) + modifier
                if check_advantage is False:
                    self.label_roll_dice.setText(str(value))
                else:
                    value_advantege = 0
                    for roll in range(amount):
                        value_advantege += random.randint(1, dice) + modifier
                    self.label_roll_dice.setText(str(value) + ' ' + str(value_advantege))
                logger.info("roll_dice")

            except ValueError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Не корректный ввод данных')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("roll_dice. except")

        def add_to_del_char_box(self):
            self.comboBox_del_char.clear()
            for i in hero:
                self.comboBox_del_char.addItem(hero[i]['name'])
            logger.info("add_to_del_char_box")

        def del_char(self):
            name_delete = ''
            try:
                for i in hero:
                    if self.comboBox_del_char.currentText() == hero[i]['name']:
                        name_delete = str(i)
                self.comboBox_del_char.removeItem(self.comboBox_del_char.currentIndex())
                hero.pop(name_delete)
                logger.info(f"del_char, {hero}")
                self.add_to_tracker()

            except KeyError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Поле пустое, либо этого персонажа уже нет!')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info(f"del_char. except")

        def lock_initiative(self, val_init):
            '''
            DOCKSTRING: Вывод вместо lineEdit, Label со значением initiative
            '''
            if val_init:
                if len(hero) != 0:
                    if 'character0' in hero.keys():
                        self.label_lock_init_char_0.show()
                        self.initiative_edit_character0.hide()
                        self.label_lock_init_char_0.setText(hero["character0"]['initiative'])

                    if 'character1' in hero.keys():
                        self.label_lock_init_char_1.show()
                        self.initiative_edit_character1.hide()
                        self.label_lock_init_char_1.setText(hero["character1"]['initiative'])

                    if 'character2' in hero.keys():
                        self.label_lock_init_char_2.show()
                        self.initiative_edit_character2.hide()
                        self.label_lock_init_char_2.setText(hero["character2"]['initiative'])

                    if 'character3' in hero.keys():
                        self.label_lock_init_char_3.show()
                        self.initiative_edit_character3.hide()
                        self.label_lock_init_char_3.setText(hero["character3"]['initiative'])
            else:
                self.label_lock_init_char_0.hide()
                self.label_lock_init_char_1.hide()
                self.label_lock_init_char_2.hide()
                self.label_lock_init_char_3.hide()

                self.initiative_edit_character0.show()
                self.initiative_edit_character1.show()
                self.initiative_edit_character2.show()
                self.initiative_edit_character3.show()
            logger.info("lock_initiative")

        def lock_ac(self, val_ac):
            '''
            DOCKSTRING: Вывод вместо lineEdit, Label со значением ac
            '''
            if val_ac:
                if len(hero) != 0:
                    if 'character0' in hero.keys():
                        self.label_lock_ac_char_0.show()
                        self.ac_edit_character0.hide()
                        self.label_lock_ac_char_0.setText(hero["character0"]['ac'])

                    if 'character1' in hero.keys():
                        self.label_lock_ac_char_1.show()
                        self.ac_edit_character1.hide()
                        self.label_lock_ac_char_1.setText(hero["character1"]['ac'])

                    if 'character2' in hero.keys():
                        self.label_lock_ac_char_2.show()
                        self.ac_edit_character2.hide()
                        self.label_lock_ac_char_2.setText(hero["character2"]['ac'])

                    if 'character3' in hero.keys():
                        self.label_lock_ac_char_3.show()
                        self.ac_edit_character3.hide()
                        self.label_lock_ac_char_3.setText(hero["character3"]['ac'])
            else:
                self.label_lock_ac_char_0.hide()
                self.label_lock_ac_char_1.hide()
                self.label_lock_ac_char_2.hide()
                self.label_lock_ac_char_3.hide()

                self.ac_edit_character0.show()
                self.ac_edit_character1.show()
                self.ac_edit_character2.show()
                self.ac_edit_character3.show()
            logger.info("lock_ac")

        def hide_spell_slot_char_0(self):
            self.check_char_0 = self.checkBox_hide_spell_slot_char_0.isChecked()
            if self.check_char_0:
                self.label_spell_slot_character0.hide()
                self.label_spell_slot_character0_2.hide()
                self.label_spell_slot_character0_3.hide()
                self.label_spell_slot_character0_4.hide()
                self.label_spell_slot_character0_5.hide()
                self.label_spell_slot_character0_6.hide()
                self.label_spell_slot_character0_7.hide()
                self.label_spell_slot_character0_8.hide()
                self.label_spell_slot_character0_9.hide()
                self.spin_spell_slot_character0.hide()
                self.spin_spell_slot_character0_2.hide()
                self.spin_spell_slot_character0_3.hide()
                self.spin_spell_slot_character0_4.hide()
                self.spin_spell_slot_character0_5.hide()
                self.spin_spell_slot_character0_6.hide()
                self.spin_spell_slot_character0_7.hide()
                self.spin_spell_slot_character0_8.hide()
                self.spin_spell_slot_character0_9.hide()

                self.pushButton_restore_spell_slots_0.hide()
                self.pushButton_set_spell_slots_0.hide()

                self.initiative_character0.setGeometry(QtCore.QRect(160, 110, 61, 25))
                self.initiative_edit_character0.setGeometry(QtCore.QRect(230, 110, 51, 25))
                self.label_lock_init_char_0.setGeometry(QtCore.QRect(230, 110, 51, 25))
                self.textEdit_char_0.setGeometry(QtCore.QRect(160, 150, 120, 210))
            else:
                self.label_spell_slot_character0.show()
                self.label_spell_slot_character0_2.show()
                self.label_spell_slot_character0_3.show()
                self.label_spell_slot_character0_4.show()
                self.label_spell_slot_character0_5.show()
                self.label_spell_slot_character0_6.show()
                self.label_spell_slot_character0_7.show()
                self.label_spell_slot_character0_8.show()
                self.label_spell_slot_character0_9.show()
                self.spin_spell_slot_character0.show()
                self.spin_spell_slot_character0_2.show()
                self.spin_spell_slot_character0_3.show()
                self.spin_spell_slot_character0_4.show()
                self.spin_spell_slot_character0_5.show()
                self.spin_spell_slot_character0_6.show()
                self.spin_spell_slot_character0_7.show()
                self.spin_spell_slot_character0_8.show()
                self.spin_spell_slot_character0_9.show()

                self.pushButton_restore_spell_slots_0.show()
                self.pushButton_set_spell_slots_0.show()

                self.initiative_character0.setGeometry(QtCore.QRect(160, 260, 61, 25))
                self.initiative_edit_character0.setGeometry(QtCore.QRect(230, 260, 51, 25))
                self.label_lock_init_char_0.setGeometry(QtCore.QRect(230, 260, 51, 25))
                self.textEdit_char_0.setGeometry(QtCore.QRect(160, 290, 120, 70))
            logger.info("hide_spell_slot_char_0")

        def hide_spell_slot_char_1(self):
            self.check_char_1 = self.checkBox_hide_spell_slot_char_1.isChecked()
            if self.check_char_1:
                self.label_spell_slot_character0_10.hide()
                self.label_spell_slot_character0_11.hide()
                self.label_spell_slot_character0_12.hide()
                self.label_spell_slot_character0_13.hide()
                self.label_spell_slot_character0_14.hide()
                self.label_spell_slot_character0_15.hide()
                self.label_spell_slot_character0_16.hide()
                self.label_spell_slot_character0_17.hide()
                self.label_spell_slot_character0_18.hide()
                self.spin_spell_slot_character1.hide()
                self.spin_spell_slot_character1_2.hide()
                self.spin_spell_slot_character1_3.hide()
                self.spin_spell_slot_character1_4.hide()
                self.spin_spell_slot_character1_5.hide()
                self.spin_spell_slot_character1_6.hide()
                self.spin_spell_slot_character1_7.hide()
                self.spin_spell_slot_character1_8.hide()
                self.spin_spell_slot_character1_9.hide()

                self.pushButton_restore_spell_slots_1.hide()
                self.pushButton_set_spell_slots_1.hide()

                self.initiative_character1.setGeometry(QtCore.QRect(320, 110, 61, 25))
                self.initiative_edit_character1.setGeometry(QtCore.QRect(390, 110, 51, 25))
                self.label_lock_init_char_1.setGeometry(QtCore.QRect(390, 110, 51, 25))
                self.textEdit_char_1.setGeometry(QtCore.QRect(320, 150, 120, 210))
            else:
                self.label_spell_slot_character0_10.show()
                self.label_spell_slot_character0_11.show()
                self.label_spell_slot_character0_12.show()
                self.label_spell_slot_character0_13.show()
                self.label_spell_slot_character0_14.show()
                self.label_spell_slot_character0_15.show()
                self.label_spell_slot_character0_16.show()
                self.label_spell_slot_character0_17.show()
                self.label_spell_slot_character0_18.show()
                self.spin_spell_slot_character1.show()
                self.spin_spell_slot_character1_2.show()
                self.spin_spell_slot_character1_3.show()
                self.spin_spell_slot_character1_4.show()
                self.spin_spell_slot_character1_5.show()
                self.spin_spell_slot_character1_6.show()
                self.spin_spell_slot_character1_7.show()
                self.spin_spell_slot_character1_8.show()
                self.spin_spell_slot_character1_9.show()

                self.pushButton_restore_spell_slots_1.show()
                self.pushButton_set_spell_slots_1.show()

                self.initiative_character1.setGeometry(QtCore.QRect(320, 260, 61, 25))
                self.initiative_edit_character1.setGeometry(QtCore.QRect(390, 260, 51, 25))
                self.label_lock_init_char_1.setGeometry(QtCore.QRect(390, 260, 51, 25))
                self.textEdit_char_1.setGeometry(QtCore.QRect(320, 290, 120, 70))
            logger.info("hide_spell_slot_char_1")

        def hide_spell_slot_char_2(self):
            self.check_char_2 = self.checkBox_hide_spell_slot_char_2.isChecked()
            if self.check_char_2:
                self.label_spell_slot_character0_19.hide()
                self.label_spell_slot_character0_20.hide()
                self.label_spell_slot_character0_21.hide()
                self.label_spell_slot_character0_22.hide()
                self.label_spell_slot_character0_23.hide()
                self.label_spell_slot_character0_24.hide()
                self.label_spell_slot_character0_25.hide()
                self.label_spell_slot_character0_26.hide()
                self.label_spell_slot_character0_27.hide()
                self.spin_spell_slot_character2.hide()
                self.spin_spell_slot_character2_2.hide()
                self.spin_spell_slot_character2_3.hide()
                self.spin_spell_slot_character2_4.hide()
                self.spin_spell_slot_character2_5.hide()
                self.spin_spell_slot_character2_6.hide()
                self.spin_spell_slot_character2_7.hide()
                self.spin_spell_slot_character2_8.hide()
                self.spin_spell_slot_character2_9.hide()

                self.pushButton_restore_spell_slots_2.hide()
                self.pushButton_set_spell_slots_2.hide()

                self.initiative_character2.setGeometry(QtCore.QRect(480, 110, 61, 25))
                self.initiative_edit_character2.setGeometry(QtCore.QRect(550, 110, 51, 25))
                self.label_lock_init_char_2.setGeometry(QtCore.QRect(550, 110, 51, 25))
                self.textEdit_char_2.setGeometry(QtCore.QRect(480, 150, 120, 210))
            else:
                self.label_spell_slot_character0_19.show()
                self.label_spell_slot_character0_20.show()
                self.label_spell_slot_character0_21.show()
                self.label_spell_slot_character0_22.show()
                self.label_spell_slot_character0_23.show()
                self.label_spell_slot_character0_24.show()
                self.label_spell_slot_character0_25.show()
                self.label_spell_slot_character0_26.show()
                self.label_spell_slot_character0_27.show()
                self.spin_spell_slot_character2.show()
                self.spin_spell_slot_character2_2.show()
                self.spin_spell_slot_character2_3.show()
                self.spin_spell_slot_character2_4.show()
                self.spin_spell_slot_character2_5.show()
                self.spin_spell_slot_character2_6.show()
                self.spin_spell_slot_character2_7.show()
                self.spin_spell_slot_character2_8.show()
                self.spin_spell_slot_character2_9.show()

                self.pushButton_restore_spell_slots_2.show()
                self.pushButton_set_spell_slots_2.show()

                self.initiative_character2.setGeometry(QtCore.QRect(480, 260, 61, 25))
                self.initiative_edit_character2.setGeometry(QtCore.QRect(550, 260, 51, 25))
                self.label_lock_init_char_2.setGeometry(QtCore.QRect(550, 260, 51, 25))
                self.textEdit_char_2.setGeometry(QtCore.QRect(480, 290, 120, 70))
            logger.info("hide_spell_slot_char_2")

        def hide_spell_slot_char_3(self):
            self.check_char_3 = self.checkBox_hide_spell_slot_char_3.isChecked()
            if self.check_char_3:
                self.label_spell_slot_character0_28.hide()
                self.label_spell_slot_character0_29.hide()
                self.label_spell_slot_character0_30.hide()
                self.label_spell_slot_character0_31.hide()
                self.label_spell_slot_character0_32.hide()
                self.label_spell_slot_character0_33.hide()
                self.label_spell_slot_character0_34.hide()
                self.label_spell_slot_character0_35.hide()
                self.label_spell_slot_character0_36.hide()
                self.spin_spell_slot_character3.hide()
                self.spin_spell_slot_character3_2.hide()
                self.spin_spell_slot_character3_3.hide()
                self.spin_spell_slot_character3_4.hide()
                self.spin_spell_slot_character3_5.hide()
                self.spin_spell_slot_character3_6.hide()
                self.spin_spell_slot_character3_7.hide()
                self.spin_spell_slot_character3_8.hide()
                self.spin_spell_slot_character3_9.hide()

                self.pushButton_restore_spell_slots_3.hide()
                self.pushButton_set_spell_slots_3.hide()

                self.initiative_character3.setGeometry(QtCore.QRect(640, 110, 61, 25))
                self.initiative_edit_character3.setGeometry(QtCore.QRect(710, 110, 51, 25))
                self.label_lock_init_char_3.setGeometry(QtCore.QRect(710, 110, 51, 25))
                self.textEdit_char_3.setGeometry(QtCore.QRect(640, 150, 120, 210))
            else:
                self.label_spell_slot_character0_28.show()
                self.label_spell_slot_character0_29.show()
                self.label_spell_slot_character0_30.show()
                self.label_spell_slot_character0_31.show()
                self.label_spell_slot_character0_32.show()
                self.label_spell_slot_character0_33.show()
                self.label_spell_slot_character0_34.show()
                self.label_spell_slot_character0_35.show()
                self.label_spell_slot_character0_36.show()
                self.spin_spell_slot_character3.show()
                self.spin_spell_slot_character3_2.show()
                self.spin_spell_slot_character3_3.show()
                self.spin_spell_slot_character3_4.show()
                self.spin_spell_slot_character3_5.show()
                self.spin_spell_slot_character3_6.show()
                self.spin_spell_slot_character3_7.show()
                self.spin_spell_slot_character3_8.show()
                self.spin_spell_slot_character3_9.show()

                self.pushButton_restore_spell_slots_3.show()
                self.pushButton_set_spell_slots_3.show()

                self.initiative_character3.setGeometry(QtCore.QRect(640, 260, 61, 25))
                self.initiative_edit_character3.setGeometry(QtCore.QRect(710, 260, 51, 25))
                self.label_lock_init_char_3.setGeometry(QtCore.QRect(710, 260, 51, 25))
                self.textEdit_char_3.setGeometry(QtCore.QRect(640, 290, 120, 70))
            logger.info("hide_spell_slot_char_3")


        def add_to_tracker(self):
            '''
            DOCKSTRING: добавление созданых персонажей в трекер и отключение полей несуществующий персонажей
            '''
            self.initiative_edit_character0.setText('')
            self.initiative_edit_character1.setText('')
            self.initiative_edit_character2.setText('')
            self.initiative_edit_character3.setText('')
            self.hp_edit_character0.setText('')
            self.hp_edit_character1.setText('')
            self.hp_edit_character2.setText('')
            self.hp_edit_character3.setText('')
            self.ac_edit_character0.setText('')
            self.ac_edit_character1.setText('')
            self.ac_edit_character2.setText('')
            self.ac_edit_character3.setText('')
            self.name_character0.setText('')
            self.name_character1.setText('')
            self.name_character2.setText('')
            self.name_character3.setText('')
            self.spin_spell_slot_character0.setValue(0)
            self.spin_spell_slot_character0_2.setValue(0)
            self.spin_spell_slot_character0_3.setValue(0)
            self.spin_spell_slot_character0_4.setValue(0)
            self.spin_spell_slot_character0_5.setValue(0)
            self.spin_spell_slot_character0_6.setValue(0)
            self.spin_spell_slot_character0_7.setValue(0)
            self.spin_spell_slot_character0_8.setValue(0)
            self.spin_spell_slot_character0_9.setValue(0)
            self.spin_spell_slot_character1.setValue(0)
            self.spin_spell_slot_character1_2.setValue(0)
            self.spin_spell_slot_character1_3.setValue(0)
            self.spin_spell_slot_character1_4.setValue(0)
            self.spin_spell_slot_character1_5.setValue(0)
            self.spin_spell_slot_character1_6.setValue(0)
            self.spin_spell_slot_character1_7.setValue(0)
            self.spin_spell_slot_character1_8.setValue(0)
            self.spin_spell_slot_character1_9.setValue(0)
            self.spin_spell_slot_character2.setValue(0)
            self.spin_spell_slot_character2_2.setValue(0)
            self.spin_spell_slot_character2_3.setValue(0)
            self.spin_spell_slot_character2_4.setValue(0)
            self.spin_spell_slot_character2_5.setValue(0)
            self.spin_spell_slot_character2_6.setValue(0)
            self.spin_spell_slot_character2_7.setValue(0)
            self.spin_spell_slot_character2_8.setValue(0)
            self.spin_spell_slot_character2_9.setValue(0)
            self.spin_spell_slot_character3.setValue(0)
            self.spin_spell_slot_character3_2.setValue(0)
            self.spin_spell_slot_character3_3.setValue(0)
            self.spin_spell_slot_character3_4.setValue(0)
            self.spin_spell_slot_character3_5.setValue(0)
            self.spin_spell_slot_character3_6.setValue(0)
            self.spin_spell_slot_character3_7.setValue(0)
            self.spin_spell_slot_character3_8.setValue(0)
            self.spin_spell_slot_character3_9.setValue(0)
            if 'character0' in hero.keys():
                self.name_character0.setDisabled(False)
                self.hp_edit_character0.setDisabled(False)
                self.ac_edit_character0.setDisabled(False)
                self.initiative_edit_character0.setDisabled(False)
                self.checkBox_hide_spell_slot_char_0.setDisabled(False)
                self.spin_spell_slot_character0.setDisabled(False)
                self.spin_spell_slot_character0.setDisabled(False)
                self.spin_spell_slot_character0_2.setDisabled(False)
                self.spin_spell_slot_character0_3.setDisabled(False)
                self.spin_spell_slot_character0_4.setDisabled(False)
                self.spin_spell_slot_character0_5.setDisabled(False)
                self.spin_spell_slot_character0_6.setDisabled(False)
                self.spin_spell_slot_character0_7.setDisabled(False)
                self.spin_spell_slot_character0_8.setDisabled(False)
                self.spin_spell_slot_character0_9.setDisabled(False)
                self.pushButton_restore_spell_slots_0.setDisabled(False)
                self.pushButton_set_spell_slots_0.setDisabled(False)
                self.textEdit_char_0.setDisabled(False)

                self.name_character0.setText(hero['character0']['name'])
                self.hp_edit_character0.setText(hero['character0']['hp'])
                self.ac_edit_character0.setText(hero['character0']['ac'])
                self.initiative_edit_character0.setText(hero['character0']['initiative'])
                self.spin_spell_slot_character0.setValue(int(hero['character0']['1']))
                self.spin_spell_slot_character0_2.setValue(int(hero['character0']['2']))
                self.spin_spell_slot_character0_3.setValue(int(hero['character0']['3']))
                self.spin_spell_slot_character0_4.setValue(int(hero['character0']['4']))
                self.spin_spell_slot_character0_5.setValue(int(hero['character0']['5']))
                self.spin_spell_slot_character0_6.setValue(int(hero['character0']['6']))
                self.spin_spell_slot_character0_7.setValue(int(hero['character0']['7']))
                self.spin_spell_slot_character0_8.setValue(int(hero['character0']['8']))
                self.spin_spell_slot_character0_9.setValue(int(hero['character0']['9']))
            else:
                self.name_character0.setDisabled(True)
                self.hp_edit_character0.setDisabled(True)
                self.ac_edit_character0.setDisabled(True)
                self.checkBox_hide_spell_slot_char_0.setDisabled(True)
                self.initiative_edit_character0.setDisabled(True)
                self.spin_spell_slot_character0.setDisabled(True)
                self.spin_spell_slot_character0.setDisabled(True)
                self.spin_spell_slot_character0_2.setDisabled(True)
                self.spin_spell_slot_character0_3.setDisabled(True)
                self.spin_spell_slot_character0_4.setDisabled(True)
                self.spin_spell_slot_character0_5.setDisabled(True)
                self.spin_spell_slot_character0_6.setDisabled(True)
                self.spin_spell_slot_character0_7.setDisabled(True)
                self.spin_spell_slot_character0_8.setDisabled(True)
                self.spin_spell_slot_character0_9.setDisabled(True)
                self.pushButton_restore_spell_slots_0.setDisabled(True)
                self.pushButton_set_spell_slots_0.setDisabled(True)
                self.textEdit_char_0.setDisabled(True)

            if 'character1' in hero.keys():
                self.name_character1.setDisabled(False)
                self.hp_edit_character1.setDisabled(False)
                self.ac_edit_character1.setDisabled(False)
                self.checkBox_hide_spell_slot_char_1.setDisabled(False)
                self.initiative_edit_character1.setDisabled(False)
                self.spin_spell_slot_character1.setDisabled(False)
                self.spin_spell_slot_character1_2.setDisabled(False)
                self.spin_spell_slot_character1_3.setDisabled(False)
                self.spin_spell_slot_character1_4.setDisabled(False)
                self.spin_spell_slot_character1_5.setDisabled(False)
                self.spin_spell_slot_character1_6.setDisabled(False)
                self.spin_spell_slot_character1_7.setDisabled(False)
                self.spin_spell_slot_character1_8.setDisabled(False)
                self.spin_spell_slot_character1_9.setDisabled(False)
                self.pushButton_restore_spell_slots_1.setDisabled(False)
                self.pushButton_set_spell_slots_1.setDisabled(False)
                self.textEdit_char_1.setDisabled(False)

                self.name_character1.setText(hero['character1']['name'])
                self.hp_edit_character1.setText(hero['character1']['hp'])
                self.ac_edit_character1.setText(hero['character1']['ac'])
                self.initiative_edit_character1.setText(hero['character1']['initiative'])
                self.spin_spell_slot_character1.setValue(int(hero['character1']['1']))
                self.spin_spell_slot_character1_2.setValue(int(hero['character1']['2']))
                self.spin_spell_slot_character1_3.setValue(int(hero['character1']['3']))
                self.spin_spell_slot_character1_4.setValue(int(hero['character1']['4']))
                self.spin_spell_slot_character1_5.setValue(int(hero['character1']['5']))
                self.spin_spell_slot_character1_6.setValue(int(hero['character1']['6']))
                self.spin_spell_slot_character1_7.setValue(int(hero['character1']['7']))
                self.spin_spell_slot_character1_8.setValue(int(hero['character1']['8']))
                self.spin_spell_slot_character1_9.setValue(int(hero['character1']['9']))
            else:
                self.name_character1.setDisabled(True)
                self.hp_edit_character1.setDisabled(True)
                self.ac_edit_character1.setDisabled(True)
                self.checkBox_hide_spell_slot_char_1.setDisabled(True)
                self.initiative_edit_character1.setDisabled(True)
                self.spin_spell_slot_character1.setDisabled(True)
                self.spin_spell_slot_character1_2.setDisabled(True)
                self.spin_spell_slot_character1_3.setDisabled(True)
                self.spin_spell_slot_character1_4.setDisabled(True)
                self.spin_spell_slot_character1_5.setDisabled(True)
                self.spin_spell_slot_character1_6.setDisabled(True)
                self.spin_spell_slot_character1_7.setDisabled(True)
                self.spin_spell_slot_character1_8.setDisabled(True)
                self.spin_spell_slot_character1_9.setDisabled(True)
                self.pushButton_restore_spell_slots_1.setDisabled(True)
                self.pushButton_set_spell_slots_1.setDisabled(True)
                self.textEdit_char_1.setDisabled(True)

            if 'character2' in hero.keys():
                self.name_character2.setDisabled(False)
                self.hp_edit_character2.setDisabled(False)
                self.ac_edit_character2.setDisabled(False)
                self.checkBox_hide_spell_slot_char_2.setDisabled(False)
                self.initiative_edit_character2.setDisabled(False)
                self.spin_spell_slot_character2.setDisabled(False)
                self.spin_spell_slot_character2_2.setDisabled(False)
                self.spin_spell_slot_character2_3.setDisabled(False)
                self.spin_spell_slot_character2_4.setDisabled(False)
                self.spin_spell_slot_character2_5.setDisabled(False)
                self.spin_spell_slot_character2_6.setDisabled(False)
                self.spin_spell_slot_character2_7.setDisabled(False)
                self.spin_spell_slot_character2_8.setDisabled(False)
                self.spin_spell_slot_character2_9.setDisabled(False)
                self.pushButton_restore_spell_slots_2.setDisabled(False)
                self.pushButton_set_spell_slots_2.setDisabled(False)
                self.textEdit_char_2.setDisabled(False)

                self.name_character2.setText(hero['character2']['name'])
                self.hp_edit_character2.setText(hero['character2']['hp'])
                self.ac_edit_character2.setText(hero['character2']['ac'])
                self.initiative_edit_character2.setText(hero['character2']['initiative'])
                self.spin_spell_slot_character2.setValue(int(hero['character2']['1']))
                self.spin_spell_slot_character2_2.setValue(int(hero['character2']['2']))
                self.spin_spell_slot_character2_3.setValue(int(hero['character2']['3']))
                self.spin_spell_slot_character2_4.setValue(int(hero['character2']['4']))
                self.spin_spell_slot_character2_5.setValue(int(hero['character2']['5']))
                self.spin_spell_slot_character2_6.setValue(int(hero['character2']['6']))
                self.spin_spell_slot_character2_7.setValue(int(hero['character2']['7']))
                self.spin_spell_slot_character2_8.setValue(int(hero['character2']['8']))
                self.spin_spell_slot_character2_9.setValue(int(hero['character2']['9']))
            else:
                self.name_character2.setDisabled(True)
                self.hp_edit_character2.setDisabled(True)
                self.ac_edit_character2.setDisabled(True)
                self.checkBox_hide_spell_slot_char_2.setDisabled(True)
                self.initiative_edit_character2.setDisabled(True)
                self.spin_spell_slot_character2.setDisabled(True)
                self.spin_spell_slot_character2_2.setDisabled(True)
                self.spin_spell_slot_character2_3.setDisabled(True)
                self.spin_spell_slot_character2_4.setDisabled(True)
                self.spin_spell_slot_character2_5.setDisabled(True)
                self.spin_spell_slot_character2_6.setDisabled(True)
                self.spin_spell_slot_character2_7.setDisabled(True)
                self.spin_spell_slot_character2_8.setDisabled(True)
                self.spin_spell_slot_character2_9.setDisabled(True)
                self.pushButton_restore_spell_slots_2.setDisabled(True)
                self.pushButton_set_spell_slots_2.setDisabled(True)
                self.textEdit_char_2.setDisabled(True)

            if 'character3' in hero.keys():
                self.name_character3.setDisabled(False)
                self.hp_edit_character3.setDisabled(False)
                self.ac_edit_character3.setDisabled(False)
                self.checkBox_hide_spell_slot_char_3.setDisabled(False)
                self.initiative_edit_character3.setDisabled(False)
                self.spin_spell_slot_character3.setDisabled(False)
                self.spin_spell_slot_character3_2.setDisabled(False)
                self.spin_spell_slot_character3_3.setDisabled(False)
                self.spin_spell_slot_character3_4.setDisabled(False)
                self.spin_spell_slot_character3_5.setDisabled(False)
                self.spin_spell_slot_character3_6.setDisabled(False)
                self.spin_spell_slot_character3_7.setDisabled(False)
                self.spin_spell_slot_character3_8.setDisabled(False)
                self.spin_spell_slot_character3_9.setDisabled(False)
                self.pushButton_restore_spell_slots_3.setDisabled(False)
                self.pushButton_set_spell_slots_3.setDisabled(False)
                self.textEdit_char_3.setDisabled(False)

                self.name_character3.setText(hero['character3']['name'])
                self.hp_edit_character3.setText(hero['character3']['hp'])
                self.ac_edit_character3.setText(hero['character3']['ac'])
                self.initiative_edit_character3.setText(hero['character3']['initiative'])
                self.spin_spell_slot_character3.setValue(int(hero['character3']['1']))
                self.spin_spell_slot_character3_2.setValue(int(hero['character3']['2']))
                self.spin_spell_slot_character3_3.setValue(int(hero['character3']['3']))
                self.spin_spell_slot_character3_4.setValue(int(hero['character3']['4']))
                self.spin_spell_slot_character3_5.setValue(int(hero['character3']['5']))
                self.spin_spell_slot_character3_6.setValue(int(hero['character3']['6']))
                self.spin_spell_slot_character3_7.setValue(int(hero['character3']['7']))
                self.spin_spell_slot_character3_8.setValue(int(hero['character3']['8']))
                self.spin_spell_slot_character3_9.setValue(int(hero['character3']['9']))
            else:
                self.name_character3.setDisabled(True)
                self.hp_edit_character3.setDisabled(True)
                self.ac_edit_character3.setDisabled(True)
                self.checkBox_hide_spell_slot_char_3.setDisabled(True)
                self.initiative_edit_character3.setDisabled(True)
                self.spin_spell_slot_character3.setDisabled(True)
                self.spin_spell_slot_character3_2.setDisabled(True)
                self.spin_spell_slot_character3_3.setDisabled(True)
                self.spin_spell_slot_character3_4.setDisabled(True)
                self.spin_spell_slot_character3_5.setDisabled(True)
                self.spin_spell_slot_character3_6.setDisabled(True)
                self.spin_spell_slot_character3_7.setDisabled(True)
                self.spin_spell_slot_character3_8.setDisabled(True)
                self.spin_spell_slot_character3_9.setDisabled(True)
                self.pushButton_restore_spell_slots_3.setDisabled(True)
                self.pushButton_set_spell_slots_3.setDisabled(True)
                self.textEdit_char_3.setDisabled(True)
            logger.info("add_to_tracker")

        def restore_slot_char0(self):
            if 'character0' in hero:
                self.spin_spell_slot_character0.setValue(int(hero['character0']['1']))
                self.spin_spell_slot_character0_2.setValue(int(hero['character0']['2']))
                self.spin_spell_slot_character0_3.setValue(int(hero['character0']['3']))
                self.spin_spell_slot_character0_4.setValue(int(hero['character0']['4']))
                self.spin_spell_slot_character0_5.setValue(int(hero['character0']['5']))
                self.spin_spell_slot_character0_6.setValue(int(hero['character0']['6']))
                self.spin_spell_slot_character0_7.setValue(int(hero['character0']['7']))
                self.spin_spell_slot_character0_8.setValue(int(hero['character0']['8']))
                self.spin_spell_slot_character0_9.setValue(int(hero['character0']['9']))
                logger.info("restore_slot_char0")
            else:
                pass

        def restore_slot_char1(self):
            if 'character1' in hero:
                self.spin_spell_slot_character1.setValue(int(hero['character1']['1']))
                self.spin_spell_slot_character1_2.setValue(int(hero['character1']['2']))
                self.spin_spell_slot_character1_3.setValue(int(hero['character1']['3']))
                self.spin_spell_slot_character1_4.setValue(int(hero['character1']['4']))
                self.spin_spell_slot_character1_5.setValue(int(hero['character1']['5']))
                self.spin_spell_slot_character1_6.setValue(int(hero['character1']['6']))
                self.spin_spell_slot_character1_7.setValue(int(hero['character1']['7']))
                self.spin_spell_slot_character1_8.setValue(int(hero['character1']['8']))
                self.spin_spell_slot_character1_9.setValue(int(hero['character1']['9']))
                logger.info("restore_slot_char1")
            else:
                pass

        def restore_slot_char2(self):
            if 'character2' in hero:
                self.spin_spell_slot_character2.setValue(int(hero['character2']['1']))
                self.spin_spell_slot_character2_2.setValue(int(hero['character2']['2']))
                self.spin_spell_slot_character2_3.setValue(int(hero['character2']['3']))
                self.spin_spell_slot_character2_4.setValue(int(hero['character2']['4']))
                self.spin_spell_slot_character2_5.setValue(int(hero['character2']['5']))
                self.spin_spell_slot_character2_6.setValue(int(hero['character2']['6']))
                self.spin_spell_slot_character2_7.setValue(int(hero['character2']['7']))
                self.spin_spell_slot_character2_8.setValue(int(hero['character2']['8']))
                self.spin_spell_slot_character2_9.setValue(int(hero['character2']['9']))
                logger.info("restore_slot_char2")
            else:
                pass

        def restore_slot_char3(self):
            if 'character3' in hero:
                self.spin_spell_slot_character3.setValue(int(hero['character3']['1']))
                self.spin_spell_slot_character3_2.setValue(int(hero['character3']['2']))
                self.spin_spell_slot_character3_3.setValue(int(hero['character3']['3']))
                self.spin_spell_slot_character3_4.setValue(int(hero['character3']['4']))
                self.spin_spell_slot_character3_5.setValue(int(hero['character3']['5']))
                self.spin_spell_slot_character3_6.setValue(int(hero['character3']['6']))
                self.spin_spell_slot_character3_7.setValue(int(hero['character3']['7']))
                self.spin_spell_slot_character3_8.setValue(int(hero['character3']['8']))
                self.spin_spell_slot_character3_9.setValue(int(hero['character3']['9']))
                logger.info("restore_slot_char3")
            else:
                pass

        def set_slot_char0(self):
            if 'character0' in hero:
                hero['character0']['1'] = self.spin_spell_slot_character0.text()
                hero['character0']['2'] = self.spin_spell_slot_character0_2.text()
                hero['character0']['3'] = self.spin_spell_slot_character0_3.text()
                hero['character0']['4'] = self.spin_spell_slot_character0_4.text()
                hero['character0']['5'] = self.spin_spell_slot_character0_5.text()
                hero['character0']['6'] = self.spin_spell_slot_character0_6.text()
                hero['character0']['7'] = self.spin_spell_slot_character0_7.text()
                hero['character0']['8'] = self.spin_spell_slot_character0_8.text()
                hero['character0']['9'] = self.spin_spell_slot_character0_9.text()
                logger.info("set_slot_char0")
            else:
                pass

        def set_slot_char1(self):
            if 'character1' in hero:
                hero['character1']['1'] = self.spin_spell_slot_character1.text()
                hero['character1']['2'] = self.spin_spell_slot_character1_2.text()
                hero['character1']['3'] = self.spin_spell_slot_character1_3.text()
                hero['character1']['4'] = self.spin_spell_slot_character1_4.text()
                hero['character1']['5'] = self.spin_spell_slot_character1_5.text()
                hero['character1']['6'] = self.spin_spell_slot_character1_6.text()
                hero['character1']['7'] = self.spin_spell_slot_character1_7.text()
                hero['character1']['8'] = self.spin_spell_slot_character1_8.text()
                hero['character1']['9'] = self.spin_spell_slot_character1_9.text()
                logger.info("set_slot_char1")
            else:
                pass

        def set_slot_char2(self):
            if 'character2' in hero:
                hero['character2']['1'] = self.spin_spell_slot_character2.text()
                hero['character2']['2'] = self.spin_spell_slot_character2_2.text()
                hero['character2']['3'] = self.spin_spell_slot_character2_3.text()
                hero['character2']['4'] = self.spin_spell_slot_character2_4.text()
                hero['character2']['5'] = self.spin_spell_slot_character2_5.text()
                hero['character2']['6'] = self.spin_spell_slot_character2_6.text()
                hero['character2']['7'] = self.spin_spell_slot_character2_7.text()
                hero['character2']['8'] = self.spin_spell_slot_character2_8.text()
                hero['character2']['9'] = self.spin_spell_slot_character2_9.text()
                logger.info("set_slot_char2")
            else:
                pass

        def set_slot_char3(self):
            if 'character3' in hero:
                hero['character3']['1'] = self.spin_spell_slot_character3.text()
                hero['character3']['2'] = self.spin_spell_slot_character3_2.text()
                hero['character3']['3'] = self.spin_spell_slot_character3_3.text()
                hero['character3']['4'] = self.spin_spell_slot_character3_4.text()
                hero['character3']['5'] = self.spin_spell_slot_character3_5.text()
                hero['character3']['6'] = self.spin_spell_slot_character3_6.text()
                hero['character3']['7'] = self.spin_spell_slot_character3_7.text()
                hero['character3']['8'] = self.spin_spell_slot_character3_8.text()
                hero['character3']['9'] = self.spin_spell_slot_character3_9.text()
                logger.info("set_slot_char3")
            else:
                pass


        def set_stats_character(self):
            '''
            DOCKSTRING: Обновление статов персонажей при их изменении в трекере
            '''
            try:
                if 'character0' in hero.keys():
                    hero['character0']['hp'] = int(self.hp_edit_character0.text())
                    hero['character0']['ac'] = int(self.ac_edit_character0.text())
                    hero['character0']['initiative'] = int(self.initiative_edit_character0.text())
                if 'character1' in hero.keys():
                    hero['character1']['hp'] = int(self.hp_edit_character1.text())
                    hero['character1']['ac'] = int(self.ac_edit_character1.text())
                    hero['character1']['initiative'] = int(self.initiative_edit_character1.text())
                if 'character2' in hero.keys():
                    hero['character2']['hp'] = int(self.hp_edit_character2.text())
                    hero['character2']['ac'] = int(self.ac_edit_character2.text())
                    hero['character2']['initiative'] = int(self.initiative_edit_character2.text())
                if 'character3' in hero.keys():
                    hero['character3']['hp'] = int(self.hp_edit_character3.text())
                    hero['character3']['ac'] = int(self.ac_edit_character3.text())
                    hero['character3']['initiative'] = int(self.initiative_edit_character3.text())
                logger.info("set_stats_character")
            except ValueError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Не корректный ввод данных')
                error.setDetailedText('HP и инициатива и слоты заклинаний должны состоять только из цифр')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("set_stats_character. except")

        def popup_action(self, but):
            '''
            DOCKSTRING: Заглушка для ошибок
            '''
            if but.text() == 'Ok':
                print('Ok')

        '''
        Scenario
        '''

        def del_chapter(self):
            global scenario_chapter
            try:
                scenario_chapter.pop(self.comboBox_choose_chapter.currentText())
                self.comboBox_choose_chapter_update()
                logger.info("del_chapter")
            except KeyError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Объект для удаления не найден')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("del_chapter. except")

        def hide_chapter(self):
            '''
            DOCKSTRING: Скрытие основного окна сценария и вывод тэгов
            '''
            if self.radioButton_tags_notes.isChecked():
                self.pushButton_add_tags.show()
                self.pushButton_del_tags.show()
                self.list_tags.show()
                self.text_scenario.show()

                self.comboBox_choose_chapter.hide()
                self.text_chapter.hide()
                self.edit_add_chapter.hide()
                self.pushButton_add_chapter.hide()
                self.pushButton_del_chapter.hide()
            else:
                self.comboBox_choose_chapter.show()
                self.text_chapter.show()
                self.edit_add_chapter.show()
                self.pushButton_add_chapter.show()
                self.pushButton_del_chapter.show()

                self.pushButton_add_tags.hide()
                self.pushButton_del_tags.hide()
                self.list_tags.hide()
                self.text_scenario.hide()

            logger.info("hide_chapter")

        def add_chapter(self):
            global scenario_chapter
            if self.edit_add_chapter.text() in scenario_chapter.keys():
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Такая глава уже есть')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("add_chapter. redo entry")
            else:
                if self.edit_add_chapter.text() != "":
                    scenario_chapter[self.edit_add_chapter.text()] = ''
                print(scenario_chapter)
                logger.info("add_chapter")
                self.comboBox_choose_chapter_update()

        def comboBox_choose_chapter_update(self):
            self.comboBox_choose_chapter.clear()

            for i in scenario_chapter.keys():
                self.comboBox_choose_chapter.addItem(i)
            logger.info("comboBox_choose_chapter_update")

        def view_text_chapter(self):
            try:
                self.text_chapter.setText(scenario_chapter[self.comboBox_choose_chapter.currentText()])
                logger.info("view_text_chapter")
            except KeyError:
                logger.info("view_text_chapter. except KeyError")
                pass

        def set_text_chapter(self):
            scenario_chapter[self.comboBox_choose_chapter.currentText()] = self.text_chapter.toPlainText()
            logger.info("set_text_chapter")

        def status_list_tags(self):
            if self.status == 0:
                self.add_scenario_category()
            else:
                self.add_scenario_object()
            logger.info("status_list_tags")

        def del_object_scenario(self):
            global scenario
            global scenario_text
            try:
                if self.list_tags.currentItem():
                    scenario[self.current_index.row()][1].pop(self.list_tags.currentRow() - 1)
                    scenario_text.pop(self.list_tags.currentItem().text())
                    logger.info(f"del_object_scenario {scenario}\n {scenario_text}")
                    self.update_list_tags_object()
            except AttributeError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Выберите объект для удаления')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("del_object_scenario. except AttributeError")

        def add_scenario_category(self):
            global scenario
            text, val = QInputDialog.getText(self, "Enter", "Add category")
            scenario.append([text, []])
            logger.info(f"add_scenario_category {scenario}")
            self.update_list_tags()

        def add_scenario_object(self):
            global scenario
            global scenario_text
            text, val = QInputDialog.getText(self, "Enter", "Add object")
            scenario[self.current_index.row()][-1].append(text)
            scenario_text[text] = ""
            logger.info(f"add_scenario_object {scenario}\n {scenario_text}")
            self.update_list_tags_object()

        def update_list_tags(self):
            self.list_tags.clear()
            self.status = 0

            for i in scenario:
                self.list_tags.addItem(i[0])
            logger.info(f"update_list_tags")

        def set_current_index(self):
            if self.status == 0 or self.list_tags.currentItem().text() == "...":
                self.current_index = self.list_tags.currentIndex()
                logger.info(f"set_current_index")
                self.back_category_list_tags()
            else:
                if self.list_tags.currentItem().text() in scenario_text.keys():
                    self.text_scenario.setText(scenario_text[self.list_tags.currentItem().text()])
                    logger.info(f"set_current_index. else")

        def back_category_list_tags(self):
            if self.list_tags.currentItem().text() == "...":
                logger.info(f"back_category_list_tags")
                self.update_list_tags()
            else:
                logger.info(f"back_category_list_tags. else")
                self.update_list_tags_object()

        def update_list_tags_object(self):
            self.list_tags.clear()
            self.status = 1
            self.list_tags.addItem("...")
            if scenario[self.current_index.row()][1]:
                for i in scenario[self.current_index.row()][1]:
                    self.list_tags.addItem(i)
                logger.info(f"update_list_tags_object")
            else:
                pass

        def set_text_to_scenario(self):
            if self.list_tags.currentItem():
                if self.list_tags.currentItem().text() in scenario_text.keys():
                    scenario_text[self.list_tags.currentItem().text()] = self.text_scenario.toPlainText()
                    logger.info(f"set_text_to_scenario")
                else:
                    pass

        '''
        Notes
        '''

        def save_text(self):
            global note_zero
            global note_one
            global note_two
            global note_three
            global note_char_zero
            global note_char_one
            global note_char_two
            global note_char_three
            note_zero = self.note_edit_0.toPlainText()
            note_one = self.note_edit_1.toPlainText()
            note_two = self.note_edit_2.toPlainText()
            note_three = self.note_edit_3.toPlainText()
            note_char_zero = self.textEdit_char_0.toPlainText()
            note_char_one = self.textEdit_char_1.toPlainText()
            note_char_two = self.textEdit_char_2.toPlainText()
            note_char_three = self.textEdit_char_3.toPlainText()

        '''
        Music changer
        '''

        def music_changer_update(self):
            '''
            DOCKSTRING: Добавление ссылок на музыку в словарь в формате сцена: урл
            '''
            if self.category_edit.text() in music.keys():
                if self.scene_edit.text() in music[self.category_edit.text()].keys():
                    item = music[self.category_edit.text()][self.scene_edit.text()].split(' ')
                    if self.url_edit.text() in item:
                        error = QMessageBox()
                        error.setWindowTitle('Ошибка')
                        error.setText('Такая ссылка уже есть в этой сцене')
                        error.setIcon(QMessageBox.Icon.Warning)
                        error.setStandardButtons(QMessageBox.StandardButton.Ok)
                        error.setDefaultButton(QMessageBox.StandardButton.Ok)

                        error.buttonClicked.connect(self.popup_action)

                        error.exec()
                    else:
                        music[self.category_edit.text()][self.scene_edit.text()] += ' ' + self.url_edit.text()
                else:
                    music[self.category_edit.text()][self.scene_edit.text()] = self.url_edit.text()
            else:
                music[self.category_edit.text()] = {self.scene_edit.text(): self.url_edit.text()}
            logger.info(f"music_changer_update, {music}")
            self.listWidget_scene.clear()
            self.music_changer_listview_category_update()


        def music_changer_listview_category_update(self):
            '''
            DOCKSTRING: обновление комбо бокса, при загрузке сохранения
            '''
            self.listWidget_category.clear()
            for i in music.keys():
                self.listWidget_category.addItem(i)
            logger.info("music_changer_listview_category_update")

        def listView_scene_update(self):
            self.listWidget_scene.clear()
            current_index = self.listWidget_category.currentRow()
            list_music = list(music.keys())
            for i in music[list_music[current_index]].keys():
                self.listWidget_scene.addItem(i)
            logger.info("listView_scene_update")

        def music_changer_play(self):
            num_one = self.listWidget_category.currentRow()
            num_two = self.listWidget_scene.currentRow()
            list_music = list(music.keys())
            list_music_deep = list(music[list_music[num_one]])
            value = music[list_music[num_one]][list_music_deep[num_two]].split(' ')
            for i in enumerate(value):
                webbrowser.open(value[i[0]])
                time.sleep(1)
            logger.info("music_changer_play")

        def music_changer_delete(self):
            num_one = self.listWidget_category.currentRow()
            num_two = self.listWidget_scene.currentRow()
            list_music = list(music.keys())
            if num_two == -1:
                if len(list(music.keys())) == 1:
                    error = QMessageBox()
                    error.setWindowTitle('Ошибка')
                    error.setText('На данный момент нельзя удалить последнюю категорию')
                    error.setIcon(QMessageBox.Icon.Warning)
                    error.setStandardButtons(QMessageBox.StandardButton.Ok)
                    error.setDefaultButton(QMessageBox.StandardButton.Ok)

                    error.buttonClicked.connect(self.popup_action)

                    error.exec()
                else:
                    music.pop(list_music[num_one])
                    self.music_changer_listview_category_update()
            else:
                list_music_deep = list(music[list_music[num_one]])
                music[list_music[num_one]].pop(list_music_deep[num_two])
                self.music_changer_listview_category_update()
                self.listView_scene_update()
            logger.info(f"music_changer_delete, {music}")

        '''
        Rules
        '''

        def set_combobox_rules(self):
            for i in dict_rules:
                self.comboBox_rules.addItem(i)
            logger.info("set_combobox_rules")

        def changed_combobox_rules(self):
            self.label_rules.setText(dict_rules[self.comboBox_rules.currentText()])
            logger.info("changed_combobox_rules")

        '''
        Store
        '''

        def del_store(self):
            try:
                store.pop(self.box_choose_shop.currentText())
                self.box_choose_shop_update()
                logger.info("del_store")
            except ValueError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Магазин не найден')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("del_store. except ValueError")
            except KeyError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Магазин не найден')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("del_store. except KeyError")

        def options_store_box_update(self):
            sex = ["Случайно", "Мужчина", "Женщина"]
            age = ["Случайно", "Молодой", "Средний", "Пожилой"]
            for i in sex:
                self.box_sex_vendor.addItem(i)
            for i in age:
                self.box_age_vendor.addItem(i)
            for i in race:
                self.box_race_vendor.addItem(i)

        def options_generate_store(self):
            '''
            DOCKSTRING: Скрытие текстового поля заметок и вывод настроек генератора
            '''
            if self.radioButton_options_store.isChecked():
                self.text_notes.hide()

                self.label_store_name_2.show()
                self.edit_store_name_2.show()
                self.label_vendor.show()
                self.label_name_vendor.show()
                self.edit_name_vendor.show()
                self.label_sex_vendor.show()
                self.box_sex_vendor.show()
                self.label_age_vendor.show()
                self.box_age_vendor.show()
                self.label_race_vendor.show()
                self.box_race_vendor.show()
            else:
                self.text_notes.show()

                self.label_store_name_2.hide()
                self.edit_store_name_2.hide()
                self.label_vendor.hide()
                self.label_name_vendor.hide()
                self.edit_name_vendor.hide()
                self.label_sex_vendor.hide()
                self.box_sex_vendor.hide()
                self.label_age_vendor.hide()
                self.box_age_vendor.hide()
                self.label_race_vendor.hide()
                self.box_race_vendor.hide()

        def store_type_and_qualification_vendor(self):
            for i in merchants:
                self.box_generate_type.addItem(i)

            for i in qualification:
                self.box_generate_cost.addItem(i)
            logger.info("store_type_and_qualification_vendor")

        def sex_vendor(self):
            self.vendor_sex = ""
            if self.box_sex_vendor.currentText() == "Случайно":
                sex = ["Мужчина", "Женщина"]
                self.vendor_sex = random.choice(sex)
            else:
                self.vendor_sex = self.box_sex_vendor.currentText()
            logger.info("sex_vendor")
            self.name_vendor()

        def name_vendor(self):
            self.vendor_name = ""
            if self.edit_name_vendor.text() == "":
                if self.vendor_sex == "Мужчина":
                    self.vendor_name += random.choice(name_man) + " " + random.choice(family)
                else:
                    self.vendor_name += random.choice(name_woman) + " " + random.choice(family)
            else:
                self.vendor_name = self.edit_name_vendor.text()
                self.edit_name_vendor.setText("")
            logger.info("name_vendor")
            self.age_vendor()

        def age_vendor(self):
            self.vendor_age = ""
            if self.box_age_vendor.currentText() == "Случайно":
                age = ["Молодой", "Средний", "Пожилой"]
                self.vendor_age = random.choice(age)
            else:
                self.vendor_age = self.box_age_vendor.currentText()
            logger.info("age_vendor")
            self.race_vendor()

        def race_vendor(self):
            self.vendor_race = ""
            if self.box_race_vendor.currentText() == "Случайно":
                self.vendor_race = random.choice(race)
            else:
                self.vendor_race = self.box_race_vendor.currentText()
            logger.info("race_vendor")
            self.money_vendor()

        def money_vendor(self):
            self.vendor_money = 0
            if self.box_generate_cost.currentText() == "Ужасная":
                self.vendor_money += random.randint(1, 10) * 20
            if self.box_generate_cost.currentText() == "Плохая":
                self.vendor_money += random.randint(1, 10) * 50
            if self.box_generate_cost.currentText() == "Средняя":
                self.vendor_money += random.randint(1, 10) * 100
            if self.box_generate_cost.currentText() == "Хорошая":
                self.vendor_money += random.randint(1, 10) * 250
            if self.box_generate_cost.currentText() == "Прекрасная":
                self.vendor_money += random.randint(1, 10) * 500
            logger.info("money_vendor")
            self.assortment_store()

        def assortment_store(self):
            '''
            DOCKSTRING: Присвоение ассортимента магазина в соответсвии с стоймостью
            '''
            self.store_assortment = ""
            if self.box_generate_type.currentText() == "Таверна":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(tavern_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(tavern_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(tavern_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(tavern_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(tavern_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Алкоголь и напитки":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(alcohol_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(alcohol_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(alcohol_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(alcohol_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(alcohol_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Оружие":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(weapon_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(weapon_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(weapon_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(weapon_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(weapon_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Доспехи (щиты)":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(armor_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(armor_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(armor_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(armor_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(armor_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Еда и части животных":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(eat_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(eat_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(eat_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(eat_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(eat_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Зелья, яды и травы":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(poison_herbs_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(poison_herbs_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(poison_herbs_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(poison_herbs_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(poison_herbs_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Книги заклинаний":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(poison_herbs_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(poison_herbs_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(poison_herbs_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(poison_herbs_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(poison_herbs_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Песни и инструменты":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(music_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(music_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(music_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(music_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(music_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Религиозные товары":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(religion_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(religion_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(religion_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(religion_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(religion_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Транспорт":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(transport_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(transport_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(transport_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(transport_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(transport_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Животные":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(beast_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(beast_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(beast_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(beast_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(beast_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Книги и карты":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(book_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(book_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(book_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(book_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(book_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Цветы":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(flower_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(flower_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(flower_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(flower_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(flower_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Мебель":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(furniture_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(furniture_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(furniture_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(furniture_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(furniture_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Высокая мода":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(fashion_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(fashion_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(fashion_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(fashion_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(fashion_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Ювелирные изделия":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(jeweler_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(jeweler_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(jeweler_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(jeweler_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(jeweler_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Безделушки":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(bauble_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(bauble_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(bauble_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(bauble_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(bauble_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Изделия из кожи":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(leather_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(leather_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(leather_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(leather_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(leather_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Механические пр.":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(mechanics_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(mechanics_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(mechanics_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(mechanics_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(mechanics_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Воровские пр.":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(thief_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(thief_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(thief_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(thief_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(thief_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            if self.box_generate_type.currentText() == "Инструменты":
                if self.box_generate_cost.currentText() == "Ужасная":
                    for i in sorted(tools_1):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Плохая":
                    for i in sorted(tools_2):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Средняя":
                    for i in sorted(tools_3):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Хорошая":
                    for i in sorted(tools_4):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"
                if self.box_generate_cost.currentText() == "Прекрасная":
                    for i in sorted(tools_5):
                        self.store_assortment += i[0] + ": " + i[1] + "\n"

            logger.info("assortment_store")
            self.create_store()

        def create_store(self):
            if self.edit_store_name_2.text() == "":
                self.iter_store = 0
                flag = True
                while flag is True:
                    if 'store_' + str(self.iter_store) in store.keys():
                        self.iter_store += 1
                    else:
                        flag = False
                store.update({
                    'store_' + str(self.iter_store): {
                        'type_store': self.box_generate_type.currentText(),
                        'name_vendor': self.vendor_name,
                        'sex_vendor': self.vendor_sex,
                        'age_vendor': self.vendor_age,
                        'race_vendor': self.vendor_race,
                        'store_value': self.box_generate_cost.currentText(),
                        'vendor_money': self.vendor_money,
                        'assortment_store': self.store_assortment,
                        'text_notes': " "}})
                logger.info(f"create_store, {store}")
            else:
                self.iter_store = 0
                flag = True
                while flag is True:
                    if self.edit_store_name_2.text() + "_" + str(self.iter_store) in store.keys():
                        self.iter_store += 1
                    else:
                        flag = False
                store.update({
                    self.edit_store_name_2.text() + "_" + str(self.iter_store): {
                        'type_store': self.box_generate_type.currentText(),
                        'name_vendor': self.vendor_name,
                        'sex_vendor': self.vendor_sex,
                        'age_vendor': self.vendor_age,
                        'race_vendor': self.vendor_race,
                        'store_value': self.box_generate_cost.currentText(),
                        'vendor_money': self.vendor_money,
                        'assortment_store': self.store_assortment,
                        'text_notes': " "}})
                self.edit_store_name_2.setText("")
                logger.info(f"create_store, {store}")
            self.box_choose_shop_update()
        def box_choose_shop_update(self):
            self.box_choose_shop.clear()
            for i in store.keys():
                self.box_choose_shop.addItem(i)
            logger.info("box_choose_shop_update")

        def view_store(self):
            if self.box_choose_shop.currentText() in store.keys():
                text = f"Имя продавца: {store[self.box_choose_shop.currentText()]['name_vendor']}\n" \
                       f"Пол продавца: {store[self.box_choose_shop.currentText()]['sex_vendor']}\n" \
                       f"Возраст: {store[self.box_choose_shop.currentText()]['age_vendor']}\n" \
                       f"Расса продавца: {store[self.box_choose_shop.currentText()]['race_vendor']}\n" \
                       f"Тип лавки: \n{store[self.box_choose_shop.currentText()]['type_store']}\n" \
                       f"Квалификация продавца: {store[self.box_choose_shop.currentText()]['store_value']}\n" \
                       f"Денег у продавца: {store[self.box_choose_shop.currentText()]['vendor_money']}зм"
                self.label_shop_info.setText(text)
                self.text_assortment_shop.setText(f"Ассортимент:\n{store[self.box_choose_shop.currentText()]['assortment_store']}")
                self.text_notes.setText(store[self.box_choose_shop.currentText()]['text_notes'])
            else:
                pass
            logger.info("view_store")

        def search_for_assortment_store(self):
            if self.search_assortment_edit.text() == "":
                self.text_assortment_shop.setText(f"Ассортимент:\n{store[self.box_choose_shop.currentText()]['assortment_store']}")
            else:
                message_new = ""
                for i in store[self.box_choose_shop.currentText()]['assortment_store'].split("\n"):
                    if self.search_assortment_edit.text() in i:
                        message_new += i + "\n"
                self.text_assortment_shop.setText(f"Ассортимент:\n{message_new}")

        def shop_notes_edit(self):
            if self.box_choose_shop.currentText() != "":
                store[self.box_choose_shop.currentText()]['text_notes'] = self.text_notes.toPlainText()
            logger.info("shop_notes_edit")

        '''
        NPC generator
        '''

        def del_npc(self):
            try:
                npc.pop(self.box_generate_npc.currentText())
                logger.info("del_npc")
                self.box_generate_npc_update()
            except KeyError:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('NPC не найден')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
                logger.info("del_npc, except KeyError")

        def npc_box_update(self):
            sex = ["Случайно", "Мужчина", "Женщина"]
            age = ["Случайно", "Молодой", "Средний", "Пожилой"]
            for i in sex:
                self.box_sex_npc.addItem(i)
            for i in age:
                self.box_age_npc.addItem(i)
            for i in race:
                self.box_race_npc.addItem(i)

        def sex_npc(self):
            self.npc_sex = ""
            if self.box_sex_npc.currentText() == "Случайно":
                sex = ["Мужчина", "Женщина"]
                self.npc_sex = random.choice(sex)
            else:
                self.npc_sex = self.box_sex_npc.currentText()
            logger.info("sex_npc")
            self.name_npc()

        def name_npc(self):
            self.npc_name = ""
            self.npc_full_name = ""
            if self.edit_npc_name.text() == "":
                if self.npc_sex == "Мужчина":
                    self.npc_name = random.choice(name_man)
                else:
                    self.npc_name = random.choice(name_woman)
                self.npc_family = random.choice(family)
                self.npc_full_name = self.npc_name + " " + self.npc_family
            else:
                self.npc_name = self.edit_npc_name.text()
                self.npc_full_name = self.edit_npc_name.text()
                self.edit_npc_name.setText("")
            logger.info("name_npc")
            self.race_npc()

        def race_npc(self):
            self.npc_race = ""
            if self.box_race_npc.currentText() == "Случайно":
                self.npc_race = random.choice(race)
            else:
                self.npc_race = self.box_race_npc.currentText()
            logger.info("race_npc")
            self.age_npc()

        def age_npc(self):
            self.npc_age = ""
            if self.box_age_npc.currentText() == "Случайно":
                age = ["Молодой", "Средний", "Пожилой"]
                self.npc_age = random.choice(age)
            else:
                self.npc_age = self.box_age_npc.currentText()
            logger.info("age_npc")
            self.create_npc()

        def create_npc(self):
            self.iter_npc = 0
            flag = True
            while flag is True:
                if 'npc_name' + str(self.iter_npc) in store.keys():
                    self.iter_npc += 1
                else:
                    flag = False
            npc.update({
                self.npc_name + str(self.iter_npc): {
                    'npc_name': self.npc_full_name,
                    'npc_sex': self.npc_sex,
                    'npc_age': self.npc_age,
                    'nps_race': self.npc_race,
                    'text_notes': " "}})
            logger.info(f"create_npc, {npc}")
            self.box_generate_npc_update()

        def box_generate_npc_update(self):
            self.box_generate_npc.clear()
            for i in npc.keys():
                self.box_generate_npc.addItem(i)
            logger.info("box_generate_npc_update")

        def npc_notes_edit(self):
            if self.box_generate_npc.currentText() != "":
                npc[self.box_generate_npc.currentText()]['text_notes'] = self.text_npc_generate.toPlainText()
            logger.info("npc_notes_edit")

        def view_npc(self):
            if self.box_generate_npc.currentText() != "":
                text = f"Имя: {npc[self.box_generate_npc.currentText()]['npc_name']}\n" \
                       f"Пол: {npc[self.box_generate_npc.currentText()]['npc_sex']}\n" \
                       f"Возраст: {npc[self.box_generate_npc.currentText()]['npc_age']}\n" \
                       f"Расса: {npc[self.box_generate_npc.currentText()]['nps_race']}"
                self.label_generate_npc.setText(text)
                self.text_npc_generate.setText(npc[self.box_generate_npc.currentText()]['text_notes'])
            logger.info("view_npc")


    if __name__ == "__main__":
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = MainWindow()
        MainWindow.show()
        sys.exit(app.exec())

finally:
    try:
        with open("data_enemy", "r", encoding="utf-8") as file:
            data = json.load(file)
    except FileNotFoundError:
        data = {}
    if hero:
        save_dict = (
            hero,
            music,
            note_zero,
            note_one,
            note_two,
            note_three,
            note_char_zero,
            note_char_one,
            note_char_two,
            note_char_three,
            store,
            npc,
            data,
            scenario,
            scenario_text,
            scenario_chapter,
        )
        with open("last_session", 'w', encoding='utf-8') as outfile:
            json.dump(save_dict, outfile)
