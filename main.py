# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtWidgets
from PyQt6.QtWidgets import QFileDialog, QMessageBox
import random
import webbrowser
import json

from main_class import Ui_MainWindow
from dict_rules import dict_rules


hero = {}
music = {}
class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.aplication_func()

    def aplication_func(self):
        self.actionSave.triggered.connect(self.actions_save)
        self.actionOpen.triggered.connect(self.action_open)
        self.pushButton.clicked.connect(self.input_chek)
        self.pushButton_initiative.clicked.connect(self.calk_initiative)
        self.radioButton_hide_create.toggled.connect(self.hide_create)
        self.checkBox_lock_init.toggled.connect(self.lock_initiative)
        self.pushButton_roll_dice.clicked.connect(self.roll_dice)
        self.pushButton_url_set.clicked.connect(self.music_changer_update)
        self.pushButton_url_open.clicked.connect(self.music_changer_play)
        self.pushButton_url_delete.clicked.connect(self.music_changer_delete)
        self.pushButton_restore_spell_slots_0.clicked.connect(self.restore_slot_chr0)
        self.pushButton_restore_spell_slots_1.clicked.connect(self.restore_slot_chr1)
        self.pushButton_restore_spell_slots_2.clicked.connect(self.restore_slot_chr2)
        self.pushButton_restore_spell_slots_3.clicked.connect(self.restore_slot_chr3)
        self.comboBox_rules.currentTextChanged.connect(self.changed_combobox_rules)


        self.hide_aplications()
        self.view_charapter_stats()
        self.set_combobox_rules()

    def hide_aplications(self):
        self.label_2.hide()
        self.pushButton_initiative.hide()
        self.dice_edit.hide()
        self.amount_dice_box.hide()
        self.label_dice_amount.hide()
        self.label_roll_dice.hide()
        self.pushButton_roll_dice.hide()
        self.name_charapter0.hide()
        self.name_charapter1.hide()
        self.name_charapter2.hide()
        self.name_charapter3.hide()
        self.hp_charapter0.hide()
        self.hp_charapter1.hide()
        self.hp_charapter2.hide()
        self.hp_charapter3.hide()
        self.hp_edit_charapter0.hide()
        self.hp_edit_charapter1.hide()
        self.hp_edit_charapter2.hide()
        self.hp_edit_charapter3.hide()
        self.initiative_charapter0.hide()
        self.initiative_charapter1.hide()
        self.initiative_charapter2.hide()
        self.initiative_charapter3.hide()
        self.initiative_edit_charapter0.hide()
        self.initiative_edit_charapter1.hide()
        self.initiative_edit_charapter2.hide()
        self.initiative_edit_charapter3.hide()
        self.label_spell_slot_charapter0.hide()
        self.label_spell_slot_charapter0_2.hide()
        self.label_spell_slot_charapter0_3.hide()
        self.label_spell_slot_charapter0_4.hide()
        self.label_spell_slot_charapter0_5.hide()
        self.label_spell_slot_charapter0_6.hide()
        self.label_spell_slot_charapter0_7.hide()
        self.label_spell_slot_charapter0_8.hide()
        self.label_spell_slot_charapter0_9.hide()
        self.spell_slot_label_traker_chr0.hide()
        self.label_spell_slot_charapter0_10.hide()
        self.spell_slot_label_traker_chr1.hide()
        self.label_spell_slot_charapter0_11.hide()
        self.label_spell_slot_charapter0_12.hide()
        self.label_spell_slot_charapter0_13.hide()
        self.label_spell_slot_charapter0_14.hide()
        self.label_spell_slot_charapter0_15.hide()
        self.label_spell_slot_charapter0_16.hide()
        self.label_spell_slot_charapter0_17.hide()
        self.label_spell_slot_charapter0_18.hide()
        self.label_spell_slot_charapter0_19.hide()
        self.label_spell_slot_charapter0_20.hide()
        self.label_spell_slot_charapter0_21.hide()
        self.spell_slot_label_traker_chr2.hide()
        self.label_spell_slot_charapter0_22.hide()
        self.label_spell_slot_charapter0_23.hide()
        self.label_spell_slot_charapter0_24.hide()
        self.label_spell_slot_charapter0_25.hide()
        self.label_spell_slot_charapter0_26.hide()
        self.label_spell_slot_charapter0_27.hide()
        self.label_spell_slot_charapter0_28.hide()
        self.label_spell_slot_charapter0_29.hide()
        self.label_spell_slot_charapter0_30.hide()
        self.spell_slot_label_traker_chr3.hide()
        self.label_spell_slot_charapter0_31.hide()
        self.label_spell_slot_charapter0_32.hide()
        self.label_spell_slot_charapter0_33.hide()
        self.label_spell_slot_charapter0_34.hide()
        self.label_spell_slot_charapter0_35.hide()
        self.label_spell_slot_charapter0_36.hide()
        self.spin_spell_slot_charapter0.hide()
        self.spin_spell_slot_charapter0_2.hide()
        self.spin_spell_slot_charapter0_3.hide()
        self.spin_spell_slot_charapter0_4.hide()
        self.spin_spell_slot_charapter0_5.hide()
        self.spin_spell_slot_charapter0_6.hide()
        self.spin_spell_slot_charapter0_7.hide()
        self.spin_spell_slot_charapter0_8.hide()
        self.spin_spell_slot_charapter0_9.hide()
        self.spin_spell_slot_charapter1.hide()
        self.spin_spell_slot_charapter1_2.hide()
        self.spin_spell_slot_charapter1_3.hide()
        self.spin_spell_slot_charapter1_4.hide()
        self.spin_spell_slot_charapter1_5.hide()
        self.spin_spell_slot_charapter1_6.hide()
        self.spin_spell_slot_charapter1_7.hide()
        self.spin_spell_slot_charapter1_8.hide()
        self.spin_spell_slot_charapter1_9.hide()
        self.spin_spell_slot_charapter2.hide()
        self.spin_spell_slot_charapter2_2.hide()
        self.spin_spell_slot_charapter2_3.hide()
        self.spin_spell_slot_charapter2_4.hide()
        self.spin_spell_slot_charapter2_5.hide()
        self.spin_spell_slot_charapter2_6.hide()
        self.spin_spell_slot_charapter2_7.hide()
        self.spin_spell_slot_charapter2_8.hide()
        self.spin_spell_slot_charapter2_9.hide()
        self.spin_spell_slot_charapter3.hide()
        self.spin_spell_slot_charapter3_2.hide()
        self.spin_spell_slot_charapter3_3.hide()
        self.spin_spell_slot_charapter3_4.hide()
        self.spin_spell_slot_charapter3_5.hide()
        self.spin_spell_slot_charapter3_6.hide()
        self.spin_spell_slot_charapter3_7.hide()
        self.spin_spell_slot_charapter3_8.hide()
        self.spin_spell_slot_charapter3_9.hide()
        self.pushButton_restore_spell_slots_0.hide()
        self.pushButton_restore_spell_slots_1.hide()
        self.pushButton_restore_spell_slots_2.hide()
        self.pushButton_restore_spell_slots_3.hide()

        self.name.show()
        self.name_edit.show()
        self.hp.show()
        self.hp_edit.show()
        self.initiative.show()
        self.initiative_edit.show()
        self.pushButton.show()
        self.label.show()

    def view_charapter_stats(self):
        self.hp_edit_charapter0.editingFinished.connect(self.set_stats_charapter)
        self.hp_edit_charapter1.editingFinished.connect(self.set_stats_charapter)
        self.hp_edit_charapter2.editingFinished.connect(self.set_stats_charapter)
        self.hp_edit_charapter3.editingFinished.connect(self.set_stats_charapter)
        self.initiative_edit_charapter0.editingFinished.connect(self.set_stats_charapter)
        self.initiative_edit_charapter1.editingFinished.connect(self.set_stats_charapter)
        self.initiative_edit_charapter2.editingFinished.connect(self.set_stats_charapter)
        self.initiative_edit_charapter3.editingFinished.connect(self.set_stats_charapter)


    def input_chek(self):
        try:
            hp_check = int(self.hp_edit.text())
            initiative_check = int(self.initiative_edit.text())
            Spell_slot_chek_1 = int(self.spell_slot_edit.text())
            Spell_slot_chek_2 = int(self.spell_slot_edit_2.text())
            Spell_slot_chek_3 = int(self.spell_slot_edit_3.text())
            Spell_slot_chek_4 = int(self.spell_slot_edit_4.text())
            Spell_slot_chek_5 = int(self.spell_slot_edit_5.text())
            Spell_slot_chek_6 = int(self.spell_slot_edit_6.text())
            Spell_slot_chek_7 = int(self.spell_slot_edit_7.text())
            Spell_slot_chek_8 = int(self.spell_slot_edit_8.text())
            Spell_slot_chek_9 = int(self.spell_slot_edit_9.text())

            self.create_hero()
        except:
            error = QMessageBox()
            error.setWindowTitle('Ошибка')
            error.setText('Не корректный ввод!')
            error.setIcon(QMessageBox.Icon.Warning)
            error.setStandardButtons(QMessageBox.StandardButton.Ok)
            error.setDefaultButton(QMessageBox.StandardButton.Ok)
            error.setDetailedText('HP и инициатива и слоты заклинаний должны состоять только из цифр')

            error.buttonClicked.connect(self.popup_action)

            error.exec()
    def create_hero(self):
        '''
        DOCKSTRING: Создание персонажа в редакторе и добавление его в словарь
        :return:
        '''
        self.iter = 0
        for item in range(len(hero)):
            self.iter += 1
        if self.iter <= 3:
            hero.update({
            'charapter' + str(self.iter): {
                'name': self.name_edit.text(),
                'hp': self.hp_edit.text(),
                '1': self.spell_slot_edit.text(),
                '2': self.spell_slot_edit_2.text(),
                '3': self.spell_slot_edit_3.text(),
                '4': self.spell_slot_edit_4.text(),
                '5': self.spell_slot_edit_5.text(),
                '6': self.spell_slot_edit_6.text(),
                '7': self.spell_slot_edit_7.text(),
                '8': self.spell_slot_edit_8.text(),
                '9': self.spell_slot_edit_9.text(),
                'initiative': self.initiative_edit.text()
            }
            })
            print(hero)
        else:
            error = QMessageBox()
            error.setWindowTitle('Ошибка')
            error.setText('Нельзя выполнить действие')
            error.setIcon(QMessageBox.Icon.Warning)
            error.setStandardButtons(QMessageBox.StandardButton.Ok)
            error.setDefaultButton(QMessageBox.StandardButton.Ok)
            error.setInformativeText('На данный момент только 4 персонажа')
            error.setDetailedText('Слишком много людей!')

            error.buttonClicked.connect(self.popup_action)

            error.exec()
        self.view_create_hero()
        self.add_to_tracker()

    def popup_action(self, but):
        '''
        DOCKSTRING: Заглушка
        :param but:
        :return:
        '''
        if but.text() == 'Ok':
            print('Ok')

    def view_create_hero(self):
        '''
        DOCKSTRING: Отображение созданых персонажей в окне рядом с редактором
        :param but:
        :return:
        '''
        value = ''
        for item in range(len(hero)):
            value += f'Name: {hero["charapter" + str(item)]["name"]}' + '\n' + \
                    f'Hp: {hero["charapter" + str(item)]["hp"]}' + '\n' + \
                    f'Initiative: {hero["charapter" + str(item)]["initiative"]}'\
                     + '\n' + '\n'
            self.label.setText(value)
            print(iter)
        print(value)

    def add_to_tracker(self):
        '''
        DOCKSTRING: добавление созданых персонажей в трекер
        :param but:
        :return:
        '''
        if len(hero) == 1:
            self.name_charapter0.setText(hero['charapter0']['name'])
            self.hp_edit_charapter0.setText(hero['charapter0']['hp'])
            self.initiative_edit_charapter0.setText(hero['charapter0']['initiative'])
            self.spin_spell_slot_charapter0.setValue(int(hero['charapter0']['1']))
            self.spin_spell_slot_charapter0.setValue(int(hero['charapter0']['1']))
            self.spin_spell_slot_charapter0_2.setValue(int(hero['charapter0']['2']))
            self.spin_spell_slot_charapter0_3.setValue(int(hero['charapter0']['3']))
            self.spin_spell_slot_charapter0_4.setValue(int(hero['charapter0']['4']))
            self.spin_spell_slot_charapter0_5.setValue(int(hero['charapter0']['5']))
            self.spin_spell_slot_charapter0_6.setValue(int(hero['charapter0']['6']))
            self.spin_spell_slot_charapter0_7.setValue(int(hero['charapter0']['7']))
            self.spin_spell_slot_charapter0_8.setValue(int(hero['charapter0']['8']))
            self.spin_spell_slot_charapter0_9.setValue(int(hero['charapter0']['9']))

        elif len(hero) == 2:
            self.name_charapter0.setText(hero['charapter0']['name'])
            self.name_charapter1.setText(hero['charapter1']['name'])
            self.hp_edit_charapter0.setText(hero['charapter0']['hp'])
            self.hp_edit_charapter1.setText(hero['charapter1']['hp'])
            self.initiative_edit_charapter0.setText(hero['charapter0']['initiative'])
            self.initiative_edit_charapter1.setText(hero['charapter1']['initiative'])
            self.spin_spell_slot_charapter0.setValue(int(hero['charapter0']['1']))
            self.spin_spell_slot_charapter0_2.setValue(int(hero['charapter0']['2']))
            self.spin_spell_slot_charapter0_3.setValue(int(hero['charapter0']['3']))
            self.spin_spell_slot_charapter0_4.setValue(int(hero['charapter0']['4']))
            self.spin_spell_slot_charapter0_5.setValue(int(hero['charapter0']['5']))
            self.spin_spell_slot_charapter0_6.setValue(int(hero['charapter0']['6']))
            self.spin_spell_slot_charapter0_7.setValue(int(hero['charapter0']['7']))
            self.spin_spell_slot_charapter0_8.setValue(int(hero['charapter0']['8']))
            self.spin_spell_slot_charapter0_9.setValue(int(hero['charapter0']['9']))
            self.spin_spell_slot_charapter1.setValue(int(hero['charapter1']['1']))
            self.spin_spell_slot_charapter1_2.setValue(int(hero['charapter1']['2']))
            self.spin_spell_slot_charapter1_3.setValue(int(hero['charapter1']['3']))
            self.spin_spell_slot_charapter1_4.setValue(int(hero['charapter1']['4']))
            self.spin_spell_slot_charapter1_5.setValue(int(hero['charapter1']['5']))
            self.spin_spell_slot_charapter1_6.setValue(int(hero['charapter1']['6']))
            self.spin_spell_slot_charapter1_7.setValue(int(hero['charapter1']['7']))
            self.spin_spell_slot_charapter1_8.setValue(int(hero['charapter1']['8']))
            self.spin_spell_slot_charapter1_9.setValue(int(hero['charapter1']['9']))

        elif len(hero) == 3:
            self.name_charapter0.setText(hero['charapter0']['name'])
            self.name_charapter1.setText(hero['charapter1']['name'])
            self.name_charapter2.setText(hero['charapter2']['name'])
            self.hp_edit_charapter0.setText(hero['charapter0']['hp'])
            self.hp_edit_charapter1.setText(hero['charapter1']['hp'])
            self.hp_edit_charapter2.setText(hero['charapter2']['hp'])
            self.initiative_edit_charapter0.setText(hero['charapter0']['initiative'])
            self.initiative_edit_charapter1.setText(hero['charapter1']['initiative'])
            self.initiative_edit_charapter2.setText(hero['charapter2']['initiative'])
            self.spin_spell_slot_charapter0.setValue(int(hero['charapter0']['1']))
            self.spin_spell_slot_charapter0_2.setValue(int(hero['charapter0']['2']))
            self.spin_spell_slot_charapter0_3.setValue(int(hero['charapter0']['3']))
            self.spin_spell_slot_charapter0_4.setValue(int(hero['charapter0']['4']))
            self.spin_spell_slot_charapter0_5.setValue(int(hero['charapter0']['5']))
            self.spin_spell_slot_charapter0_6.setValue(int(hero['charapter0']['6']))
            self.spin_spell_slot_charapter0_7.setValue(int(hero['charapter0']['7']))
            self.spin_spell_slot_charapter0_8.setValue(int(hero['charapter0']['8']))
            self.spin_spell_slot_charapter0_9.setValue(int(hero['charapter0']['9']))
            self.spin_spell_slot_charapter1.setValue(int(hero['charapter1']['1']))
            self.spin_spell_slot_charapter1_2.setValue(int(hero['charapter1']['2']))
            self.spin_spell_slot_charapter1_3.setValue(int(hero['charapter1']['3']))
            self.spin_spell_slot_charapter1_4.setValue(int(hero['charapter1']['4']))
            self.spin_spell_slot_charapter1_5.setValue(int(hero['charapter1']['5']))
            self.spin_spell_slot_charapter1_6.setValue(int(hero['charapter1']['6']))
            self.spin_spell_slot_charapter1_7.setValue(int(hero['charapter1']['7']))
            self.spin_spell_slot_charapter1_8.setValue(int(hero['charapter1']['8']))
            self.spin_spell_slot_charapter1_9.setValue(int(hero['charapter1']['9']))
            self.spin_spell_slot_charapter2.setValue(int(hero['charapter2']['1']))
            self.spin_spell_slot_charapter2_2.setValue(int(hero['charapter2']['2']))
            self.spin_spell_slot_charapter2_3.setValue(int(hero['charapter2']['3']))
            self.spin_spell_slot_charapter2_4.setValue(int(hero['charapter2']['4']))
            self.spin_spell_slot_charapter2_5.setValue(int(hero['charapter2']['5']))
            self.spin_spell_slot_charapter2_6.setValue(int(hero['charapter2']['6']))
            self.spin_spell_slot_charapter2_7.setValue(int(hero['charapter2']['7']))
            self.spin_spell_slot_charapter2_8.setValue(int(hero['charapter2']['8']))
            self.spin_spell_slot_charapter2_9.setValue(int(hero['charapter2']['9']))

        elif len(hero) == 4:
            self.name_charapter0.setText(hero['charapter0']['name'])
            self.name_charapter1.setText(hero['charapter1']['name'])
            self.name_charapter2.setText(hero['charapter2']['name'])
            self.name_charapter3.setText(hero['charapter3']['name'])
            self.hp_edit_charapter0.setText(hero['charapter0']['hp'])
            self.hp_edit_charapter1.setText(hero['charapter1']['hp'])
            self.hp_edit_charapter2.setText(hero['charapter2']['hp'])
            self.hp_edit_charapter3.setText(hero['charapter3']['hp'])
            self.initiative_edit_charapter0.setText(hero['charapter0']['initiative'])
            self.initiative_edit_charapter1.setText(hero['charapter1']['initiative'])
            self.initiative_edit_charapter2.setText(hero['charapter2']['initiative'])
            self.initiative_edit_charapter3.setText(hero['charapter3']['initiative'])
            self.spin_spell_slot_charapter0.setValue(int(hero['charapter0']['1']))
            self.spin_spell_slot_charapter0_2.setValue(int(hero['charapter0']['2']))
            self.spin_spell_slot_charapter0_3.setValue(int(hero['charapter0']['3']))
            self.spin_spell_slot_charapter0_4.setValue(int(hero['charapter0']['4']))
            self.spin_spell_slot_charapter0_5.setValue(int(hero['charapter0']['5']))
            self.spin_spell_slot_charapter0_6.setValue(int(hero['charapter0']['6']))
            self.spin_spell_slot_charapter0_7.setValue(int(hero['charapter0']['7']))
            self.spin_spell_slot_charapter0_8.setValue(int(hero['charapter0']['8']))
            self.spin_spell_slot_charapter0_9.setValue(int(hero['charapter0']['9']))
            self.spin_spell_slot_charapter1.setValue(int(hero['charapter1']['1']))
            self.spin_spell_slot_charapter1_2.setValue(int(hero['charapter1']['2']))
            self.spin_spell_slot_charapter1_3.setValue(int(hero['charapter1']['3']))
            self.spin_spell_slot_charapter1_4.setValue(int(hero['charapter1']['4']))
            self.spin_spell_slot_charapter1_5.setValue(int(hero['charapter1']['5']))
            self.spin_spell_slot_charapter1_6.setValue(int(hero['charapter1']['6']))
            self.spin_spell_slot_charapter1_7.setValue(int(hero['charapter1']['7']))
            self.spin_spell_slot_charapter1_8.setValue(int(hero['charapter1']['8']))
            self.spin_spell_slot_charapter1_9.setValue(int(hero['charapter1']['9']))
            self.spin_spell_slot_charapter2.setValue(int(hero['charapter2']['1']))
            self.spin_spell_slot_charapter2_2.setValue(int(hero['charapter2']['2']))
            self.spin_spell_slot_charapter2_3.setValue(int(hero['charapter2']['3']))
            self.spin_spell_slot_charapter2_4.setValue(int(hero['charapter2']['4']))
            self.spin_spell_slot_charapter2_5.setValue(int(hero['charapter2']['5']))
            self.spin_spell_slot_charapter2_6.setValue(int(hero['charapter2']['6']))
            self.spin_spell_slot_charapter2_7.setValue(int(hero['charapter2']['7']))
            self.spin_spell_slot_charapter2_8.setValue(int(hero['charapter2']['8']))
            self.spin_spell_slot_charapter2_9.setValue(int(hero['charapter2']['9']))
            self.spin_spell_slot_charapter3.setValue(int(hero['charapter3']['1']))
            self.spin_spell_slot_charapter3_2.setValue(int(hero['charapter3']['2']))
            self.spin_spell_slot_charapter3_3.setValue(int(hero['charapter3']['3']))
            self.spin_spell_slot_charapter3_4.setValue(int(hero['charapter3']['4']))
            self.spin_spell_slot_charapter3_5.setValue(int(hero['charapter3']['5']))
            self.spin_spell_slot_charapter3_6.setValue(int(hero['charapter3']['6']))
            self.spin_spell_slot_charapter3_7.setValue(int(hero['charapter3']['7']))
            self.spin_spell_slot_charapter3_8.setValue(int(hero['charapter3']['8']))
            self.spin_spell_slot_charapter3_9.setValue(int(hero['charapter3']['9']))

    def restore_slot_chr0(self):
        if 'charapter0' in hero:
            self.spin_spell_slot_charapter0.setValue(int(hero['charapter0']['1']))
            self.spin_spell_slot_charapter0_2.setValue(int(hero['charapter0']['2']))
            self.spin_spell_slot_charapter0_3.setValue(int(hero['charapter0']['3']))
            self.spin_spell_slot_charapter0_4.setValue(int(hero['charapter0']['4']))
            self.spin_spell_slot_charapter0_5.setValue(int(hero['charapter0']['5']))
            self.spin_spell_slot_charapter0_6.setValue(int(hero['charapter0']['6']))
            self.spin_spell_slot_charapter0_7.setValue(int(hero['charapter0']['7']))
            self.spin_spell_slot_charapter0_8.setValue(int(hero['charapter0']['8']))
            self.spin_spell_slot_charapter0_9.setValue(int(hero['charapter0']['9']))
        else:
            pass

    def restore_slot_chr1(self):
        if 'charapter1' in hero:
            self.spin_spell_slot_charapter1.setValue(int(hero['charapter1']['1']))
            self.spin_spell_slot_charapter1_2.setValue(int(hero['charapter1']['2']))
            self.spin_spell_slot_charapter1_3.setValue(int(hero['charapter1']['3']))
            self.spin_spell_slot_charapter1_4.setValue(int(hero['charapter1']['4']))
            self.spin_spell_slot_charapter1_5.setValue(int(hero['charapter1']['5']))
            self.spin_spell_slot_charapter1_6.setValue(int(hero['charapter1']['6']))
            self.spin_spell_slot_charapter1_7.setValue(int(hero['charapter1']['7']))
            self.spin_spell_slot_charapter1_8.setValue(int(hero['charapter1']['8']))
            self.spin_spell_slot_charapter1_9.setValue(int(hero['charapter1']['9']))
        else:
            pass

    def restore_slot_chr2(self):
        if 'charapter2' in hero:
            self.spin_spell_slot_charapter2.setValue(int(hero['charapter2']['1']))
            self.spin_spell_slot_charapter2_2.setValue(int(hero['charapter2']['2']))
            self.spin_spell_slot_charapter2_3.setValue(int(hero['charapter2']['3']))
            self.spin_spell_slot_charapter2_4.setValue(int(hero['charapter2']['4']))
            self.spin_spell_slot_charapter2_5.setValue(int(hero['charapter2']['5']))
            self.spin_spell_slot_charapter2_6.setValue(int(hero['charapter2']['6']))
            self.spin_spell_slot_charapter2_7.setValue(int(hero['charapter2']['7']))
            self.spin_spell_slot_charapter2_8.setValue(int(hero['charapter2']['8']))
            self.spin_spell_slot_charapter2_9.setValue(int(hero['charapter2']['9']))
        else:
            pass

    def restore_slot_chr3(self):
        if 'charapter3' in hero:
            self.spin_spell_slot_charapter3.setValue(int(hero['charapter3']['1']))
            self.spin_spell_slot_charapter3_2.setValue(int(hero['charapter3']['2']))
            self.spin_spell_slot_charapter3_3.setValue(int(hero['charapter3']['3']))
            self.spin_spell_slot_charapter3_4.setValue(int(hero['charapter3']['4']))
            self.spin_spell_slot_charapter3_5.setValue(int(hero['charapter3']['5']))
            self.spin_spell_slot_charapter3_6.setValue(int(hero['charapter3']['6']))
            self.spin_spell_slot_charapter3_7.setValue(int(hero['charapter3']['7']))
            self.spin_spell_slot_charapter3_8.setValue(int(hero['charapter3']['8']))
            self.spin_spell_slot_charapter3_9.setValue(int(hero['charapter3']['9']))
        else:
            pass


    def set_stats_charapter(self):
        '''
        DOCKSTRING: Обновление статов персонажей при их изменении в трекере
        :param but:
        :return:
        '''
        try:
            if len(hero) == 1:
                hero['charapter0']['hp'] = int(self.hp_edit_charapter0.text())
                hero['charapter0']['initiative'] = int(self.initiative_edit_charapter0.text())
            elif len(hero) == 2:
                hero['charapter0']['hp'] = int(self.hp_edit_charapter0.text())
                hero['charapter1']['hp'] = int(self.hp_edit_charapter1.text())
                hero['charapter0']['initiative'] = int(self.initiative_edit_charapter0.text())
                hero['charapter1']['initiative'] = int(self.initiative_edit_charapter1.text())
            elif len(hero) == 3:
                hero['charapter0']['hp'] = int(self.hp_edit_charapter0.text())
                hero['charapter1']['hp'] = int(self.hp_edit_charapter1.text())
                hero['charapter2']['hp'] = int(self.hp_edit_charapter2.text())
                hero['charapter0']['initiative'] = int(self.initiative_edit_charapter0.text())
                hero['charapter1']['initiative'] = int(self.initiative_edit_charapter1.text())
                hero['charapter2']['initiative'] = int(self.initiative_edit_charapter2.text())
            elif len(hero) == 4:
                hero['charapter0']['hp'] = int(self.hp_edit_charapter0.text())
                hero['charapter1']['hp'] = int(self.hp_edit_charapter1.text())
                hero['charapter2']['hp'] = int(self.hp_edit_charapter2.text())
                hero['charapter3']['hp'] = int(self.hp_edit_charapter3.text())
                hero['charapter0']['initiative'] = int(self.initiative_edit_charapter0.text())
                hero['charapter1']['initiative'] = int(self.initiative_edit_charapter1.text())
                hero['charapter2']['initiative'] = int(self.initiative_edit_charapter2.text())
                hero['charapter3']['initiative'] = int(self.initiative_edit_charapter3.text())
        except:
            error = QMessageBox()
            error.setWindowTitle('Ошибка')
            error.setText('Не корректный ввод данных')
            error.setIcon(QMessageBox.Icon.Warning)
            error.setStandardButtons(QMessageBox.StandardButton.Ok)
            error.setDefaultButton(QMessageBox.StandardButton.Ok)

            error.buttonClicked.connect(self.popup_action)

            error.exec()


    def calk_initiative(self):
        '''
        DOCKSTRING: подсчёт инициативы
        :param but:
        :return:
        '''
        hero_res = []
        value = ''
        for i in range(len(hero)):
            t = int(hero['charapter' + str(i)]['initiative']) + random.randint(1, 20)
            n = hero['charapter' + str(i)]['name']
            hero_res += (t, n),

        hero_res.sort(key=lambda x: (x[0], x[1]), reverse=True)
        for i in range(len(hero_res)):
            value += f'Name = {hero_res[i][1]}' + '\n' + f'initiative = {hero_res[i][0]}' + '\n'
        self.label_2.setText(value)

    def hide_create(self):
        '''
        DOCKSTRING: круглая кнопка. Скрыть или показать редактор персонажа
        :param but:
        :return:
        '''
        self.check_radiobutton = self.radioButton_hide_create.isChecked()
        if self.check_radiobutton:
            self.label_2.show()
            self.pushButton_initiative.show()
            self.dice_edit.show()
            self.amount_dice_box.show()
            self.label_dice_amount.show()
            self.label_roll_dice.show()
            self.pushButton_roll_dice.show()
            self.name_charapter0.show()
            self.name_charapter1.show()
            self.name_charapter2.show()
            self.name_charapter3.show()
            self.hp_charapter0.show()
            self.hp_charapter1.show()
            self.hp_charapter2.show()
            self.hp_charapter3.show()
            self.hp_edit_charapter0.show()
            self.hp_edit_charapter1.show()
            self.hp_edit_charapter2.show()
            self.hp_edit_charapter3.show()
            self.initiative_charapter0.show()
            self.initiative_charapter1.show()
            self.initiative_charapter2.show()
            self.initiative_charapter3.show()
            self.initiative_edit_charapter0.show()
            self.initiative_edit_charapter1.show()
            self.initiative_edit_charapter2.show()
            self.initiative_edit_charapter3.show()

            self.label_spell_slot_charapter0.show()
            self.label_spell_slot_charapter0_2.show()
            self.label_spell_slot_charapter0_3.show()
            self.label_spell_slot_charapter0_4.show()
            self.label_spell_slot_charapter0_5.show()
            self.label_spell_slot_charapter0_6.show()
            self.label_spell_slot_charapter0_7.show()
            self.label_spell_slot_charapter0_8.show()
            self.label_spell_slot_charapter0_9.show()
            self.spell_slot_label_traker_chr0.show()
            self.label_spell_slot_charapter0_10.show()
            self.spell_slot_label_traker_chr1.show()
            self.label_spell_slot_charapter0_11.show()
            self.label_spell_slot_charapter0_12.show()
            self.label_spell_slot_charapter0_13.show()
            self.label_spell_slot_charapter0_14.show()
            self.label_spell_slot_charapter0_15.show()
            self.label_spell_slot_charapter0_16.show()
            self.label_spell_slot_charapter0_17.show()
            self.label_spell_slot_charapter0_18.show()
            self.label_spell_slot_charapter0_19.show()
            self.label_spell_slot_charapter0_20.show()
            self.label_spell_slot_charapter0_21.show()
            self.spell_slot_label_traker_chr2.show()
            self.label_spell_slot_charapter0_22.show()
            self.label_spell_slot_charapter0_23.show()
            self.label_spell_slot_charapter0_24.show()
            self.label_spell_slot_charapter0_25.show()
            self.label_spell_slot_charapter0_26.show()
            self.label_spell_slot_charapter0_27.show()
            self.label_spell_slot_charapter0_28.show()
            self.label_spell_slot_charapter0_29.show()
            self.label_spell_slot_charapter0_30.show()
            self.spell_slot_label_traker_chr3.show()
            self.label_spell_slot_charapter0_31.show()
            self.label_spell_slot_charapter0_32.show()
            self.label_spell_slot_charapter0_33.show()
            self.label_spell_slot_charapter0_34.show()
            self.label_spell_slot_charapter0_35.show()
            self.label_spell_slot_charapter0_36.show()
            self.spin_spell_slot_charapter0.show()
            self.spin_spell_slot_charapter0_2.show()
            self.spin_spell_slot_charapter0_3.show()
            self.spin_spell_slot_charapter0_4.show()
            self.spin_spell_slot_charapter0_5.show()
            self.spin_spell_slot_charapter0_6.show()
            self.spin_spell_slot_charapter0_7.show()
            self.spin_spell_slot_charapter0_8.show()
            self.spin_spell_slot_charapter0_9.show()
            self.spin_spell_slot_charapter1.show()
            self.spin_spell_slot_charapter1_2.show()
            self.spin_spell_slot_charapter1_3.show()
            self.spin_spell_slot_charapter1_4.show()
            self.spin_spell_slot_charapter1_5.show()
            self.spin_spell_slot_charapter1_6.show()
            self.spin_spell_slot_charapter1_7.show()
            self.spin_spell_slot_charapter1_8.show()
            self.spin_spell_slot_charapter1_9.show()
            self.spin_spell_slot_charapter2.show()
            self.spin_spell_slot_charapter2_2.show()
            self.spin_spell_slot_charapter2_3.show()
            self.spin_spell_slot_charapter2_4.show()
            self.spin_spell_slot_charapter2_5.show()
            self.spin_spell_slot_charapter2_6.show()
            self.spin_spell_slot_charapter2_7.show()
            self.spin_spell_slot_charapter2_8.show()
            self.spin_spell_slot_charapter2_9.show()
            self.spin_spell_slot_charapter3.show()
            self.spin_spell_slot_charapter3_2.show()
            self.spin_spell_slot_charapter3_3.show()
            self.spin_spell_slot_charapter3_4.show()
            self.spin_spell_slot_charapter3_5.show()
            self.spin_spell_slot_charapter3_6.show()
            self.spin_spell_slot_charapter3_7.show()
            self.spin_spell_slot_charapter3_8.show()
            self.spin_spell_slot_charapter3_9.show()
            self.pushButton_restore_spell_slots_0.show()
            self.pushButton_restore_spell_slots_1.show()
            self.pushButton_restore_spell_slots_2.show()
            self.pushButton_restore_spell_slots_3.show()


            self.name.hide()
            self.name_edit.hide()
            self.hp.hide()
            self.hp_edit.hide()
            self.initiative.hide()
            self.initiative_edit.hide()
            self.pushButton.hide()
            self.label.hide()
            self.spell_slot.hide()
            self.label_spell_slot.hide()
            self.label_spell_slot_2.hide()
            self.label_spell_slot_3.hide()
            self.label_spell_slot_4.hide()
            self.label_spell_slot_5.hide()
            self.label_spell_slot_6.hide()
            self.label_spell_slot_7.hide()
            self.label_spell_slot_8.hide()
            self.label_spell_slot_9.hide()
            self.spell_slot_edit.hide()
            self.spell_slot_edit_2.hide()
            self.spell_slot_edit_3.hide()
            self.spell_slot_edit_4.hide()
            self.spell_slot_edit_5.hide()
            self.spell_slot_edit_6.hide()
            self.spell_slot_edit_7.hide()
            self.spell_slot_edit_8.hide()
            self.spell_slot_edit_9.hide()



        if self.check_radiobutton == False:
            self.label_2.hide()
            self.pushButton_initiative.hide()
            self.dice_edit.hide()
            self.amount_dice_box.hide()
            self.label_dice_amount.hide()
            self.label_roll_dice.hide()
            self.pushButton_roll_dice.hide()
            self.name_charapter0.hide()
            self.name_charapter1.hide()
            self.name_charapter2.hide()
            self.name_charapter3.hide()
            self.hp_charapter0.hide()
            self.hp_charapter1.hide()
            self.hp_charapter2.hide()
            self.hp_charapter3.hide()
            self.hp_edit_charapter0.hide()
            self.hp_edit_charapter1.hide()
            self.hp_edit_charapter2.hide()
            self.hp_edit_charapter3.hide()
            self.initiative_charapter0.hide()
            self.initiative_charapter1.hide()
            self.initiative_charapter2.hide()
            self.initiative_charapter3.hide()
            self.initiative_edit_charapter0.hide()
            self.initiative_edit_charapter1.hide()
            self.initiative_edit_charapter2.hide()
            self.initiative_edit_charapter3.hide()

            self.label_spell_slot_charapter0.hide()
            self.label_spell_slot_charapter0_2.hide()
            self.label_spell_slot_charapter0_3.hide()
            self.label_spell_slot_charapter0_4.hide()
            self.label_spell_slot_charapter0_5.hide()
            self.label_spell_slot_charapter0_6.hide()
            self.label_spell_slot_charapter0_7.hide()
            self.label_spell_slot_charapter0_8.hide()
            self.label_spell_slot_charapter0_9.hide()
            self.spell_slot_label_traker_chr0.hide()
            self.label_spell_slot_charapter0_10.hide()
            self.spell_slot_label_traker_chr1.hide()
            self.label_spell_slot_charapter0_11.hide()
            self.label_spell_slot_charapter0_12.hide()
            self.label_spell_slot_charapter0_13.hide()
            self.label_spell_slot_charapter0_14.hide()
            self.label_spell_slot_charapter0_15.hide()
            self.label_spell_slot_charapter0_16.hide()
            self.label_spell_slot_charapter0_17.hide()
            self.label_spell_slot_charapter0_18.hide()
            self.label_spell_slot_charapter0_19.hide()
            self.label_spell_slot_charapter0_20.hide()
            self.label_spell_slot_charapter0_21.hide()
            self.spell_slot_label_traker_chr2.hide()
            self.label_spell_slot_charapter0_22.hide()
            self.label_spell_slot_charapter0_23.hide()
            self.label_spell_slot_charapter0_24.hide()
            self.label_spell_slot_charapter0_25.hide()
            self.label_spell_slot_charapter0_26.hide()
            self.label_spell_slot_charapter0_27.hide()
            self.label_spell_slot_charapter0_28.hide()
            self.label_spell_slot_charapter0_29.hide()
            self.label_spell_slot_charapter0_30.hide()
            self.spell_slot_label_traker_chr3.hide()
            self.label_spell_slot_charapter0_31.hide()
            self.label_spell_slot_charapter0_32.hide()
            self.label_spell_slot_charapter0_33.hide()
            self.label_spell_slot_charapter0_34.hide()
            self.label_spell_slot_charapter0_35.hide()
            self.label_spell_slot_charapter0_36.hide()
            self.spin_spell_slot_charapter0.hide()
            self.spin_spell_slot_charapter0_2.hide()
            self.spin_spell_slot_charapter0_3.hide()
            self.spin_spell_slot_charapter0_4.hide()
            self.spin_spell_slot_charapter0_5.hide()
            self.spin_spell_slot_charapter0_6.hide()
            self.spin_spell_slot_charapter0_7.hide()
            self.spin_spell_slot_charapter0_8.hide()
            self.spin_spell_slot_charapter0_9.hide()
            self.spin_spell_slot_charapter1.hide()
            self.spin_spell_slot_charapter1_2.hide()
            self.spin_spell_slot_charapter1_3.hide()
            self.spin_spell_slot_charapter1_4.hide()
            self.spin_spell_slot_charapter1_5.hide()
            self.spin_spell_slot_charapter1_6.hide()
            self.spin_spell_slot_charapter1_7.hide()
            self.spin_spell_slot_charapter1_8.hide()
            self.spin_spell_slot_charapter1_9.hide()
            self.spin_spell_slot_charapter2.hide()
            self.spin_spell_slot_charapter2_2.hide()
            self.spin_spell_slot_charapter2_3.hide()
            self.spin_spell_slot_charapter2_4.hide()
            self.spin_spell_slot_charapter2_5.hide()
            self.spin_spell_slot_charapter2_6.hide()
            self.spin_spell_slot_charapter2_7.hide()
            self.spin_spell_slot_charapter2_8.hide()
            self.spin_spell_slot_charapter2_9.hide()
            self.spin_spell_slot_charapter3.hide()
            self.spin_spell_slot_charapter3_2.hide()
            self.spin_spell_slot_charapter3_3.hide()
            self.spin_spell_slot_charapter3_4.hide()
            self.spin_spell_slot_charapter3_5.hide()
            self.spin_spell_slot_charapter3_6.hide()
            self.spin_spell_slot_charapter3_7.hide()
            self.spin_spell_slot_charapter3_8.hide()
            self.spin_spell_slot_charapter3_9.hide()
            self.pushButton_restore_spell_slots_0.hide()
            self.pushButton_restore_spell_slots_1.hide()
            self.pushButton_restore_spell_slots_2.hide()
            self.pushButton_restore_spell_slots_3.hide()

            self.name.show()
            self.name_edit.show()
            self.hp.show()
            self.hp_edit.show()
            self.initiative.show()
            self.initiative_edit.show()
            self.pushButton.show()
            self.label.show()
            self.spell_slot.show()
            self.label_spell_slot.show()
            self.label_spell_slot_2.show()
            self.label_spell_slot_3.show()
            self.label_spell_slot_4.show()
            self.label_spell_slot_5.show()
            self.label_spell_slot_6.show()
            self.label_spell_slot_7.show()
            self.label_spell_slot_8.show()
            self.label_spell_slot_9.show()
            self.spell_slot_edit.show()
            self.spell_slot_edit_2.show()
            self.spell_slot_edit_3.show()
            self.spell_slot_edit_4.show()
            self.spell_slot_edit_5.show()
            self.spell_slot_edit_6.show()
            self.spell_slot_edit_7.show()
            self.spell_slot_edit_8.show()
            self.spell_slot_edit_9.show()

    def lock_initiative(self):
        check_checkbox = self.checkBox_lock_init.isChecked()
        try:
            if self.check_radiobutton == True:
                if len(hero) != 0:
                    if len(hero) == 1:
                        self.label_lock_init_chr_0.show()

                        self.initiative_edit_charapter0.hide()

                        self.label_lock_init_chr_0.setText(hero["charapter0"]['initiative'])

                    if len(hero) == 2:
                        self.label_lock_init_chr_0.show()
                        self.label_lock_init_chr_1.show()

                        self.initiative_edit_charapter0.hide()
                        self.initiative_edit_charapter1.hide()

                        self.label_lock_init_chr_0.setText(hero["charapter0"]['initiative'])
                        self.label_lock_init_chr_1.setText(hero["charapter1"]['initiative'])

                    if len(hero) == 3:
                        self.label_lock_init_chr_0.show()
                        self.label_lock_init_chr_1.show()
                        self.label_lock_init_chr_2.show()

                        self.initiative_edit_charapter0.hide()
                        self.initiative_edit_charapter1.hide()
                        self.initiative_edit_charapter2.hide()

                        self.label_lock_init_chr_0.setText(hero["charapter0"]['initiative'])
                        self.label_lock_init_chr_1.setText(hero["charapter1"]['initiative'])
                        self.label_lock_init_chr_2.setText(hero["charapter2"]['initiative'])

                    if len(hero) == 4:
                        if check_checkbox:
                            self.label_lock_init_chr_0.show()
                            self.label_lock_init_chr_1.show()
                            self.label_lock_init_chr_2.show()
                            self.label_lock_init_chr_3.show()

                            self.initiative_edit_charapter0.hide()
                            self.initiative_edit_charapter1.hide()
                            self.initiative_edit_charapter2.hide()
                            self.initiative_edit_charapter3.hide()

                            self.label_lock_init_chr_0.setText(hero["charapter0"]['initiative'])
                            self.label_lock_init_chr_1.setText(hero["charapter1"]['initiative'])
                            self.label_lock_init_chr_2.setText(hero["charapter2"]['initiative'])
                            self.label_lock_init_chr_3.setText(hero["charapter3"]['initiative'])

                if check_checkbox == False:
                    self.label_lock_init_chr_0.hide()
                    self.label_lock_init_chr_1.hide()
                    self.label_lock_init_chr_2.hide()
                    self.label_lock_init_chr_3.hide()

                    self.initiative_edit_charapter0.show()
                    self.initiative_edit_charapter1.show()
                    self.initiative_edit_charapter2.show()
                    self.initiative_edit_charapter3.show()
            else:
                pass
        except:
            pass

    def roll_dice(self):
        '''
        DOCKSTRING: рандом кубика и вывод в окно
        :param but:
        :return:
        '''
        try:
            dice = int(self.dice_edit.text())
            amount = int(self.amount_dice_box.text())
            value = 0
            if amount == 0:
                amount += 1
            for roll in range(amount):
                value += random.randint(1, dice)
            self.label_roll_dice.setText(str(value))
        except:
            error = QMessageBox()
            error.setWindowTitle('Ошибка')
            error.setText('Не корректный ввод данных')
            error.setIcon(QMessageBox.Icon.Warning)
            error.setStandardButtons(QMessageBox.StandardButton.Ok)
            error.setDefaultButton(QMessageBox.StandardButton.Ok)

            error.buttonClicked.connect(self.popup_action)

            error.exec()

    def actions_save(self):
        '''
        DOCKSTRING: сохранение в json файл
        :param but:
        :return:
        '''
        note_zero = self.note_edit_0.toPlainText()
        note_one = self.note_edit_1.toPlainText()
        note_two = self.note_edit_2.toPlainText()
        note_three = self.note_edit_3.toPlainText()
        save_dict = (hero, music, note_zero, note_one, note_two, note_three)
        data = QFileDialog.getSaveFileName(self)[0]

        try:
            with open(data, 'w') as outfile:
                json.dump(save_dict, outfile)
        except FileNotFoundError:
            print("No such file")

    def action_open(self):
        '''
        DOCKSTRING: загрузка из json файла
        :param but:
        :return:
        '''
        data = QFileDialog.getOpenFileName(self)[0]

        try:
            with open(data, 'r') as json_file:
                data = json.load(json_file)
                global hero
                global music
                hero = data[0]
                music = data[1]
                self.note_edit_0.setText(data[2])
                self.note_edit_1.setText(data[3])
                self.note_edit_2.setText(data[4])
                self.note_edit_3.setText(data[5])
            self.view_create_hero()
            self.add_to_tracker()
            self.music_changer_combo_box_update()
        except FileNotFoundError:
            print("No such file")

    def music_changer_update(self):
        '''
        DOCKSTRING: Добавление ссылок на музыку в словарь в формате сцена: урл
        :param but:
        :return:
        '''
        if self.scene_edit.text() not in music.keys():
            self.comboBox.addItem(self.scene_edit.text())
        if self.scene_edit.text() in music.keys():
            item = music[self.scene_edit.text()].split(' ')
            if self.url_edit.text() in item:
                error = QMessageBox()
                error.setWindowTitle('Ошибка')
                error.setText('Такая ссылка уже есть в этой сцене')
                error.setIcon(QMessageBox.Icon.Warning)
                error.setStandardButtons(QMessageBox.StandardButton.Ok)
                error.setDefaultButton(QMessageBox.StandardButton.Ok)

                error.buttonClicked.connect(self.popup_action)

                error.exec()
            else:
                value = self.url_edit.text()
                value_result = music[self.scene_edit.text()] + ' ' + value
                music.update({self.scene_edit.text(): value_result})
        else:
            music.update({self.scene_edit.text(): self.url_edit.text()})



        print(music)


    def music_changer_combo_box_update(self):
        '''
        DOCKSTRING: обновление комбо бокса, при загрузке сохранения
        :param but:
        :return:
        '''
        for i in music.keys():
            self.comboBox.addItem(i)

    def music_changer_play(self):
        value = music[self.comboBox.currentText()].split(' ')
        for i in range(len(value)):
            webbrowser.open(value[i])

    def music_changer_delete(self):
        if self.comboBox.currentText() in music.keys():
            list_key = list(music.keys())
            music.pop(self.comboBox.currentText())
            self.comboBox.removeItem(list_key.index(self.comboBox.currentText()))

            print(music)
        else:
            error = QMessageBox()
            error.setWindowTitle('Ошибка')
            error.setText('Сцена не найдена')
            error.setIcon(QMessageBox.Icon.Warning)
            error.setStandardButtons(QMessageBox.StandardButton.Ok)
            error.setDefaultButton(QMessageBox.StandardButton.Ok)

            error.buttonClicked.connect(self.popup_action)

            error.exec()

    def set_combobox_rules(self):
        for i in dict_rules:
            self.comboBox_rules.addItem(i)

    def changed_combobox_rules(self):
        self.label_rules.setText(dict_rules[self.comboBox_rules.currentText()])




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = MainWindow()
    MainWindow.show()
    sys.exit(app.exec())
